

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Jan 12 08:22:24 2023

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    64  0000                     
    65                           	psect	idataCOMRAM
    66  0021FE                     __pidataCOMRAM:
    67                           	opt stack 0
    68                           
    69                           ;initializer for _wait
    70  0021FE  003C               	dw	60
    71                           
    72                           ;initializer for display_the_event@count
    73  002200  FFFF               	dw	65535
    74                           
    75                           ;initializer for log_fun@mem_add
    76  002202  C8                 	db	200
    77                           
    78                           ;initializer for read_switches@once
    79  002203  01                 	db	1
    80                           
    81                           	psect	idataBANK0
    82  00211A                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _password
    86  00211A  30                 	db	48
    87  00211B  30                 	db	48
    88  00211C  30                 	db	48
    89  00211D  30                 	db	48
    90  00211E  00                 	db	0
    91                           
    92                           ;initializer for give_password@no_attempts
    93  00211F  0003               	dw	3
    94                           
    95                           ;initializer for _gear
    96  002121  4E                 	db	78
    97  002122  55                 	db	85
    98  002123  00                 	db	0
    99  002124  47                 	db	71
   100  002125  31                 	db	49
   101  002126  00                 	db	0
   102  002127  47                 	db	71
   103  002128  32                 	db	50
   104  002129  00                 	db	0
   105  00212A  47                 	db	71
   106  00212B  33                 	db	51
   107  00212C  00                 	db	0
   108  00212D  47                 	db	71
   109  00212E  34                 	db	52
   110  00212F  00                 	db	0
   111  002130  47                 	db	71
   112  002131  35                 	db	53
   113  002132  00                 	db	0
   114  002133  52                 	db	82
   115  002134  20                 	db	32
   116  002135  00                 	db	0
   117  002136  43                 	db	67
   118  002137  52                 	db	82
   119  002138  00                 	db	0
   120                           
   121                           	psect	idataBANK1
   122  001DB2                     __pidataBANK1:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _menu
   126  001DB2  56                 	db	86
   127  001DB3  69                 	db	105
   128  001DB4  65                 	db	101
   129  001DB5  77                 	db	119
   130  001DB6  20                 	db	32
   131  001DB7  6C                 	db	108
   132  001DB8  6F                 	db	111
   133  001DB9  67                 	db	103
   134  001DBA  20                 	db	32
   135  001DBB  20                 	db	32
   136  001DBC  20                 	db	32
   137  001DBD  20                 	db	32
   138  001DBE  20                 	db	32
   139  001DBF  20                 	db	32
   140  001DC0  20                 	db	32
   141  001DC1  20                 	db	32
   142  001DC2  00                 	db	0
   143  001DC3  44                 	db	68
   144  001DC4  6F                 	db	111
   145  001DC5  77                 	db	119
   146  001DC6  6E                 	db	110
   147  001DC7  6C                 	db	108
   148  001DC8  6F                 	db	111
   149  001DC9  61                 	db	97
   150  001DCA  64                 	db	100
   151  001DCB  20                 	db	32
   152  001DCC  6C                 	db	108
   153  001DCD  6F                 	db	111
   154  001DCE  67                 	db	103
   155  001DCF  20                 	db	32
   156  001DD0  20                 	db	32
   157  001DD1  20                 	db	32
   158  001DD2  20                 	db	32
   159  001DD3  00                 	db	0
   160  001DD4  43                 	db	67
   161  001DD5  6C                 	db	108
   162  001DD6  65                 	db	101
   163  001DD7  61                 	db	97
   164  001DD8  72                 	db	114
   165  001DD9  20                 	db	32
   166  001DDA  6C                 	db	108
   167  001DDB  6F                 	db	111
   168  001DDC  67                 	db	103
   169  001DDD  20                 	db	32
   170  001DDE  20                 	db	32
   171  001DDF  20                 	db	32
   172  001DE0  20                 	db	32
   173  001DE1  20                 	db	32
   174  001DE2  20                 	db	32
   175  001DE3  20                 	db	32
   176  001DE4  00                 	db	0
   177  001DE5  43                 	db	67
   178  001DE6  68                 	db	104
   179  001DE7  61                 	db	97
   180  001DE8  6E                 	db	110
   181  001DE9  67                 	db	103
   182  001DEA  65                 	db	101
   183  001DEB  20                 	db	32
   184  001DEC  50                 	db	80
   185  001DED  57                 	db	87
   186  001DEE  44                 	db	68
   187  001DEF  20                 	db	32
   188  001DF0  20                 	db	32
   189  001DF1  20                 	db	32
   190  001DF2  20                 	db	32
   191  001DF3  20                 	db	32
   192  001DF4  00                 	db	0
   193  001DF5  00                 	db	0
   194  001DF6  20                 	db	32
   195  001DF7  20                 	db	32
   196  001DF8  20                 	db	32
   197  001DF9  20                 	db	32
   198  001DFA  20                 	db	32
   199  001DFB  20                 	db	32
   200  001DFC  20                 	db	32
   201  001DFD  20                 	db	32
   202  001DFE  20                 	db	32
   203  001DFF  20                 	db	32
   204  001E00  20                 	db	32
   205  001E01  20                 	db	32
   206  001E02  20                 	db	32
   207  001E03  20                 	db	32
   208  001E04  20                 	db	32
   209  001E05  20                 	db	32
   210  001E06  00                 	db	0
   211  0000                     _ADCON0	set	4034
   212  0000                     _ADCON1	set	4033
   213  0000                     _ADRESH	set	4036
   214  0000                     _ADRESL	set	4035
   215  0000                     _PORTB	set	3969
   216  0000                     _PORTBbits	set	3969
   217  0000                     _PORTD	set	3971
   218  0000                     _PR2	set	4043
   219  0000                     _RCREG	set	4014
   220  0000                     _SPBRG	set	4015
   221  0000                     _SSPADD	set	4040
   222  0000                     _SSPBUF	set	4041
   223  0000                     _SSPCON1	set	4038
   224  0000                     _TRISB	set	3987
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISD	set	3989
   227  0000                     _TXREG	set	4013
   228  0000                     _ABDEN	set	32192
   229  0000                     _ABDOVF	set	32199
   230  0000                     _ACKDT	set	32301
   231  0000                     _ACKEN	set	32300
   232  0000                     _ACKSTAT	set	32302
   233  0000                     _ACQT0	set	32259
   234  0000                     _ACQT1	set	32260
   235  0000                     _ACQT2	set	32261
   236  0000                     _ADCS0	set	32256
   237  0000                     _ADCS1	set	32257
   238  0000                     _ADCS2	set	32258
   239  0000                     _ADDEN	set	32091
   240  0000                     _ADFM	set	32263
   241  0000                     _ADON	set	32272
   242  0000                     _BCLIF	set	32011
   243  0000                     _BRG16	set	32195
   244  0000                     _BRGH	set	32098
   245  0000                     _CHS2	set	32276
   246  0000                     _CKE	set	32318
   247  0000                     _CREN	set	32092
   248  0000                     _CSRC	set	32103
   249  0000                     _FERR	set	32090
   250  0000                     _GIE	set	32663
   251  0000                     _GO	set	32273
   252  0000                     _GODONE	set	32273
   253  0000                     _OERR	set	32089
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RBPU	set	32655
   257  0000                     _RC0	set	31760
   258  0000                     _RC1	set	31761
   259  0000                     _RC2	set	31762
   260  0000                     _RCEN	set	32299
   261  0000                     _RCIDL	set	32198
   262  0000                     _RCIE	set	31981
   263  0000                     _RCIF	set	31989
   264  0000                     _RD7	set	31775
   265  0000                     _RSEN	set	32297
   266  0000                     _RX9	set	32094
   267  0000                     _RX9D	set	32088
   268  0000                     _SCKP	set	32196
   269  0000                     _SEN	set	32296
   270  0000                     _SENDB	set	32099
   271  0000                     _SMP	set	32319
   272  0000                     _SPEN	set	32095
   273  0000                     _SREN	set	32093
   274  0000                     _SSPIF	set	31987
   275  0000                     _SYNC	set	32100
   276  0000                     _TMR2IE	set	31977
   277  0000                     _TMR2IF	set	31985
   278  0000                     _TMR2ON	set	32338
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _TRISC6	set	31910
   282  0000                     _TRISC7	set	31911
   283  0000                     _TRISD7	set	31919
   284  0000                     _TRMT	set	32097
   285  0000                     _TX9	set	32102
   286  0000                     _TX9D	set	32096
   287  0000                     _TXEN	set	32101
   288  0000                     _TXIE	set	31980
   289  0000                     _TXIF	set	31988
   290  0000                     _VCFG0	set	32268
   291  0000                     _VCFG1	set	32269
   292  0000                     _WUE	set	32193
   293                           
   294                           	psect	smallconst
   295  000600                     __psmallconst:
   296                           	opt stack 0
   297  000600  00                 	db	0
   298  000601                     STR_8:
   299  000601  20                 	db	32
   300  000602  20                 	db	32
   301  000603  20                 	db	32
   302  000604  53                 	db	83	;'S'
   303  000605  55                 	db	85	;'U'
   304  000606  43                 	db	67	;'C'
   305  000607  43                 	db	67	;'C'
   306  000608  45                 	db	69	;'E'
   307  000609  53                 	db	83	;'S'
   308  00060A  53                 	db	83	;'S'
   309  00060B  46                 	db	70	;'F'
   310  00060C  55                 	db	85	;'U'
   311  00060D  4C                 	db	76	;'L'
   312  00060E  20                 	db	32
   313  00060F  20                 	db	32
   314  000610  20                 	db	32
   315  000611  00                 	db	0
   316  000612                     STR_9:
   317  000612  41                 	db	65	;'A'
   318  000613  74                 	db	116	;'t'
   319  000614  74                 	db	116	;'t'
   320  000615  65                 	db	101	;'e'
   321  000616  6D                 	db	109	;'m'
   322  000617  70                 	db	112	;'p'
   323  000618  74                 	db	116	;'t'
   324  000619  73                 	db	115	;'s'
   325  00061A  20                 	db	32
   326  00061B  4F                 	db	79	;'O'
   327  00061C  76                 	db	118	;'v'
   328  00061D  65                 	db	101	;'e'
   329  00061E  72                 	db	114	;'r'
   330  00061F  20                 	db	32
   331  000620  20                 	db	32
   332  000621  20                 	db	32
   333  000622  00                 	db	0
   334  000623                     STR_13:
   335  000623  46                 	db	70	;'F'
   336  000624  69                 	db	105	;'i'
   337  000625  6C                 	db	108	;'l'
   338  000626  65                 	db	101	;'e'
   339  000627  73                 	db	115	;'s'
   340  000628  20                 	db	32
   341  000629  64                 	db	100	;'d'
   342  00062A  6F                 	db	111	;'o'
   343  00062B  77                 	db	119	;'w'
   344  00062C  6E                 	db	110	;'n'
   345  00062D  6C                 	db	108	;'l'
   346  00062E  6F                 	db	111	;'o'
   347  00062F  61                 	db	97	;'a'
   348  000630  64                 	db	100	;'d'
   349  000631  65                 	db	101	;'e'
   350  000632  64                 	db	100	;'d'
   351  000633  00                 	db	0
   352  000634                     STR_15:
   353  000634  50                 	db	80	;'P'
   354  000635  61                 	db	97	;'a'
   355  000636  73                 	db	115	;'s'
   356  000637  73                 	db	115	;'s'
   357  000638  77                 	db	119	;'w'
   358  000639  6F                 	db	111	;'o'
   359  00063A  72                 	db	114	;'r'
   360  00063B  64                 	db	100	;'d'
   361  00063C  20                 	db	32
   362  00063D  63                 	db	99	;'c'
   363  00063E  68                 	db	104	;'h'
   364  00063F  61                 	db	97	;'a'
   365  000640  6E                 	db	110	;'n'
   366  000641  67                 	db	103	;'g'
   367  000642  65                 	db	101	;'e'
   368  000643  64                 	db	100	;'d'
   369  000644  00                 	db	0
   370  000645                     STR_14:
   371  000645  20                 	db	32
   372  000646  20                 	db	32
   373  000647  20                 	db	32
   374  000648  45                 	db	69	;'E'
   375  000649  76                 	db	118	;'v'
   376  00064A  65                 	db	101	;'e'
   377  00064B  6E                 	db	110	;'n'
   378  00064C  74                 	db	116	;'t'
   379  00064D  73                 	db	115	;'s'
   380  00064E  20                 	db	32
   381  00064F  65                 	db	101	;'e'
   382  000650  72                 	db	114	;'r'
   383  000651  61                 	db	97	;'a'
   384  000652  73                 	db	115	;'s'
   385  000653  65                 	db	101	;'e'
   386  000654  64                 	db	100	;'d'
   387  000655  00                 	db	0
   388  000656                     STR_11:
   389  000656  20                 	db	32
   390  000657  20                 	db	32
   391  000658  20                 	db	32
   392  000659  45                 	db	69	;'E'
   393  00065A  76                 	db	118	;'v'
   394  00065B  65                 	db	101	;'e'
   395  00065C  6E                 	db	110	;'n'
   396  00065D  74                 	db	116	;'t'
   397  00065E  20                 	db	32
   398  00065F  4C                 	db	76	;'L'
   399  000660  6F                 	db	111	;'o'
   400  000661  67                 	db	103	;'g'
   401  000662  20                 	db	32
   402  000663  20                 	db	32
   403  000664  20                 	db	32
   404  000665  00                 	db	0
   405  000666                     STR_1:
   406  000666  54                 	db	84	;'T'
   407  000667  49                 	db	73	;'I'
   408  000668  4D                 	db	77	;'M'
   409  000669  45                 	db	69	;'E'
   410  00066A  20                 	db	32
   411  00066B  20                 	db	32
   412  00066C  20                 	db	32
   413  00066D  20                 	db	32
   414  00066E  20                 	db	32
   415  00066F  45                 	db	69	;'E'
   416  000670  56                 	db	86	;'V'
   417  000671  20                 	db	32
   418  000672  20                 	db	32
   419  000673  53                 	db	83	;'S'
   420  000674  50                 	db	80	;'P'
   421  000675  00                 	db	0
   422  000676                     STR_4:
   423  000676  20                 	db	32
   424  000677  45                 	db	69	;'E'
   425  000678  6E                 	db	110	;'n'
   426  000679  74                 	db	116	;'t'
   427  00067A  65                 	db	101	;'e'
   428  00067B  72                 	db	114	;'r'
   429  00067C  20                 	db	32
   430  00067D  50                 	db	80	;'P'
   431  00067E  61                 	db	97	;'a'
   432  00067F  73                 	db	115	;'s'
   433  000680  73                 	db	115	;'s'
   434  000681  77                 	db	119	;'w'
   435  000682  6F                 	db	111	;'o'
   436  000683  72                 	db	114	;'r'
   437  000684  64                 	db	100	;'d'
   438  000685  00                 	db	0
   439  000686                     STR_10:
   440  000686  50                 	db	80	;'P'
   441  000687  6C                 	db	108	;'l'
   442  000688  65                 	db	101	;'e'
   443  000689  61                 	db	97	;'a'
   444  00068A  73                 	db	115	;'s'
   445  00068B  65                 	db	101	;'e'
   446  00068C  20                 	db	32
   447  00068D  77                 	db	119	;'w'
   448  00068E  61                 	db	97	;'a'
   449  00068F  69                 	db	105	;'i'
   450  000690  74                 	db	116	;'t'
   451  000691  3A                 	db	58	;':'
   452  000692  20                 	db	32
   453  000693  00                 	db	0
   454  000694                     STR_6:
   455  000694  54                 	db	84	;'T'
   456  000695  72                 	db	114	;'r'
   457  000696  79                 	db	121	;'y'
   458  000697  20                 	db	32
   459  000698  41                 	db	65	;'A'
   460  000699  67                 	db	103	;'g'
   461  00069A  61                 	db	97	;'a'
   462  00069B  69                 	db	105	;'i'
   463  00069C  6E                 	db	110	;'n'
   464  00069D  00                 	db	0
   465  00069E                     STR_7:
   466  00069E  41                 	db	65	;'A'
   467  00069F  74                 	db	116	;'t'
   468  0006A0  74                 	db	116	;'t'
   469  0006A1  65                 	db	101	;'e'
   470  0006A2  6D                 	db	109	;'m'
   471  0006A3  70                 	db	112	;'p'
   472  0006A4  74                 	db	116	;'t'
   473  0006A5  73                 	db	115	;'s'
   474  0006A6  00                 	db	0
   475  0006A7                     STR_12:
   476  0006A7  0A                 	db	10
   477  0006A8  0D                 	db	13
   478  0006A9  00                 	db	0
   479  0006AA                     STR_3:
   480  0006AA  4F                 	db	79	;'O'
   481  0006AB  4E                 	db	78	;'N'
   482  0006AC  00                 	db	0
   483  0006AD  00                 	db	0	; dummy byte at the end
   484  0000                     
   485                           ; #config settings
   486                           
   487                           	psect	cinit
   488  001BEE                     __pcinit:
   489                           	opt stack 0
   490  001BEE                     start_initialization:
   491                           	opt stack 0
   492  001BEE                     __initialization:
   493                           	opt stack 0
   494                           
   495                           ; Clear objects allocated to BANK0 (88 bytes)
   496  001BEE  EE00  F060         	lfsr	0,__pbssBANK0
   497  001BF2  0E58               	movlw	88
   498  001BF4                     clear_0:
   499  001BF4  6AEE               	clrf	postinc0,c
   500  001BF6  06E8               	decf	wreg,f,c
   501  001BF8  E1FD               	bnz	clear_0
   502                           
   503                           ; Clear objects allocated to COMRAM (30 bytes)
   504  001BFA  EE00  F02D         	lfsr	0,__pbssCOMRAM
   505  001BFE  0E1E               	movlw	30
   506  001C00                     clear_1:
   507  001C00  6AEE               	clrf	postinc0,c
   508  001C02  06E8               	decf	wreg,f,c
   509  001C04  E1FD               	bnz	clear_1
   510                           
   511                           ; Initialize objects allocated to BANK1 (85 bytes)
   512                           ; load TBLPTR registers with __pidataBANK1
   513  001C06  0EB2               	movlw	low __pidataBANK1
   514  001C08  6EF6               	movwf	tblptrl,c
   515  001C0A  0E1D               	movlw	high __pidataBANK1
   516  001C0C  6EF7               	movwf	tblptrh,c
   517  001C0E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   518  001C10  6EF8               	movwf	tblptru,c
   519  001C12  EE01  F000         	lfsr	0,__pdataBANK1
   520  001C16  EE10 F055          	lfsr	1,85
   521  001C1A                     copy_data0:
   522  001C1A  0009               	tblrd		*+
   523  001C1C  CFF5 FFEE          	movff	tablat,postinc0
   524  001C20  50E5               	movf	postdec1,w,c
   525  001C22  50E1               	movf	fsr1l,w,c
   526  001C24  E1FA               	bnz	copy_data0
   527                           
   528                           ; Initialize objects allocated to BANK0 (31 bytes)
   529                           ; load TBLPTR registers with __pidataBANK0
   530  001C26  0E1A               	movlw	low __pidataBANK0
   531  001C28  6EF6               	movwf	tblptrl,c
   532  001C2A  0E21               	movlw	high __pidataBANK0
   533  001C2C  6EF7               	movwf	tblptrh,c
   534  001C2E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   535  001C30  6EF8               	movwf	tblptru,c
   536  001C32  EE00  F0B8         	lfsr	0,__pdataBANK0
   537  001C36  EE10 F01F          	lfsr	1,31
   538  001C3A                     copy_data1:
   539  001C3A  0009               	tblrd		*+
   540  001C3C  CFF5 FFEE          	movff	tablat,postinc0
   541  001C40  50E5               	movf	postdec1,w,c
   542  001C42  50E1               	movf	fsr1l,w,c
   543  001C44  E1FA               	bnz	copy_data1
   544                           
   545                           ; Initialize objects allocated to COMRAM (6 bytes)
   546                           ; load TBLPTR registers with __pidataCOMRAM
   547  001C46  0EFE               	movlw	low __pidataCOMRAM
   548  001C48  6EF6               	movwf	tblptrl,c
   549  001C4A  0E21               	movlw	high __pidataCOMRAM
   550  001C4C  6EF7               	movwf	tblptrh,c
   551  001C4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   552  001C50  6EF8               	movwf	tblptru,c
   553  001C52  EE00  F04B         	lfsr	0,__pdataCOMRAM
   554  001C56  EE10 F006          	lfsr	1,6
   555  001C5A                     copy_data2:
   556  001C5A  0009               	tblrd		*+
   557  001C5C  CFF5 FFEE          	movff	tablat,postinc0
   558  001C60  50E5               	movf	postdec1,w,c
   559  001C62  50E1               	movf	fsr1l,w,c
   560  001C64  E1FA               	bnz	copy_data2
   561  001C66                     end_of_initialization:
   562                           	opt stack 0
   563  001C66                     __end_of__initialization:
   564                           	opt stack 0
   565  001C66  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   566  001C68  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   567  001C6A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   568  001C6C  6EF8               	movwf	tblptru,c
   569  001C6E  0100               	movlb	0
   570  001C70  EF62  F00D         	goto	_main	;jump to C main() function
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580                           	psect	bssCOMRAM
   581  00002D                     __pbssCOMRAM:
   582                           	opt stack 0
   583  00002D                     _adc_reg_val:
   584                           	opt stack 0
   585  00002D                     	ds	2
   586  00002F                     _blink:
   587                           	opt stack 0
   588  00002F                     	ds	2
   589  000031                     _count_event:
   590                           	opt stack 0
   591  000031                     	ds	2
   592  000033                     _menu_flag:
   593                           	opt stack 0
   594  000033                     	ds	2
   595  000035                     display_menu@count:
   596                           	opt stack 0
   597  000035                     	ds	2
   598  000037                     display_menu@key11_wait:
   599                           	opt stack 0
   600  000037                     	ds	2
   601  000039                     display_menu@menu_wait:
   602                           	opt stack 0
   603  000039                     	ds	2
   604  00003B                     display_the_event@flag:
   605                           	opt stack 0
   606  00003B                     	ds	2
   607  00003D                     give_password@j:
   608                           	opt stack 0
   609  00003D                     	ds	2
   610  00003F                     give_password@k:
   611                           	opt stack 0
   612  00003F                     	ds	2
   613  000041                     log_fun@_378:
   614                           	opt stack 0
   615  000041                     	ds	2
   616  000043                     log_fun@_379:
   617                           	opt stack 0
   618  000043                     	ds	2
   619  000045                     log_fun@event_num:
   620                           	opt stack 0
   621  000045                     	ds	2
   622  000047                     log_fun@i:
   623                           	opt stack 0
   624  000047                     	ds	2
   625  000049                     log_fun@key:
   626                           	opt stack 0
   627  000049                     	ds	1
   628  00004A                     read_switches@key:
   629                           	opt stack 0
   630  00004A                     	ds	1
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           
   640                           	psect	dataCOMRAM
   641  00004B                     __pdataCOMRAM:
   642                           	opt stack 0
   643  00004B                     _wait:
   644                           	opt stack 0
   645  00004B                     	ds	2
   646  00004D                     display_the_event@count:
   647                           	opt stack 0
   648  00004D                     	ds	2
   649  00004F                     log_fun@mem_add:
   650                           	opt stack 0
   651  00004F                     	ds	1
   652  000050                     read_switches@once:
   653                           	opt stack 0
   654  000050                     	ds	1
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	bssBANK0
   665  000060                     __pbssBANK0:
   666                           	opt stack 0
   667  000060                     _data:
   668                           	opt stack 0
   669  000060                     	ds	11
   670  00006B                     _date:
   671                           	opt stack 0
   672  00006B                     	ds	11
   673  000076                     give_password@attempt:
   674                           	opt stack 0
   675  000076                     	ds	4
   676  00007A                     give_password@delay:
   677                           	opt stack 0
   678  00007A                     	ds	4
   679  00007E                     _clock_reg:
   680                           	opt stack 0
   681  00007E                     	ds	3
   682  000081                     _count_event_flag:
   683                           	opt stack 0
   684  000081                     	ds	2
   685  000083                     _enter_flag:
   686                           	opt stack 0
   687  000083                     	ds	2
   688  000085                     _key11_flag:
   689                           	opt stack 0
   690  000085                     	ds	2
   691  000087                     _key11_wait_flag:
   692                           	opt stack 0
   693  000087                     	ds	2
   694  000089                     _log_flag:
   695                           	opt stack 0
   696  000089                     	ds	2
   697  00008B                     _node_flag:
   698                           	opt stack 0
   699  00008B                     	ds	2
   700  00008D                     _one_flag:
   701                           	opt stack 0
   702  00008D                     	ds	2
   703  00008F                     _op_flag:
   704                           	opt stack 0
   705  00008F                     	ds	2
   706  000091                     _wait_flag:
   707                           	opt stack 0
   708  000091                     	ds	2
   709  000093                     	ds	2
   710  000095                     display_the_event@on_flag:
   711                           	opt stack 0
   712  000095                     	ds	2
   713  000097                     	ds	2
   714  000099                     give_password@enter_pwd:
   715                           	opt stack 0
   716  000099                     	ds	2
   717  00009B                     give_password@failure_flag:
   718                           	opt stack 0
   719  00009B                     	ds	2
   720  00009D                     give_password@i:
   721                           	opt stack 0
   722  00009D                     	ds	2
   723  00009F                     give_password@key_8_flag:
   724                           	opt stack 0
   725  00009F                     	ds	2
   726  0000A1                     give_password@password_flag:
   727                           	opt stack 0
   728  0000A1                     	ds	2
   729  0000A3                     	ds	2
   730  0000A5                     isr@count:
   731                           	opt stack 0
   732  0000A5                     	ds	2
   733  0000A7                     	ds	2
   734  0000A9                     	ds	2
   735  0000AB                     log_fun@view_flag:
   736                           	opt stack 0
   737  0000AB                     	ds	2
   738  0000AD                     log_fun@wait:
   739                           	opt stack 0
   740  0000AD                     	ds	2
   741  0000AF                     _time:
   742                           	opt stack 0
   743  0000AF                     	ds	9
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           postdec1	equ	0xFE5
   751                           fsr1l	equ	0xFE1
   752                           
   753                           	psect	dataBANK0
   754  0000B8                     __pdataBANK0:
   755                           	opt stack 0
   756  0000B8                     _password:
   757                           	opt stack 0
   758  0000B8                     	ds	5
   759  0000BD                     give_password@no_attempts:
   760                           	opt stack 0
   761  0000BD                     	ds	2
   762  0000BF                     _gear:
   763                           	opt stack 0
   764  0000BF                     	ds	24
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           postdec1	equ	0xFE5
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	dataBANK1
   775  000100                     __pdataBANK1:
   776                           	opt stack 0
   777  000100                     _menu:
   778                           	opt stack 0
   779  000100                     	ds	85
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           postdec1	equ	0xFE5
   787                           fsr1l	equ	0xFE1
   788                           
   789                           	psect	cstackBANK0
   790  0000D7                     __pcstackBANK0:
   791                           	opt stack 0
   792  0000D7                     ??___fttol:
   793  0000D7                     log_fun@i_374:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x0
   797  0000D7                     	ds	4
   798  0000DB                     log_fun@i_376:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x4
   802  0000DB                     	ds	1
   803  0000DC                     ___fttol@sign1:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x5
   807  0000DC                     	ds	1
   808  0000DD                     ___fttol@lval:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x6
   812  0000DD                     	ds	2
   813  0000DF                     log_fun@i_381:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x8
   817  0000DF                     	ds	2
   818  0000E1                     ___fttol@exp1:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0xA
   822  0000E1                     	ds	1
   823  0000E2                     display_the_event@key:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0xB
   827  0000E2                     	ds	1
   828  0000E3                     log_fun@j_366:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0xC
   832  0000E3                     	ds	2
   833  0000E5                     log_fun@j_368:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0xE
   837  0000E5                     	ds	2
   838  0000E7                     log_fun@k:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x10
   842  0000E7                     	ds	2
   843  0000E9                     log_fun@i_367:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x12
   847  0000E9                     	ds	2
   848  0000EB                     main@key:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x14
   852  0000EB                     	ds	1
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           postdec1	equ	0xFE5
   860                           fsr1l	equ	0xFE1
   861                           
   862                           	psect	cstackCOMRAM
   863  000001                     __pcstackCOMRAM:
   864                           	opt stack 0
   865  000001                     ??_isr:
   866  000001                     
   867                           ; 1 bytes @ 0x0
   868  000001                     	ds	14
   869  00000F                     ?_read_adc:
   870                           	opt stack 0
   871  00000F                     ?___wmul:
   872                           	opt stack 0
   873  00000F                     ?___lwdiv:
   874                           	opt stack 0
   875  00000F                     ?___ftpack:
   876                           	opt stack 0
   877  00000F                     clcd_write@control_bit:
   878                           	opt stack 0
   879  00000F                     putch@byte:
   880                           	opt stack 0
   881  00000F                     read_switches@detection_type:
   882                           	opt stack 0
   883  00000F                     i2c_write@data:
   884                           	opt stack 0
   885  00000F                     ___wmul@multiplier:
   886                           	opt stack 0
   887  00000F                     ___lwdiv@dividend:
   888                           	opt stack 0
   889  00000F                     ___ftpack@arg:
   890                           	opt stack 0
   891                           
   892                           ; 3 bytes @ 0xE
   893  00000F                     	ds	1
   894  000010                     write_ext_eeprom@data:
   895                           	opt stack 0
   896  000010                     read_ext_eeprom@address:
   897                           	opt stack 0
   898  000010                     clcd_write@byte:
   899                           	opt stack 0
   900  000010                     write_ds1307@data:
   901                           	opt stack 0
   902  000010                     read_ds1307@address:
   903                           	opt stack 0
   904  000010                     puts@s:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0xF
   908  000010                     	ds	1
   909  000011                     ??_read_adc:
   910  000011                     write_ext_eeprom@address:
   911                           	opt stack 0
   912  000011                     read_ext_eeprom@data:
   913                           	opt stack 0
   914  000011                     write_ds1307@address:
   915                           	opt stack 0
   916  000011                     read_ds1307@data:
   917                           	opt stack 0
   918  000011                     ___wmul@multiplicand:
   919                           	opt stack 0
   920  000011                     ___lwdiv@divisor:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x10
   924  000011                     	ds	1
   925  000012                     init_ds1307@dummy:
   926                           	opt stack 0
   927  000012                     ___ftpack@exp:
   928                           	opt stack 0
   929  000012                     write_ext_eeprom@wait:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x11
   933  000012                     	ds	1
   934  000013                     read_adc@channel:
   935                           	opt stack 0
   936  000013                     ___ftpack@sign:
   937                           	opt stack 0
   938  000013                     ___lwdiv@counter:
   939                           	opt stack 0
   940  000013                     ___wmul@product:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x12
   944  000013                     	ds	1
   945  000014                     ??___ftpack:
   946  000014                     read_adc@reg_val:
   947                           	opt stack 0
   948  000014                     ___lwdiv@quotient:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x13
   952  000014                     	ds	1
   953  000015                     clcd_print@data:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x14
   957  000015                     	ds	1
   958  000016                     ?___lwmod:
   959                           	opt stack 0
   960  000016                     ___lwmod@dividend:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x15
   964  000016                     	ds	1
   965  000017                     ?___lwtoft:
   966                           	opt stack 0
   967  000017                     clcd_print@addr:
   968                           	opt stack 0
   969  000017                     ___lwtoft@c:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x16
   973  000017                     	ds	1
   974  000018                     init_config@add:
   975                           	opt stack 0
   976  000018                     ___lwmod@divisor:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x17
   980  000018                     	ds	1
   981  000019                     init_config@i:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x18
   985  000019                     	ds	1
   986  00001A                     ?___ftdiv:
   987                           	opt stack 0
   988  00001A                     ___lwmod@counter:
   989                           	opt stack 0
   990  00001A                     ___ftdiv@f1:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x19
   994  00001A                     	ds	1
   995  00001B                     clcd_putch@addr:
   996                           	opt stack 0
   997  00001B                     store_event@count:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x1A
  1001  00001B                     	ds	1
  1002  00001C                     clcd_putch@data:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x1B
  1006  00001C                     	ds	1
  1007  00001D                     log_fun@count:
  1008                           	opt stack 0
  1009  00001D                     ___ftdiv@f2:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x1C
  1013  00001D                     	ds	1
  1014  00001E                     store_event@i:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x1D
  1018  00001E                     	ds	1
  1019  00001F                     give_password@key:
  1020                           	opt stack 0
  1021  00001F                     log_fun@limit:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x1E
  1025  00001F                     	ds	1
  1026  000020                     ??___ftdiv:
  1027  000020                     store_event@j:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x1F
  1031  000020                     	ds	1
  1032  000021                     display_menu@key:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x20
  1036  000021                     	ds	2
  1037  000023                     ___ftdiv@cntr:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x22
  1041  000023                     	ds	1
  1042  000024                     ___ftdiv@f3:
  1043                           	opt stack 0
  1044                           
  1045                           ; 3 bytes @ 0x23
  1046  000024                     	ds	3
  1047  000027                     ___ftdiv@exp:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x26
  1051  000027                     	ds	1
  1052  000028                     ___ftdiv@sign:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x27
  1056  000028                     	ds	1
  1057  000029                     ?___fttol:
  1058                           	opt stack 0
  1059  000029                     ___fttol@f1:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x28
  1063  000029                     	ds	4
  1064  00002D                     tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1l	equ	0xFE1
  1072                           
  1073                           ; 1 bytes @ 0x2C
  1074 ;;
  1075 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1076 ;;
  1077 ;; *************** function _main *****************
  1078 ;; Defined at:
  1079 ;;		line 85 in file "main.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  key             1   20[BANK0 ] unsigned char 
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      void 
  1086 ;; Registers used:
  1087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1093 ;;      Params:         0       0       0       0       0       0       0
  1094 ;;      Locals:         0       1       0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0       0       0
  1096 ;;      Totals:         0       1       0       0       0       0       0
  1097 ;;Total ram usage:        1 bytes
  1098 ;; Hardware stack levels required when called:    7
  1099 ;; This function calls:
  1100 ;;		_clcd_print
  1101 ;;		_display_menu
  1102 ;;		_display_the_event
  1103 ;;		_display_time
  1104 ;;		_get_time
  1105 ;;		_give_password
  1106 ;;		_init_config
  1107 ;;		_read_switches
  1108 ;; This function is called by:
  1109 ;;		Startup code after reset
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           	psect	text0
  1114  001AC4                     __ptext0:
  1115                           	opt stack 0
  1116  001AC4                     _main:
  1117                           	opt stack 24
  1118                           
  1119                           ;main.c: 87: unsigned char key;
  1120                           ;main.c: 88: init_config();
  1121                           
  1122                           ;incstack = 0
  1123  001AC4  EC76  F00E         	call	_init_config	;wreg free
  1124  001AC8                     l4743:
  1125                           
  1126                           ;main.c: 90: {
  1127                           ;main.c: 91: key = read_switches(0);
  1128  001AC8  0E00               	movlw	0
  1129  001ACA  EC72  F00F         	call	_read_switches
  1130  001ACE  0100               	movlb	0	; () banked
  1131  001AD0  6FEB               	movwf	main@key& (0+255),b
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;main.c: 92: if(key == 8)
  1135  001AD2  0E08               	movlw	8
  1136  001AD4  0100               	movlb	0	; () banked
  1137  001AD6  19EB               	xorwf	main@key& (0+255),w,b
  1138  001AD8  A4D8               	btfss	status,2,c
  1139  001ADA  D006               	goto	l4749
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;main.c: 93: {
  1143                           ;main.c: 94: node_flag = 1;
  1144  001ADC  0E00               	movlw	0
  1145  001ADE  0100               	movlb	0	; () banked
  1146  001AE0  6F8C               	movwf	(_node_flag+1)& (0+255),b
  1147  001AE2  0E01               	movlw	1
  1148  001AE4  6F8B               	movwf	_node_flag& (0+255),b
  1149                           
  1150                           ;main.c: 95: }
  1151  001AE6  D01B               	goto	l4761
  1152  001AE8                     l4749:
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 96: else if(key != 8 && node_flag == 0)
  1156  001AE8  0E08               	movlw	8
  1157  001AEA  0100               	movlb	0	; () banked
  1158  001AEC  19EB               	xorwf	main@key& (0+255),w,b
  1159  001AEE  B4D8               	btfsc	status,2,c
  1160  001AF0  D016               	goto	l4761
  1161                           
  1162                           ; BSR set to: 0
  1163  001AF2  0100               	movlb	0	; () banked
  1164  001AF4  518B               	movf	_node_flag& (0+255),w,b
  1165  001AF6  0100               	movlb	0	; () banked
  1166  001AF8  118C               	iorwf	(_node_flag+1)& (0+255),w,b
  1167  001AFA  A4D8               	btfss	status,2,c
  1168  001AFC  D010               	goto	l4761
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;main.c: 97: {
  1172                           ;main.c: 98: clcd_print("TIME     EV  SP", (0x80 + (0)));
  1173  001AFE  0E66               	movlw	low STR_1
  1174  001B00  6E15               	movwf	clcd_print@data,c
  1175  001B02  0E06               	movlw	high STR_1
  1176  001B04  6E16               	movwf	clcd_print@data+1,c
  1177  001B06  0E80               	movlw	128
  1178  001B08  6E17               	movwf	clcd_print@addr,c
  1179  001B0A  ECA9  F00E         	call	_clcd_print	;wreg free
  1180                           
  1181                           ;main.c: 99: get_time();
  1182  001B0E  ECAF  F00D         	call	_get_time	;wreg free
  1183                           
  1184                           ;main.c: 100: display_time();
  1185  001B12  ECCC  F010         	call	_display_time	;wreg free
  1186                           
  1187                           ;main.c: 101: display_the_event(key);
  1188  001B16  0100               	movlb	0	; () banked
  1189  001B18  51EB               	movf	main@key& (0+255),w,b
  1190  001B1A  ECB1  F009         	call	_display_the_event
  1191  001B1E                     l4761:
  1192                           
  1193                           ;main.c: 102: }
  1194                           ;main.c: 103: if(node_flag == 1 && log_flag == 0)
  1195  001B1E  0100               	movlb	0	; () banked
  1196  001B20  058B               	decf	_node_flag& (0+255),w,b
  1197  001B22  0100               	movlb	0	; () banked
  1198  001B24  118C               	iorwf	(_node_flag+1)& (0+255),w,b
  1199  001B26  A4D8               	btfss	status,2,c
  1200  001B28  D00A               	goto	l4767
  1201                           
  1202                           ; BSR set to: 0
  1203  001B2A  0100               	movlb	0	; () banked
  1204  001B2C  5189               	movf	_log_flag& (0+255),w,b
  1205  001B2E  0100               	movlb	0	; () banked
  1206  001B30  118A               	iorwf	(_log_flag+1)& (0+255),w,b
  1207  001B32  A4D8               	btfss	status,2,c
  1208  001B34  D004               	goto	l4767
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 104: {
  1212                           ;main.c: 105: give_password(key);
  1213  001B36  0100               	movlb	0	; () banked
  1214  001B38  51EB               	movf	main@key& (0+255),w,b
  1215  001B3A  EC19  F006         	call	_give_password
  1216  001B3E                     l4767:
  1217                           
  1218                           ;main.c: 106: }
  1219                           ;main.c: 107: if(log_flag == 1)
  1220  001B3E  0100               	movlb	0	; () banked
  1221  001B40  0589               	decf	_log_flag& (0+255),w,b
  1222  001B42  0100               	movlb	0	; () banked
  1223  001B44  118A               	iorwf	(_log_flag+1)& (0+255),w,b
  1224  001B46  A4D8               	btfss	status,2,c
  1225  001B48  D7BF               	goto	l4743
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 108: {
  1229                           ;main.c: 109: key11_wait_flag = 0;
  1230  001B4A  0E00               	movlw	0
  1231  001B4C  0100               	movlb	0	; () banked
  1232  001B4E  6F88               	movwf	(_key11_wait_flag+1)& (0+255),b
  1233  001B50  0E00               	movlw	0
  1234  001B52  6F87               	movwf	_key11_wait_flag& (0+255),b
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 110: display_menu(key);
  1238  001B54  0100               	movlb	0	; () banked
  1239  001B56  51EB               	movf	main@key& (0+255),w,b
  1240  001B58  ECF6  F007         	call	_display_menu
  1241  001B5C  D7B5               	goto	l4743
  1242  001B5E                     __end_of_main:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec1	equ	0xFE5
  1251                           fsr1l	equ	0xFE1
  1252                           status	equ	0xFD8
  1253                           
  1254 ;; *************** function _init_config *****************
  1255 ;; Defined at:
  1256 ;;		line 58 in file "main.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;		None
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  i               2   24[COMRAM] int 
  1261 ;;  add             1   23[COMRAM] unsigned char 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1271 ;;      Params:         0       0       0       0       0       0       0
  1272 ;;      Locals:         3       0       0       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0       0       0
  1274 ;;      Totals:         3       0       0       0       0       0       0
  1275 ;;Total ram usage:        3 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    6
  1278 ;; This function calls:
  1279 ;;		_clcd_print
  1280 ;;		_init_adc
  1281 ;;		_init_clcd
  1282 ;;		_init_ds1307
  1283 ;;		_init_i2c
  1284 ;;		_init_matrix_keypad
  1285 ;;		_init_timer0
  1286 ;;		_read_ext_eeprom
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text1
  1293  001CEC                     __ptext1:
  1294                           	opt stack 0
  1295  001CEC                     _init_config:
  1296                           	opt stack 24
  1297                           
  1298                           ;main.c: 60: init_clcd();
  1299                           
  1300                           ;incstack = 0
  1301  001CEC  ECCE  F00F         	call	_init_clcd	;wreg free
  1302                           
  1303                           ;main.c: 61: init_i2c();
  1304  001CF0  ECB8  F010         	call	_init_i2c	;wreg free
  1305                           
  1306                           ;main.c: 62: init_ds1307();
  1307  001CF4  EC2D  F00F         	call	_init_ds1307	;wreg free
  1308                           
  1309                           ;main.c: 63: init_matrix_keypad();
  1310  001CF8  ECC3  F010         	call	_init_matrix_keypad	;wreg free
  1311                           
  1312                           ;main.c: 64: init_adc();
  1313  001CFC  EC7C  F010         	call	_init_adc	;wreg free
  1314                           
  1315                           ;main.c: 67: init_timer0();
  1316  001D00  ECD5  F010         	call	_init_timer0	;wreg free
  1317                           
  1318                           ;main.c: 68: GIE = 1;
  1319  001D04  8EF2               	bsf	intcon,7,c	;volatile
  1320                           
  1321                           ;main.c: 69: PEIE = 1;
  1322  001D06  8CF2               	bsf	intcon,6,c	;volatile
  1323                           
  1324                           ;main.c: 71: clcd_print("TIME     EV  SP", (0x80 + (0)));
  1325  001D08  0E66               	movlw	low STR_1
  1326  001D0A  6E15               	movwf	clcd_print@data,c
  1327  001D0C  0E06               	movlw	high STR_1
  1328  001D0E  6E16               	movwf	clcd_print@data+1,c
  1329  001D10  0E80               	movlw	128
  1330  001D12  6E17               	movwf	clcd_print@addr,c
  1331  001D14  ECA9  F00E         	call	_clcd_print	;wreg free
  1332                           
  1333                           ;main.c: 74: int i;
  1334                           ;main.c: 75: unsigned char add = 0xc8;
  1335  001D18  0EC8               	movlw	200
  1336  001D1A  6E18               	movwf	init_config@add,c
  1337                           
  1338                           ;main.c: 76: for(i = 0; i < 4; i++)
  1339  001D1C  0E00               	movlw	0
  1340  001D1E  6E1A               	movwf	init_config@i+1,c
  1341  001D20  0E00               	movlw	0
  1342  001D22  6E19               	movwf	init_config@i,c
  1343  001D24                     l4413:
  1344  001D24  BE1A               	btfsc	init_config@i+1,7,c
  1345  001D26  D006               	goto	l4417
  1346  001D28  501A               	movf	init_config@i+1,w,c
  1347  001D2A  E112               	bnz	l302
  1348  001D2C  0E04               	movlw	4
  1349  001D2E  5C19               	subwf	init_config@i,w,c
  1350  001D30  B0D8               	btfsc	status,0,c
  1351  001D32  0012               	return	
  1352  001D34                     l4417:
  1353                           
  1354                           ;main.c: 77: {
  1355                           ;main.c: 78: password[i] = read_ext_eeprom(add++);
  1356  001D34  0EB8               	movlw	low _password
  1357  001D36  2419               	addwf	init_config@i,w,c
  1358  001D38  6ED9               	movwf	fsr2l,c
  1359  001D3A  0E00               	movlw	high _password
  1360  001D3C  201A               	addwfc	init_config@i+1,w,c
  1361  001D3E  6EDA               	movwf	fsr2h,c
  1362  001D40  5018               	movf	init_config@add,w,c
  1363  001D42  EC19  F010         	call	_read_ext_eeprom
  1364  001D46  6EDF               	movwf	indf2,c
  1365  001D48  2A18               	incf	init_config@add,f,c
  1366  001D4A  4A19               	infsnz	init_config@i,f,c
  1367  001D4C  2A1A               	incf	init_config@i+1,f,c
  1368  001D4E  D7EA               	goto	l4413
  1369  001D50                     l302:
  1370  001D50  0012               	return		;funcret
  1371  001D52                     __end_of_init_config:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           tblptrh	equ	0xFF7
  1375                           tblptrl	equ	0xFF6
  1376                           tablat	equ	0xFF5
  1377                           intcon	equ	0xFF2
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postdec1	equ	0xFE5
  1381                           fsr1l	equ	0xFE1
  1382                           indf2	equ	0xFDF
  1383                           fsr2h	equ	0xFDA
  1384                           fsr2l	equ	0xFD9
  1385                           status	equ	0xFD8
  1386                           
  1387 ;; *************** function _init_timer0 *****************
  1388 ;; Defined at:
  1389 ;;		line 4 in file "timer0.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, status,2
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1403 ;;      Params:         0       0       0       0       0       0       0
  1404 ;;      Locals:         0       0       0       0       0       0       0
  1405 ;;      Temps:          0       0       0       0       0       0       0
  1406 ;;      Totals:         0       0       0       0       0       0       0
  1407 ;;Total ram usage:        0 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; Hardware stack levels required when called:    1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_init_config
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text2
  1418  0021AA                     __ptext2:
  1419                           	opt stack 0
  1420  0021AA                     _init_timer0:
  1421                           	opt stack 28
  1422                           
  1423                           ;timer0.c: 6: TMR2ON = 1;
  1424                           
  1425                           ;incstack = 0
  1426  0021AA  84CA               	bsf	4042,2,c	;volatile
  1427                           
  1428                           ;timer0.c: 7: PR2 = 250;
  1429  0021AC  0EFA               	movlw	250
  1430  0021AE  6ECB               	movwf	4043,c	;volatile
  1431                           
  1432                           ;timer0.c: 8: TMR2IF = 0;
  1433  0021B0  929E               	bcf	3998,1,c	;volatile
  1434                           
  1435                           ;timer0.c: 9: TMR2IE = 1;
  1436  0021B2  829D               	bsf	3997,1,c	;volatile
  1437  0021B4  0012               	return		;funcret
  1438  0021B6                     __end_of_init_timer0:
  1439                           	opt stack 0
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           intcon	equ	0xFF2
  1445                           postinc0	equ	0xFEE
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1l	equ	0xFE1
  1449                           indf2	equ	0xFDF
  1450                           fsr2h	equ	0xFDA
  1451                           fsr2l	equ	0xFD9
  1452                           status	equ	0xFD8
  1453                           
  1454 ;; *************** function _init_matrix_keypad *****************
  1455 ;; Defined at:
  1456 ;;		line 4 in file "matrix_keypad.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;		None
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1470 ;;      Params:         0       0       0       0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0
  1473 ;;      Totals:         0       0       0       0       0       0       0
  1474 ;;Total ram usage:        0 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    1
  1477 ;; This function calls:
  1478 ;;		Nothing
  1479 ;; This function is called by:
  1480 ;;		_init_config
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text3
  1485  002186                     __ptext3:
  1486                           	opt stack 0
  1487  002186                     _init_matrix_keypad:
  1488                           	opt stack 28
  1489                           
  1490                           ;matrix_keypad.c: 7: ADCON1 = 0x0F;
  1491                           
  1492                           ;incstack = 0
  1493  002186  0E0F               	movlw	15
  1494  002188  6EC1               	movwf	4033,c	;volatile
  1495                           
  1496                           ;matrix_keypad.c: 10: TRISB = 0x1E;
  1497  00218A  0E1E               	movlw	30
  1498  00218C  6E93               	movwf	3987,c	;volatile
  1499                           
  1500                           ;matrix_keypad.c: 13: RBPU = 0;
  1501  00218E  9EF1               	bcf	intcon2,7,c	;volatile
  1502                           
  1503                           ;matrix_keypad.c: 15: PORTB = PORTB | 0xE0;
  1504  002190  5081               	movf	3969,w,c	;volatile
  1505  002192  09E0               	iorlw	224
  1506  002194  6E81               	movwf	3969,c	;volatile
  1507  002196  0012               	return		;funcret
  1508  002198                     __end_of_init_matrix_keypad:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           intcon	equ	0xFF2
  1515                           intcon2	equ	0xFF1
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1l	equ	0xFE1
  1520                           indf2	equ	0xFDF
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function _init_i2c *****************
  1526 ;; Defined at:
  1527 ;;		line 3 in file "i2c.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1541 ;;      Params:         0       0       0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0
  1544 ;;      Totals:         0       0       0       0       0       0       0
  1545 ;;Total ram usage:        0 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    1
  1548 ;; This function calls:
  1549 ;;		Nothing
  1550 ;; This function is called by:
  1551 ;;		_init_config
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text4
  1556  002170                     __ptext4:
  1557                           	opt stack 0
  1558  002170                     _init_i2c:
  1559                           	opt stack 28
  1560                           
  1561                           ;i2c.c: 6: TRISC3 = 1;
  1562                           
  1563                           ;incstack = 0
  1564  002170  8694               	bsf	3988,3,c	;volatile
  1565                           
  1566                           ;i2c.c: 7: TRISC4 = 1;
  1567  002172  8894               	bsf	3988,4,c	;volatile
  1568                           
  1569                           ;i2c.c: 9: SSPCON1 = 0x28;
  1570  002174  0E28               	movlw	40
  1571  002176  6EC6               	movwf	4038,c	;volatile
  1572                           
  1573                           ;i2c.c: 11: SSPADD = 0x31;
  1574  002178  0E31               	movlw	49
  1575  00217A  6EC8               	movwf	4040,c	;volatile
  1576                           
  1577                           ;i2c.c: 13: CKE = 0;
  1578  00217C  9CC7               	bcf	4039,6,c	;volatile
  1579                           
  1580                           ;i2c.c: 15: SMP = 1;
  1581  00217E  8EC7               	bsf	4039,7,c	;volatile
  1582                           
  1583                           ;i2c.c: 17: SSPIF = 0;
  1584  002180  969E               	bcf	3998,3,c	;volatile
  1585                           
  1586                           ;i2c.c: 19: BCLIF = 0;
  1587  002182  96A1               	bcf	4001,3,c	;volatile
  1588  002184  0012               	return		;funcret
  1589  002186                     __end_of_init_i2c:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           intcon	equ	0xFF2
  1596                           intcon2	equ	0xFF1
  1597                           postinc0	equ	0xFEE
  1598                           wreg	equ	0xFE8
  1599                           postdec1	equ	0xFE5
  1600                           fsr1l	equ	0xFE1
  1601                           indf2	equ	0xFDF
  1602                           fsr2h	equ	0xFDA
  1603                           fsr2l	equ	0xFD9
  1604                           status	equ	0xFD8
  1605                           
  1606 ;; *************** function _init_ds1307 *****************
  1607 ;; Defined at:
  1608 ;;		line 12 in file "ds1307.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  dummy           1   17[COMRAM] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1622 ;;      Params:         0       0       0       0       0       0       0
  1623 ;;      Locals:         1       0       0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0
  1625 ;;      Totals:         1       0       0       0       0       0       0
  1626 ;;Total ram usage:        1 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    5
  1629 ;; This function calls:
  1630 ;;		_read_ds1307
  1631 ;;		_write_ds1307
  1632 ;; This function is called by:
  1633 ;;		_init_config
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text5
  1638  001E5A                     __ptext5:
  1639                           	opt stack 0
  1640  001E5A                     _init_ds1307:
  1641                           	opt stack 24
  1642                           
  1643                           ;ds1307.c: 14: unsigned char dummy;
  1644                           ;ds1307.c: 17: dummy = read_ds1307(0x00);
  1645                           
  1646                           ;incstack = 0
  1647  001E5A  0E00               	movlw	0
  1648  001E5C  EC04  F010         	call	_read_ds1307
  1649  001E60  6E12               	movwf	init_ds1307@dummy,c
  1650                           
  1651                           ;ds1307.c: 18: write_ds1307(0x00, dummy | 0x80);
  1652  001E62  5012               	movf	init_ds1307@dummy,w,c
  1653  001E64  0980               	iorlw	128
  1654  001E66  6E10               	movwf	write_ds1307@data,c
  1655  001E68  0E00               	movlw	0
  1656  001E6A  EC9D  F010         	call	_write_ds1307
  1657                           
  1658                           ;ds1307.c: 21: dummy = read_ds1307(0x02);
  1659  001E6E  0E02               	movlw	2
  1660  001E70  EC04  F010         	call	_read_ds1307
  1661  001E74  6E12               	movwf	init_ds1307@dummy,c
  1662                           
  1663                           ;ds1307.c: 22: write_ds1307(0x02, dummy | 0x40);
  1664  001E76  5012               	movf	init_ds1307@dummy,w,c
  1665  001E78  0940               	iorlw	64
  1666  001E7A  6E10               	movwf	write_ds1307@data,c
  1667  001E7C  0E02               	movlw	2
  1668  001E7E  EC9D  F010         	call	_write_ds1307
  1669                           
  1670                           ;ds1307.c: 37: write_ds1307(0x07, 0x93);
  1671  001E82  0E93               	movlw	147
  1672  001E84  6E10               	movwf	write_ds1307@data,c
  1673  001E86  0E07               	movlw	7
  1674  001E88  EC9D  F010         	call	_write_ds1307
  1675                           
  1676                           ;ds1307.c: 40: dummy = read_ds1307(0x00);
  1677  001E8C  0E00               	movlw	0
  1678  001E8E  EC04  F010         	call	_read_ds1307
  1679  001E92  6E12               	movwf	init_ds1307@dummy,c
  1680                           
  1681                           ;ds1307.c: 41: write_ds1307(0x00, dummy & 0x7F);
  1682  001E94  5012               	movf	init_ds1307@dummy,w,c
  1683  001E96  0B7F               	andlw	127
  1684  001E98  6E10               	movwf	write_ds1307@data,c
  1685  001E9A  0E00               	movlw	0
  1686  001E9C  EC9D  F010         	call	_write_ds1307
  1687  001EA0  0012               	return		;funcret
  1688  001EA2                     __end_of_init_ds1307:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           intcon	equ	0xFF2
  1695                           intcon2	equ	0xFF1
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           indf2	equ	0xFDF
  1701                           fsr2h	equ	0xFDA
  1702                           fsr2l	equ	0xFD9
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _write_ds1307 *****************
  1706 ;; Defined at:
  1707 ;;		line 45 in file "ds1307.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  address         1    wreg     unsigned char 
  1710 ;;  data            1   15[COMRAM] unsigned char 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  address         1   16[COMRAM] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1722 ;;      Params:         1       0       0       0       0       0       0
  1723 ;;      Locals:         1       0       0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0       0       0
  1725 ;;      Totals:         2       0       0       0       0       0       0
  1726 ;;Total ram usage:        2 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    3
  1729 ;; This function calls:
  1730 ;;		_i2c_start
  1731 ;;		_i2c_stop
  1732 ;;		_i2c_write
  1733 ;; This function is called by:
  1734 ;;		_init_ds1307
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text6
  1739  00213A                     __ptext6:
  1740                           	opt stack 0
  1741  00213A                     _write_ds1307:
  1742                           	opt stack 25
  1743                           
  1744                           ;incstack = 0
  1745                           ;write_ds1307@address stored from wreg
  1746  00213A  6E11               	movwf	write_ds1307@address,c
  1747                           
  1748                           ;ds1307.c: 47: i2c_start();
  1749  00213C  ECEB  F010         	call	_i2c_start	;wreg free
  1750                           
  1751                           ;ds1307.c: 48: i2c_write(0xD0);
  1752  002140  0ED0               	movlw	208
  1753  002142  ECDB  F010         	call	_i2c_write
  1754                           
  1755                           ;ds1307.c: 49: i2c_write(address);
  1756  002146  5011               	movf	write_ds1307@address,w,c
  1757  002148  ECDB  F010         	call	_i2c_write
  1758                           
  1759                           ;ds1307.c: 50: i2c_write(data);
  1760  00214C  5010               	movf	write_ds1307@data,w,c
  1761  00214E  ECDB  F010         	call	_i2c_write
  1762                           
  1763                           ;ds1307.c: 51: i2c_stop();
  1764  002152  ECE7  F010         	call	_i2c_stop	;wreg free
  1765  002156  0012               	return		;funcret
  1766  002158                     __end_of_write_ds1307:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           intcon	equ	0xFF2
  1773                           intcon2	equ	0xFF1
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           postdec1	equ	0xFE5
  1777                           fsr1l	equ	0xFE1
  1778                           indf2	equ	0xFDF
  1779                           fsr2h	equ	0xFDA
  1780                           fsr2l	equ	0xFD9
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _init_clcd *****************
  1784 ;; Defined at:
  1785 ;;		line 27 in file "clcd.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1799 ;;      Params:         0       0       0       0       0       0       0
  1800 ;;      Locals:         0       0       0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0
  1802 ;;      Totals:         0       0       0       0       0       0       0
  1803 ;;Total ram usage:        0 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    2
  1806 ;; This function calls:
  1807 ;;		_clcd_write
  1808 ;; This function is called by:
  1809 ;;		_init_config
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text7
  1814  001F9C                     __ptext7:
  1815                           	opt stack 0
  1816  001F9C                     _init_clcd:
  1817                           	opt stack 27
  1818                           
  1819                           ;clcd.c: 30: TRISD = 0x00;
  1820                           
  1821                           ;incstack = 0
  1822  001F9C  0E00               	movlw	0
  1823  001F9E  6E95               	movwf	3989,c	;volatile
  1824                           
  1825                           ;clcd.c: 32: TRISC = TRISC & 0xF8;
  1826  001FA0  5094               	movf	3988,w,c	;volatile
  1827  001FA2  0BF8               	andlw	248
  1828  001FA4  6E94               	movwf	3988,c	;volatile
  1829                           
  1830                           ;clcd.c: 34: RC0 = 0;
  1831  001FA6  9082               	bcf	3970,0,c	;volatile
  1832                           
  1833                           ;clcd.c: 36: clcd_write(0x02, 0);
  1834  001FA8  0E00               	movlw	0
  1835  001FAA  6E0F               	movwf	clcd_write@control_bit,c
  1836  001FAC  0E02               	movlw	2
  1837  001FAE  EC43  F010         	call	_clcd_write
  1838                           
  1839                           ;clcd.c: 37: clcd_write(0x38, 0);
  1840  001FB2  0E00               	movlw	0
  1841  001FB4  6E0F               	movwf	clcd_write@control_bit,c
  1842  001FB6  0E38               	movlw	56
  1843  001FB8  EC43  F010         	call	_clcd_write
  1844                           
  1845                           ;clcd.c: 38: clcd_write(0x0C, 0);
  1846  001FBC  0E00               	movlw	0
  1847  001FBE  6E0F               	movwf	clcd_write@control_bit,c
  1848  001FC0  0E0C               	movlw	12
  1849  001FC2  EC43  F010         	call	_clcd_write
  1850                           
  1851                           ;clcd.c: 39: clcd_write(0x01, 0);
  1852  001FC6  0E00               	movlw	0
  1853  001FC8  6E0F               	movwf	clcd_write@control_bit,c
  1854  001FCA  0E01               	movlw	1
  1855  001FCC  EC43  F010         	call	_clcd_write
  1856  001FD0  0012               	return		;funcret
  1857  001FD2                     __end_of_init_clcd:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           intcon	equ	0xFF2
  1864                           intcon2	equ	0xFF1
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1l	equ	0xFE1
  1869                           indf2	equ	0xFDF
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _init_adc *****************
  1875 ;; Defined at:
  1876 ;;		line 4 in file "adc.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0
  1893 ;;      Totals:         0       0       0       0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    1
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_init_config
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text8
  1905  0020F8                     __ptext8:
  1906                           	opt stack 0
  1907  0020F8                     _init_adc:
  1908                           	opt stack 28
  1909                           
  1910                           ;adc.c: 7: ADFM = 1;
  1911                           
  1912                           ;incstack = 0
  1913  0020F8  8EC0               	bsf	4032,7,c	;volatile
  1914                           
  1915                           ;adc.c: 13: ACQT2 = 1;
  1916  0020FA  8AC0               	bsf	4032,5,c	;volatile
  1917                           
  1918                           ;adc.c: 14: ACQT1 = 0;
  1919  0020FC  98C0               	bcf	4032,4,c	;volatile
  1920                           
  1921                           ;adc.c: 15: ACQT0 = 0;
  1922  0020FE  96C0               	bcf	4032,3,c	;volatile
  1923                           
  1924                           ;adc.c: 21: ADCS0 = 0;
  1925  002100  90C0               	bcf	4032,0,c	;volatile
  1926                           
  1927                           ;adc.c: 22: ADCS1 = 1;
  1928  002102  82C0               	bsf	4032,1,c	;volatile
  1929                           
  1930                           ;adc.c: 23: ADCS2 = 0;
  1931  002104  94C0               	bcf	4032,2,c	;volatile
  1932                           
  1933                           ;adc.c: 26: GODONE = 0;
  1934  002106  92C2               	bcf	4034,1,c	;volatile
  1935                           
  1936                           ;adc.c: 29: CHS2 = 1;
  1937  002108  88C2               	bsf	4034,4,c	;volatile
  1938                           
  1939                           ;adc.c: 32: VCFG1 = 0;
  1940  00210A  9AC1               	bcf	4033,5,c	;volatile
  1941                           
  1942                           ;adc.c: 34: VCFG0 = 0;
  1943  00210C  98C1               	bcf	4033,4,c	;volatile
  1944                           
  1945                           ;adc.c: 37: ADRESH = 0;
  1946  00210E  0E00               	movlw	0
  1947  002110  6EC4               	movwf	4036,c	;volatile
  1948                           
  1949                           ;adc.c: 38: ADRESL = 0;
  1950  002112  0E00               	movlw	0
  1951  002114  6EC3               	movwf	4035,c	;volatile
  1952                           
  1953                           ;adc.c: 41: ADON = 1;
  1954  002116  80C2               	bsf	4034,0,c	;volatile
  1955  002118  0012               	return		;funcret
  1956  00211A                     __end_of_init_adc:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           intcon	equ	0xFF2
  1963                           intcon2	equ	0xFF1
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           indf2	equ	0xFDF
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function _give_password *****************
  1974 ;; Defined at:
  1975 ;;		line 183 in file "main.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  key             1    wreg     unsigned char 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;  key             1   30[COMRAM] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1989 ;;      Params:         0       0       0       0       0       0       0
  1990 ;;      Locals:         1       0       0       0       0       0       0
  1991 ;;      Temps:          2       0       0       0       0       0       0
  1992 ;;      Totals:         3       0       0       0       0       0       0
  1993 ;;Total ram usage:        3 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    3
  1996 ;; This function calls:
  1997 ;;		___lwdiv
  1998 ;;		___lwmod
  1999 ;;		_clcd_print
  2000 ;;		_clcd_putch
  2001 ;;		_clcd_write
  2002 ;;		_read_switches
  2003 ;; This function is called by:
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text9
  2009  000C32                     __ptext9:
  2010                           	opt stack 0
  2011  000C32                     _give_password:
  2012                           	opt stack 27
  2013                           
  2014                           ;main.c: 185: static char attempt[4];
  2015                           ;main.c: 186: static unsigned long delay;
  2016                           ;main.c: 187: static unsigned int j;
  2017                           ;main.c: 188: static unsigned int k;
  2018                           ;main.c: 189: static unsigned int failure_flag;
  2019                           ;main.c: 190: static unsigned int password_flag;
  2020                           ;main.c: 191: static unsigned int timer_flag;
  2021                           ;main.c: 192: static unsigned int no_attempts = 3;
  2022                           ;main.c: 193: static unsigned int i;
  2023                           ;main.c: 194: static unsigned int key_8_flag;
  2024                           ;main.c: 195: static unsigned int enter_pwd;
  2025                           ;main.c: 197: key = read_switches(1);
  2026                           
  2027                           ;incstack = 0
  2028  000C32  0E01               	movlw	1
  2029  000C34  EC72  F00F         	call	_read_switches
  2030  000C38  6E1F               	movwf	give_password@key,c
  2031                           
  2032                           ;main.c: 198: if(key == 8 && password_flag == 0)
  2033  000C3A  0E08               	movlw	8
  2034  000C3C  181F               	xorwf	give_password@key,w,c
  2035  000C3E  A4D8               	btfss	status,2,c
  2036  000C40  D015               	goto	l4503
  2037  000C42  0100               	movlb	0	; () banked
  2038  000C44  51A1               	movf	give_password@password_flag& (0+255),w,b
  2039  000C46  0100               	movlb	0	; () banked
  2040  000C48  11A2               	iorwf	(give_password@password_flag+1)& (0+255),w,b
  2041  000C4A  A4D8               	btfss	status,2,c
  2042  000C4C  D00F               	goto	l4503
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;main.c: 199: {
  2046                           ;main.c: 200: clcd_write(0x01, 0);
  2047  000C4E  0E00               	movlw	0
  2048  000C50  6E0F               	movwf	clcd_write@control_bit,c
  2049  000C52  0E01               	movlw	1
  2050  000C54  EC43  F010         	call	_clcd_write
  2051                           
  2052                           ;main.c: 201: password_flag = 1;
  2053  000C58  0E00               	movlw	0
  2054  000C5A  0100               	movlb	0	; () banked
  2055  000C5C  6FA2               	movwf	(give_password@password_flag+1)& (0+255),b
  2056  000C5E  0E01               	movlw	1
  2057  000C60  6FA1               	movwf	give_password@password_flag& (0+255),b
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 202: key_8_flag = 1;
  2061  000C62  0E00               	movlw	0
  2062  000C64  0100               	movlb	0	; () banked
  2063  000C66  6FA0               	movwf	(give_password@key_8_flag+1)& (0+255),b
  2064  000C68  0E01               	movlw	1
  2065  000C6A  6F9F               	movwf	give_password@key_8_flag& (0+255),b
  2066  000C6C                     l4503:
  2067                           
  2068                           ;main.c: 203: }
  2069                           ;main.c: 205: if(password_flag == 1)
  2070  000C6C  0100               	movlb	0	; () banked
  2071  000C6E  05A1               	decf	give_password@password_flag& (0+255),w,b
  2072  000C70  0100               	movlb	0	; () banked
  2073  000C72  11A2               	iorwf	(give_password@password_flag+1)& (0+255),w,b
  2074  000C74  A4D8               	btfss	status,2,c
  2075  000C76  0012               	return	
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 206: {
  2079                           ;main.c: 207: if(enter_pwd == 0)
  2080  000C78  0100               	movlb	0	; () banked
  2081  000C7A  5199               	movf	give_password@enter_pwd& (0+255),w,b
  2082  000C7C  0100               	movlb	0	; () banked
  2083  000C7E  119A               	iorwf	(give_password@enter_pwd+1)& (0+255),w,b
  2084  000C80  A4D8               	btfss	status,2,c
  2085  000C82  D008               	goto	l4509
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;main.c: 208: {
  2089                           ;main.c: 209: clcd_print(" Enter Password",(0x80 + (0)));
  2090  000C84  0E76               	movlw	low STR_4
  2091  000C86  6E15               	movwf	clcd_print@data,c
  2092  000C88  0E06               	movlw	high STR_4
  2093  000C8A  6E16               	movwf	clcd_print@data+1,c
  2094  000C8C  0E80               	movlw	128
  2095  000C8E  6E17               	movwf	clcd_print@addr,c
  2096  000C90  ECA9  F00E         	call	_clcd_print	;wreg free
  2097  000C94                     l4509:
  2098                           
  2099                           ;main.c: 210: }
  2100                           ;main.c: 211: if(i < 4)
  2101  000C94  0100               	movlb	0	; () banked
  2102  000C96  519E               	movf	(give_password@i+1)& (0+255),w,b
  2103  000C98  E122               	bnz	l4519
  2104  000C9A  0E04               	movlw	4
  2105  000C9C  0100               	movlb	0	; () banked
  2106  000C9E  5D9D               	subwf	give_password@i& (0+255),w,b
  2107  000CA0  B0D8               	btfsc	status,0,c
  2108  000CA2  D01D               	goto	l4519
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;main.c: 212: {
  2112                           ;main.c: 213: if(blink == 60)
  2113  000CA4  0E3C               	movlw	60
  2114  000CA6  182F               	xorwf	_blink,w,c
  2115  000CA8  1030               	iorwf	_blink+1,w,c
  2116  000CAA  A4D8               	btfss	status,2,c
  2117  000CAC  D005               	goto	l380
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;main.c: 214: blink = 0;
  2121  000CAE  0E00               	movlw	0
  2122  000CB0  6E30               	movwf	_blink+1,c
  2123  000CB2  0E00               	movlw	0
  2124  000CB4  6E2F               	movwf	_blink,c
  2125  000CB6  D013               	goto	l4519
  2126  000CB8                     l380:
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;main.c: 215: else if(blink % 2 == 0)
  2130  000CB8  B02F               	btfsc	_blink,0,c
  2131  000CBA  D008               	goto	l382
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;main.c: 216: {
  2135                           ;main.c: 217: clcd_putch('_', (0xC0 + (i+6)));
  2136  000CBC  0100               	movlb	0	; () banked
  2137  000CBE  519D               	movf	give_password@i& (0+255),w,b
  2138  000CC0  0FC6               	addlw	198
  2139  000CC2  6E1B               	movwf	clcd_putch@addr,c
  2140  000CC4  0E5F               	movlw	95
  2141  000CC6  ECAC  F010         	call	_clcd_putch
  2142                           
  2143                           ;main.c: 218: }
  2144  000CCA  D009               	goto	l4519
  2145  000CCC                     l382:
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;main.c: 219: else if(blink % 2 == 1)
  2149  000CCC  A02F               	btfss	_blink,0,c
  2150  000CCE  D007               	goto	l4519
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 220: {
  2154                           ;main.c: 221: clcd_putch(" ", (0xC0 + (i+6)));
  2155  000CD0  0100               	movlb	0	; () banked
  2156  000CD2  519D               	movf	give_password@i& (0+255),w,b
  2157  000CD4  0FC6               	addlw	198
  2158  000CD6  6E1B               	movwf	clcd_putch@addr,c
  2159  000CD8  0E10               	movlw	(STR_8+15)& (0+255)
  2160  000CDA  ECAC  F010         	call	_clcd_putch
  2161  000CDE                     l4519:
  2162                           
  2163                           ;main.c: 222: }
  2164                           ;main.c: 223: }
  2165                           ;main.c: 224: if(j < 4)
  2166  000CDE  503E               	movf	give_password@j+1,w,c
  2167  000CE0  E142               	bnz	l4549
  2168  000CE2  0E04               	movlw	4
  2169  000CE4  5C3D               	subwf	give_password@j,w,c
  2170  000CE6  B0D8               	btfsc	status,0,c
  2171  000CE8  D03E               	goto	l4549
  2172                           
  2173                           ;main.c: 225: {
  2174                           ;main.c: 226: failure_flag = 0;
  2175  000CEA  0E00               	movlw	0
  2176  000CEC  0100               	movlb	0	; () banked
  2177  000CEE  6F9C               	movwf	(give_password@failure_flag+1)& (0+255),b
  2178  000CF0  0E00               	movlw	0
  2179  000CF2  6F9B               	movwf	give_password@failure_flag& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;main.c: 227: if(key == 8 || key == 9 && key_8_flag == 0)
  2183  000CF4  0E08               	movlw	8
  2184  000CF6  181F               	xorwf	give_password@key,w,c
  2185  000CF8  B4D8               	btfsc	status,2,c
  2186  000CFA  D00A               	goto	l4529
  2187                           
  2188                           ; BSR set to: 0
  2189  000CFC  0E09               	movlw	9
  2190  000CFE  181F               	xorwf	give_password@key,w,c
  2191  000D00  A4D8               	btfss	status,2,c
  2192  000D02  D031               	goto	l4549
  2193                           
  2194                           ; BSR set to: 0
  2195  000D04  0100               	movlb	0	; () banked
  2196  000D06  519F               	movf	give_password@key_8_flag& (0+255),w,b
  2197  000D08  0100               	movlb	0	; () banked
  2198  000D0A  11A0               	iorwf	(give_password@key_8_flag+1)& (0+255),w,b
  2199  000D0C  A4D8               	btfss	status,2,c
  2200  000D0E  D02B               	goto	l4549
  2201  000D10                     l4529:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;main.c: 228: {
  2205                           ;main.c: 229: if(key == 8)
  2206  000D10  0E08               	movlw	8
  2207  000D12  181F               	xorwf	give_password@key,w,c
  2208  000D14  A4D8               	btfss	status,2,c
  2209  000D16  D002               	goto	l4533
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;main.c: 230: key = 0;
  2213  000D18  0E00               	movlw	0
  2214  000D1A  6E1F               	movwf	give_password@key,c
  2215  000D1C                     l4533:
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;main.c: 231: if(key == 9)
  2219  000D1C  0E09               	movlw	9
  2220  000D1E  181F               	xorwf	give_password@key,w,c
  2221  000D20  A4D8               	btfss	status,2,c
  2222  000D22  D002               	goto	l4537
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;main.c: 232: key = 1;
  2226  000D24  0E01               	movlw	1
  2227  000D26  6E1F               	movwf	give_password@key,c
  2228  000D28                     l4537:
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;main.c: 233: if(key_8_flag == 0)
  2232  000D28  0100               	movlb	0	; () banked
  2233  000D2A  519F               	movf	give_password@key_8_flag& (0+255),w,b
  2234  000D2C  0100               	movlb	0	; () banked
  2235  000D2E  11A0               	iorwf	(give_password@key_8_flag+1)& (0+255),w,b
  2236  000D30  A4D8               	btfss	status,2,c
  2237  000D32  D014               	goto	l4547
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;main.c: 234: {
  2241                           ;main.c: 235: attempt[j] = key + 48;
  2242  000D34  0E76               	movlw	low give_password@attempt
  2243  000D36  243D               	addwf	give_password@j,w,c
  2244  000D38  6ED9               	movwf	fsr2l,c
  2245  000D3A  0E00               	movlw	high give_password@attempt
  2246  000D3C  203E               	addwfc	give_password@j+1,w,c
  2247  000D3E  6EDA               	movwf	fsr2h,c
  2248  000D40  501F               	movf	give_password@key,w,c
  2249  000D42  0F30               	addlw	48
  2250  000D44  6EDF               	movwf	indf2,c
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;main.c: 236: clcd_putch('*', (0xC0 + (j++ + 6)));
  2254  000D46  503D               	movf	give_password@j,w,c
  2255  000D48  0FC6               	addlw	198
  2256  000D4A  6E1B               	movwf	clcd_putch@addr,c
  2257  000D4C  0E2A               	movlw	42
  2258  000D4E  ECAC  F010         	call	_clcd_putch
  2259  000D52  4A3D               	infsnz	give_password@j,f,c
  2260  000D54  2A3E               	incf	give_password@j+1,f,c
  2261                           
  2262                           ;main.c: 237: i++;
  2263  000D56  0100               	movlb	0	; () banked
  2264  000D58  4B9D               	infsnz	give_password@i& (0+255),f,b
  2265  000D5A  2B9E               	incf	(give_password@i+1)& (0+255),f,b
  2266  000D5C                     l4547:
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 238: }
  2270                           ;main.c: 239: key_8_flag = 0;
  2271  000D5C  0E00               	movlw	0
  2272  000D5E  0100               	movlb	0	; () banked
  2273  000D60  6FA0               	movwf	(give_password@key_8_flag+1)& (0+255),b
  2274  000D62  0E00               	movlw	0
  2275  000D64  6F9F               	movwf	give_password@key_8_flag& (0+255),b
  2276  000D66                     l4549:
  2277                           
  2278                           ;main.c: 240: }
  2279                           ;main.c: 241: }
  2280                           ;main.c: 242: if(j == 4)
  2281  000D66  0E04               	movlw	4
  2282  000D68  183D               	xorwf	give_password@j,w,c
  2283  000D6A  103E               	iorwf	give_password@j+1,w,c
  2284  000D6C  A4D8               	btfss	status,2,c
  2285  000D6E  0012               	return	
  2286                           
  2287                           ;main.c: 243: {
  2288                           ;main.c: 244: if(no_attempts > 1)
  2289  000D70  0100               	movlb	0	; () banked
  2290  000D72  51BE               	movf	(give_password@no_attempts+1)& (0+255),w,b
  2291  000D74  E105               	bnz	u5020
  2292  000D76  0E02               	movlw	2
  2293  000D78  0100               	movlb	0	; () banked
  2294  000D7A  5DBD               	subwf	give_password@no_attempts& (0+255),w,b
  2295  000D7C  A0D8               	btfss	status,0,c
  2296  000D7E  D0C2               	goto	l4607
  2297  000D80                     u5020:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 245: {
  2301                           ;main.c: 246: no_attempts--;
  2302  000D80  0100               	movlb	0	; () banked
  2303  000D82  07BD               	decf	give_password@no_attempts& (0+255),f,b
  2304  000D84  A0D8               	btfss	status,0,c
  2305  000D86  07BE               	decf	(give_password@no_attempts+1)& (0+255),f,b
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 247: for(k = 0; k < 4; k++)
  2309  000D88  0E00               	movlw	0
  2310  000D8A  6E40               	movwf	give_password@k+1,c
  2311  000D8C  0E00               	movlw	0
  2312  000D8E  6E3F               	movwf	give_password@k,c
  2313  000D90                     l4557:
  2314                           
  2315                           ; BSR set to: 0
  2316  000D90  5040               	movf	give_password@k+1,w,c
  2317  000D92  E163               	bnz	l4587
  2318  000D94  0E04               	movlw	4
  2319  000D96  5C3F               	subwf	give_password@k,w,c
  2320  000D98  B0D8               	btfsc	status,0,c
  2321  000D9A  D05F               	goto	l4587
  2322                           
  2323                           ;main.c: 248: {
  2324                           ;main.c: 249: if(attempt[k] != password[k])
  2325                           
  2326                           ; BSR set to: 0
  2327                           
  2328                           ; BSR set to: 0
  2329  000D9C  0EB8               	movlw	low _password
  2330  000D9E  243F               	addwf	give_password@k,w,c
  2331  000DA0  6ED9               	movwf	fsr2l,c
  2332  000DA2  0E00               	movlw	high _password
  2333  000DA4  2040               	addwfc	give_password@k+1,w,c
  2334  000DA6  6EDA               	movwf	fsr2h,c
  2335  000DA8  0E76               	movlw	low give_password@attempt
  2336  000DAA  243F               	addwf	give_password@k,w,c
  2337  000DAC  6EE1               	movwf	fsr1l,c
  2338  000DAE  0E00               	movlw	high give_password@attempt
  2339  000DB0  2040               	addwfc	give_password@k+1,w,c
  2340  000DB2  6EE2               	movwf	fsr1h,c
  2341  000DB4  50DE               	movf	postinc2,w,c
  2342  000DB6  18E6               	xorwf	postinc1,w,c
  2343  000DB8  B4D8               	btfsc	status,2,c
  2344  000DBA  D04C               	goto	l4583
  2345                           
  2346                           ;main.c: 250: {
  2347                           ;main.c: 251: clcd_write(0x01, 0);
  2348  000DBC  0E00               	movlw	0
  2349  000DBE  6E0F               	movwf	clcd_write@control_bit,c
  2350  000DC0  0E01               	movlw	1
  2351  000DC2  EC43  F010         	call	_clcd_write
  2352                           
  2353                           ;main.c: 252: clcd_print("Try Again",(0x80 + (0)));
  2354  000DC6  0E94               	movlw	low STR_6
  2355  000DC8  6E15               	movwf	clcd_print@data,c
  2356  000DCA  0E06               	movlw	high STR_6
  2357  000DCC  6E16               	movwf	clcd_print@data+1,c
  2358  000DCE  0E80               	movlw	128
  2359  000DD0  6E17               	movwf	clcd_print@addr,c
  2360  000DD2  ECA9  F00E         	call	_clcd_print	;wreg free
  2361                           
  2362                           ;main.c: 253: clcd_putch(no_attempts + '0',(0xC0 + (0)));
  2363  000DD6  0EC0               	movlw	192
  2364  000DD8  6E1B               	movwf	clcd_putch@addr,c
  2365  000DDA  0100               	movlb	0	; () banked
  2366  000DDC  51BD               	movf	give_password@no_attempts& (0+255),w,b
  2367  000DDE  0F30               	addlw	48
  2368  000DE0  ECAC  F010         	call	_clcd_putch
  2369                           
  2370                           ;main.c: 254: clcd_print("Attempts", (0xC0 + (2)));
  2371  000DE4  0E9E               	movlw	low STR_7
  2372  000DE6  6E15               	movwf	clcd_print@data,c
  2373  000DE8  0E06               	movlw	high STR_7
  2374  000DEA  6E16               	movwf	clcd_print@data+1,c
  2375  000DEC  0EC2               	movlw	194
  2376  000DEE  6E17               	movwf	clcd_print@addr,c
  2377  000DF0  ECA9  F00E         	call	_clcd_print	;wreg free
  2378                           
  2379                           ;main.c: 255: for(delay = 50000; delay--;);
  2380  000DF4  0E50               	movlw	80
  2381  000DF6  0100               	movlb	0	; () banked
  2382  000DF8  6F7A               	movwf	give_password@delay& (0+255),b
  2383  000DFA  0EC3               	movlw	195
  2384  000DFC  6F7B               	movwf	(give_password@delay+1)& (0+255),b
  2385  000DFE  0E00               	movlw	0
  2386  000E00  6F7C               	movwf	(give_password@delay+2)& (0+255),b
  2387  000E02  0E00               	movlw	0
  2388  000E04  6F7D               	movwf	(give_password@delay+3)& (0+255),b
  2389  000E06                     l4573:
  2390                           
  2391                           ; BSR set to: 0
  2392  000E06  0100               	movlb	0	; () banked
  2393  000E08  077A               	decf	give_password@delay& (0+255),f,b
  2394  000E0A  0E00               	movlw	0
  2395  000E0C  5B7B               	subwfb	(give_password@delay+1)& (0+255),f,b
  2396  000E0E  5B7C               	subwfb	(give_password@delay+2)& (0+255),f,b
  2397  000E10  5B7D               	subwfb	(give_password@delay+3)& (0+255),f,b
  2398  000E12  0100               	movlb	0	; () banked
  2399  000E14  297A               	incf	give_password@delay& (0+255),w,b
  2400  000E16  E1F7               	bnz	l4573
  2401  000E18  0100               	movlb	0	; () banked
  2402  000E1A  297B               	incf	(give_password@delay+1)& (0+255),w,b
  2403  000E1C  E1F4               	bnz	l4573
  2404  000E1E  0100               	movlb	0	; () banked
  2405  000E20  297C               	incf	(give_password@delay+2)& (0+255),w,b
  2406  000E22  E1F1               	bnz	l4573
  2407  000E24  0100               	movlb	0	; () banked
  2408  000E26  297D               	incf	(give_password@delay+3)& (0+255),w,b
  2409  000E28  A4D8               	btfss	status,2,c
  2410  000E2A  D7ED               	goto	l4573
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 256: clcd_write(0x01, 0);
  2414                           
  2415                           ; BSR set to: 0
  2416  000E2C  0E00               	movlw	0
  2417  000E2E  6E0F               	movwf	clcd_write@control_bit,c
  2418  000E30  0E01               	movlw	1
  2419  000E32  EC43  F010         	call	_clcd_write
  2420                           
  2421                           ;main.c: 257: failure_flag = 1;
  2422  000E36  0E00               	movlw	0
  2423  000E38  0100               	movlb	0	; () banked
  2424  000E3A  6F9C               	movwf	(give_password@failure_flag+1)& (0+255),b
  2425  000E3C  0E01               	movlw	1
  2426  000E3E  6F9B               	movwf	give_password@failure_flag& (0+255),b
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;main.c: 258: i = 0;
  2430  000E40  0E00               	movlw	0
  2431  000E42  0100               	movlb	0	; () banked
  2432  000E44  6F9E               	movwf	(give_password@i+1)& (0+255),b
  2433  000E46  0E00               	movlw	0
  2434  000E48  6F9D               	movwf	give_password@i& (0+255),b
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 259: j = 0;
  2438  000E4A  0E00               	movlw	0
  2439  000E4C  6E3E               	movwf	give_password@j+1,c
  2440  000E4E  0E00               	movlw	0
  2441  000E50  6E3D               	movwf	give_password@j,c
  2442                           
  2443                           ;main.c: 260: break;
  2444  000E52  D003               	goto	l4587
  2445  000E54                     l4583:
  2446  000E54  4A3F               	infsnz	give_password@k,f,c
  2447  000E56  2A40               	incf	give_password@k+1,f,c
  2448  000E58  D79B               	goto	l4557
  2449  000E5A                     l4587:
  2450                           
  2451                           ;main.c: 261: }
  2452                           ;main.c: 262: }
  2453                           ;main.c: 263: if(failure_flag == 0)
  2454  000E5A  0100               	movlb	0	; () banked
  2455  000E5C  519B               	movf	give_password@failure_flag& (0+255),w,b
  2456  000E5E  0100               	movlb	0	; () banked
  2457  000E60  119C               	iorwf	(give_password@failure_flag+1)& (0+255),w,b
  2458  000E62  A4D8               	btfss	status,2,c
  2459  000E64  0012               	return	
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main.c: 264: {
  2463                           ;main.c: 265: no_attempts = 3;
  2464  000E66  0E00               	movlw	0
  2465  000E68  0100               	movlb	0	; () banked
  2466  000E6A  6FBE               	movwf	(give_password@no_attempts+1)& (0+255),b
  2467  000E6C  0E03               	movlw	3
  2468  000E6E  6FBD               	movwf	give_password@no_attempts& (0+255),b
  2469                           
  2470                           ;main.c: 266: k = 0;
  2471  000E70  0E00               	movlw	0
  2472  000E72  6E40               	movwf	give_password@k+1,c
  2473  000E74  0E00               	movlw	0
  2474  000E76  6E3F               	movwf	give_password@k,c
  2475                           
  2476                           ;main.c: 267: i = 0;
  2477  000E78  0E00               	movlw	0
  2478  000E7A  0100               	movlb	0	; () banked
  2479  000E7C  6F9E               	movwf	(give_password@i+1)& (0+255),b
  2480  000E7E  0E00               	movlw	0
  2481  000E80  6F9D               	movwf	give_password@i& (0+255),b
  2482                           
  2483                           ;main.c: 268: j = 0;
  2484  000E82  0E00               	movlw	0
  2485  000E84  6E3E               	movwf	give_password@j+1,c
  2486  000E86  0E00               	movlw	0
  2487  000E88  6E3D               	movwf	give_password@j,c
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;main.c: 269: clcd_write(0x01, 0);
  2491  000E8A  0E00               	movlw	0
  2492  000E8C  6E0F               	movwf	clcd_write@control_bit,c
  2493  000E8E  0E01               	movlw	1
  2494  000E90  EC43  F010         	call	_clcd_write
  2495                           
  2496                           ;main.c: 270: clcd_print("   SUCCESSFUL   ",(0xC0 + (0)));
  2497  000E94  0E01               	movlw	low STR_8
  2498  000E96  6E15               	movwf	clcd_print@data,c
  2499  000E98  0E06               	movlw	high STR_8
  2500  000E9A  6E16               	movwf	clcd_print@data+1,c
  2501  000E9C  0EC0               	movlw	192
  2502  000E9E  6E17               	movwf	clcd_print@addr,c
  2503  000EA0  ECA9  F00E         	call	_clcd_print	;wreg free
  2504                           
  2505                           ;main.c: 271: menu_flag = 2;
  2506  000EA4  0E00               	movlw	0
  2507  000EA6  6E34               	movwf	_menu_flag+1,c
  2508  000EA8  0E02               	movlw	2
  2509  000EAA  6E33               	movwf	_menu_flag,c
  2510                           
  2511                           ;main.c: 272: for(delay = 50000; delay--;);
  2512  000EAC  0E50               	movlw	80
  2513  000EAE  0100               	movlb	0	; () banked
  2514  000EB0  6F7A               	movwf	give_password@delay& (0+255),b
  2515  000EB2  0EC3               	movlw	195
  2516  000EB4  6F7B               	movwf	(give_password@delay+1)& (0+255),b
  2517  000EB6  0E00               	movlw	0
  2518  000EB8  6F7C               	movwf	(give_password@delay+2)& (0+255),b
  2519  000EBA  0E00               	movlw	0
  2520  000EBC  6F7D               	movwf	(give_password@delay+3)& (0+255),b
  2521  000EBE                     l4599:
  2522                           
  2523                           ; BSR set to: 0
  2524  000EBE  0100               	movlb	0	; () banked
  2525  000EC0  077A               	decf	give_password@delay& (0+255),f,b
  2526  000EC2  0E00               	movlw	0
  2527  000EC4  5B7B               	subwfb	(give_password@delay+1)& (0+255),f,b
  2528  000EC6  5B7C               	subwfb	(give_password@delay+2)& (0+255),f,b
  2529  000EC8  5B7D               	subwfb	(give_password@delay+3)& (0+255),f,b
  2530  000ECA  0100               	movlb	0	; () banked
  2531  000ECC  297A               	incf	give_password@delay& (0+255),w,b
  2532  000ECE  E1F7               	bnz	l4599
  2533  000ED0  0100               	movlb	0	; () banked
  2534  000ED2  297B               	incf	(give_password@delay+1)& (0+255),w,b
  2535  000ED4  E1F4               	bnz	l4599
  2536  000ED6  0100               	movlb	0	; () banked
  2537  000ED8  297C               	incf	(give_password@delay+2)& (0+255),w,b
  2538  000EDA  E1F1               	bnz	l4599
  2539  000EDC  0100               	movlb	0	; () banked
  2540  000EDE  297D               	incf	(give_password@delay+3)& (0+255),w,b
  2541  000EE0  A4D8               	btfss	status,2,c
  2542  000EE2  D7ED               	goto	l4599
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 273: clcd_write(0x01, 0);
  2546                           
  2547                           ; BSR set to: 0
  2548  000EE4  0E00               	movlw	0
  2549  000EE6  6E0F               	movwf	clcd_write@control_bit,c
  2550  000EE8  0E01               	movlw	1
  2551  000EEA  EC43  F010         	call	_clcd_write
  2552                           
  2553                           ;main.c: 274: password_flag = 0;
  2554  000EEE  0E00               	movlw	0
  2555  000EF0  0100               	movlb	0	; () banked
  2556  000EF2  6FA2               	movwf	(give_password@password_flag+1)& (0+255),b
  2557  000EF4  0E00               	movlw	0
  2558  000EF6  6FA1               	movwf	give_password@password_flag& (0+255),b
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 275: log_flag = 1;
  2562  000EF8  0E00               	movlw	0
  2563  000EFA  0100               	movlb	0	; () banked
  2564  000EFC  6F8A               	movwf	(_log_flag+1)& (0+255),b
  2565  000EFE  0E01               	movlw	1
  2566  000F00  6F89               	movwf	_log_flag& (0+255),b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 276: }
  2570                           ;main.c: 277: }
  2571  000F02  0012               	return	
  2572  000F04                     l4607:
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;main.c: 278: else if(no_attempts <= 1)
  2576  000F04  0100               	movlb	0	; () banked
  2577  000F06  51BE               	movf	(give_password@no_attempts+1)& (0+255),w,b
  2578  000F08  E170               	bnz	l408
  2579  000F0A  0E02               	movlw	2
  2580  000F0C  0100               	movlb	0	; () banked
  2581  000F0E  5DBD               	subwf	give_password@no_attempts& (0+255),w,b
  2582  000F10  B0D8               	btfsc	status,0,c
  2583  000F12  0012               	return	
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 279: {
  2587                           ;main.c: 280: clcd_print("Attempts Over   ",(0x80 + (0)));
  2588  000F14  0E12               	movlw	low STR_9
  2589  000F16  6E15               	movwf	clcd_print@data,c
  2590  000F18  0E06               	movlw	high STR_9
  2591  000F1A  6E16               	movwf	clcd_print@data+1,c
  2592  000F1C  0E80               	movlw	128
  2593  000F1E  6E17               	movwf	clcd_print@addr,c
  2594  000F20  ECA9  F00E         	call	_clcd_print	;wreg free
  2595                           
  2596                           ;main.c: 281: clcd_print("Please wait: ",(0xC0 + (0)));
  2597  000F24  0E86               	movlw	low STR_10
  2598  000F26  6E15               	movwf	clcd_print@data,c
  2599  000F28  0E06               	movlw	high STR_10
  2600  000F2A  6E16               	movwf	clcd_print@data+1,c
  2601  000F2C  0EC0               	movlw	192
  2602  000F2E  6E17               	movwf	clcd_print@addr,c
  2603  000F30  ECA9  F00E         	call	_clcd_print	;wreg free
  2604                           
  2605                           ;main.c: 282: enter_pwd = 1;
  2606  000F34  0E00               	movlw	0
  2607  000F36  0100               	movlb	0	; () banked
  2608  000F38  6F9A               	movwf	(give_password@enter_pwd+1)& (0+255),b
  2609  000F3A  0E01               	movlw	1
  2610  000F3C  6F99               	movwf	give_password@enter_pwd& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 283: wait_flag = 1;
  2614  000F3E  0E00               	movlw	0
  2615  000F40  0100               	movlb	0	; () banked
  2616  000F42  6F92               	movwf	(_wait_flag+1)& (0+255),b
  2617  000F44  0E01               	movlw	1
  2618  000F46  6F91               	movwf	_wait_flag& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 284: if(wait > 0)
  2622  000F48  504B               	movf	_wait,w,c
  2623  000F4A  104C               	iorwf	_wait+1,w,c
  2624  000F4C  B4D8               	btfsc	status,2,c
  2625  000F4E  D02B               	goto	l4619
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;main.c: 285: {
  2629                           ;main.c: 286: clcd_putch((wait /10) % 10 +'0', (0xC0 + (13)));
  2630  000F50  0ECD               	movlw	205
  2631  000F52  6E1B               	movwf	clcd_putch@addr,c
  2632  000F54  0E00               	movlw	0
  2633  000F56  6E12               	movwf	___lwdiv@divisor+1,c
  2634  000F58  0E0A               	movlw	10
  2635  000F5A  6E11               	movwf	___lwdiv@divisor,c
  2636  000F5C  C04B  F00F         	movff	_wait,___lwdiv@dividend
  2637  000F60  C04C  F010         	movff	_wait+1,___lwdiv@dividend+1
  2638  000F64  EC04  F00F         	call	___lwdiv	;wreg free
  2639  000F68  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  2640  000F6C  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  2641  000F70  0E00               	movlw	0
  2642  000F72  6E19               	movwf	___lwmod@divisor+1,c
  2643  000F74  0E0A               	movlw	10
  2644  000F76  6E18               	movwf	___lwmod@divisor,c
  2645  000F78  EC51  F00F         	call	___lwmod	;wreg free
  2646  000F7C  5016               	movf	?___lwmod,w,c
  2647  000F7E  0F30               	addlw	48
  2648  000F80  ECAC  F010         	call	_clcd_putch
  2649                           
  2650                           ;main.c: 287: clcd_putch(wait % 10 +'0', (0xC0 + (14)));
  2651  000F84  0ECE               	movlw	206
  2652  000F86  6E1B               	movwf	clcd_putch@addr,c
  2653  000F88  C04B  F016         	movff	_wait,___lwmod@dividend
  2654  000F8C  C04C  F017         	movff	_wait+1,___lwmod@dividend+1
  2655  000F90  0E00               	movlw	0
  2656  000F92  6E19               	movwf	___lwmod@divisor+1,c
  2657  000F94  0E0A               	movlw	10
  2658  000F96  6E18               	movwf	___lwmod@divisor,c
  2659  000F98  EC51  F00F         	call	___lwmod	;wreg free
  2660  000F9C  5016               	movf	?___lwmod,w,c
  2661  000F9E  0F30               	addlw	48
  2662  000FA0  ECAC  F010         	call	_clcd_putch
  2663                           
  2664                           ;main.c: 288: }
  2665  000FA4  0012               	return	
  2666  000FA6                     l4619:
  2667                           
  2668                           ;main.c: 289: else
  2669                           ;main.c: 290: {
  2670                           ;main.c: 291: enter_pwd = 0;
  2671  000FA6  0E00               	movlw	0
  2672  000FA8  0100               	movlb	0	; () banked
  2673  000FAA  6F9A               	movwf	(give_password@enter_pwd+1)& (0+255),b
  2674  000FAC  0E00               	movlw	0
  2675  000FAE  6F99               	movwf	give_password@enter_pwd& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;main.c: 292: clcd_write(0x01, 0);
  2679  000FB0  0E00               	movlw	0
  2680  000FB2  6E0F               	movwf	clcd_write@control_bit,c
  2681  000FB4  0E01               	movlw	1
  2682  000FB6  EC43  F010         	call	_clcd_write
  2683                           
  2684                           ;main.c: 293: password_flag = 1;
  2685  000FBA  0E00               	movlw	0
  2686  000FBC  0100               	movlb	0	; () banked
  2687  000FBE  6FA2               	movwf	(give_password@password_flag+1)& (0+255),b
  2688  000FC0  0E01               	movlw	1
  2689  000FC2  6FA1               	movwf	give_password@password_flag& (0+255),b
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;main.c: 294: wait = 60;
  2693  000FC4  0E00               	movlw	0
  2694  000FC6  6E4C               	movwf	_wait+1,c
  2695  000FC8  0E3C               	movlw	60
  2696  000FCA  6E4B               	movwf	_wait,c
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 295: wait_flag = 0;
  2700  000FCC  0E00               	movlw	0
  2701  000FCE  0100               	movlb	0	; () banked
  2702  000FD0  6F92               	movwf	(_wait_flag+1)& (0+255),b
  2703  000FD2  0E00               	movlw	0
  2704  000FD4  6F91               	movwf	_wait_flag& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 296: i = 0;
  2708  000FD6  0E00               	movlw	0
  2709  000FD8  0100               	movlb	0	; () banked
  2710  000FDA  6F9E               	movwf	(give_password@i+1)& (0+255),b
  2711  000FDC  0E00               	movlw	0
  2712  000FDE  6F9D               	movwf	give_password@i& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 297: j = 0;
  2716  000FE0  0E00               	movlw	0
  2717  000FE2  6E3E               	movwf	give_password@j+1,c
  2718  000FE4  0E00               	movlw	0
  2719  000FE6  6E3D               	movwf	give_password@j,c
  2720                           
  2721                           ; BSR set to: 0
  2722                           
  2723                           ; BSR set to: 0
  2724                           
  2725                           ; BSR set to: 0
  2726                           
  2727                           ; BSR set to: 0
  2728  000FE8  0012               	return	
  2729  000FEA                     l408:
  2730  000FEA  0012               	return		;funcret
  2731  000FEC                     __end_of_give_password:
  2732                           	opt stack 0
  2733                           tblptru	equ	0xFF8
  2734                           tblptrh	equ	0xFF7
  2735                           tblptrl	equ	0xFF6
  2736                           tablat	equ	0xFF5
  2737                           intcon	equ	0xFF2
  2738                           intcon2	equ	0xFF1
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           postinc1	equ	0xFE6
  2742                           postdec1	equ	0xFE5
  2743                           fsr1h	equ	0xFE2
  2744                           fsr1l	equ	0xFE1
  2745                           indf2	equ	0xFDF
  2746                           postinc2	equ	0xFDE
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _get_time *****************
  2752 ;; Defined at:
  2753 ;;		line 30 in file "main.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, status,0, cstack
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2767 ;;      Params:         0       0       0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0
  2770 ;;      Totals:         0       0       0       0       0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    5
  2774 ;; This function calls:
  2775 ;;		_read_ds1307
  2776 ;; This function is called by:
  2777 ;;		_main
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text10
  2782  001B5E                     __ptext10:
  2783                           	opt stack 0
  2784  001B5E                     _get_time:
  2785                           	opt stack 25
  2786                           
  2787                           ;main.c: 32: clock_reg[0] = read_ds1307(0x02);
  2788                           
  2789                           ;incstack = 0
  2790  001B5E  0E02               	movlw	2
  2791  001B60  EC04  F010         	call	_read_ds1307
  2792  001B64  0100               	movlb	0	; () banked
  2793  001B66  6F7E               	movwf	_clock_reg& (0+255),b
  2794                           
  2795                           ;main.c: 33: clock_reg[1] = read_ds1307(0x01);
  2796  001B68  0E01               	movlw	1
  2797  001B6A  EC04  F010         	call	_read_ds1307
  2798  001B6E  0100               	movlb	0	; () banked
  2799  001B70  6F7F               	movwf	(_clock_reg+1)& (0+255),b
  2800                           
  2801                           ;main.c: 34: clock_reg[2] = read_ds1307(0x00);
  2802  001B72  0E00               	movlw	0
  2803  001B74  EC04  F010         	call	_read_ds1307
  2804  001B78  0100               	movlb	0	; () banked
  2805  001B7A  6F80               	movwf	(_clock_reg+2)& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 37: if (clock_reg[0] & 0x40)
  2809  001B7C  0100               	movlb	0	; () banked
  2810  001B7E  AD7E               	btfss	_clock_reg& (0+255),6,b
  2811  001B80  D005               	goto	l4379
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 38: {
  2815                           ;main.c: 39: time[0] = '0' + ((clock_reg[0] >> 4) & 0x01);
  2816  001B82  0100               	movlb	0	; () banked
  2817  001B84  397E               	swapf	_clock_reg& (0+255),w,b
  2818  001B86  0B0F               	andlw	15
  2819  001B88  0B01               	andlw	1
  2820  001B8A  D004               	goto	L1
  2821  001B8C                     l4379:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 42: else
  2825                           ;main.c: 43: {
  2826                           ;main.c: 44: time[0] = '0' + ((clock_reg[0] >> 4) & 0x03);
  2827  001B8C  0100               	movlb	0	; () banked
  2828  001B8E  397E               	swapf	_clock_reg& (0+255),w,b
  2829  001B90  0B0F               	andlw	15
  2830  001B92  0B03               	andlw	3
  2831  001B94                     L1:
  2832  001B94  0F30               	addlw	48
  2833  001B96  0100               	movlb	0	; () banked
  2834  001B98  6FAF               	movwf	_time& (0+255),b
  2835                           
  2836                           ;main.c: 45: time[1] = '0' + (clock_reg[0] & 0x0F);
  2837  001B9A  0100               	movlb	0	; () banked
  2838  001B9C  517E               	movf	_clock_reg& (0+255),w,b
  2839  001B9E  0B0F               	andlw	15
  2840  001BA0  0F30               	addlw	48
  2841  001BA2  0100               	movlb	0	; () banked
  2842  001BA4  6FB0               	movwf	(_time+1)& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;main.c: 46: }
  2846                           ;main.c: 47: time[2] = ':';
  2847                           
  2848                           ; BSR set to: 0
  2849  001BA6  0E3A               	movlw	58
  2850  001BA8  0100               	movlb	0	; () banked
  2851  001BAA  6FB1               	movwf	(_time+2)& (0+255),b
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 48: time[3] = '0' + ((clock_reg[1] >> 4) & 0x0F);
  2855  001BAC  0100               	movlb	0	; () banked
  2856  001BAE  397F               	swapf	(_clock_reg+1)& (0+255),w,b
  2857  001BB0  0B0F               	andlw	15
  2858  001BB2  0B0F               	andlw	15
  2859  001BB4  0F30               	addlw	48
  2860  001BB6  0100               	movlb	0	; () banked
  2861  001BB8  6FB2               	movwf	(_time+3)& (0+255),b
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;main.c: 49: time[4] = '0' + (clock_reg[1] & 0x0F);
  2865  001BBA  0100               	movlb	0	; () banked
  2866  001BBC  517F               	movf	(_clock_reg+1)& (0+255),w,b
  2867  001BBE  0B0F               	andlw	15
  2868  001BC0  0F30               	addlw	48
  2869  001BC2  0100               	movlb	0	; () banked
  2870  001BC4  6FB3               	movwf	(_time+4)& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;main.c: 50: time[5] = ':';
  2874  001BC6  0E3A               	movlw	58
  2875  001BC8  0100               	movlb	0	; () banked
  2876  001BCA  6FB4               	movwf	(_time+5)& (0+255),b
  2877                           
  2878                           ;main.c: 51: time[6] = '0' + ((clock_reg[2] >> 4) & 0x0F);
  2879  001BCC  0100               	movlb	0	; () banked
  2880  001BCE  3980               	swapf	(_clock_reg+2)& (0+255),w,b
  2881  001BD0  0B0F               	andlw	15
  2882  001BD2  0B0F               	andlw	15
  2883  001BD4  0F30               	addlw	48
  2884  001BD6  0100               	movlb	0	; () banked
  2885  001BD8  6FB5               	movwf	(_time+6)& (0+255),b
  2886                           
  2887                           ;main.c: 52: time[7] = '0' + (clock_reg[2] & 0x0F);
  2888  001BDA  0100               	movlb	0	; () banked
  2889  001BDC  5180               	movf	(_clock_reg+2)& (0+255),w,b
  2890  001BDE  0B0F               	andlw	15
  2891  001BE0  0F30               	addlw	48
  2892  001BE2  0100               	movlb	0	; () banked
  2893  001BE4  6FB6               	movwf	(_time+7)& (0+255),b
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 53: time[8] = '\0';
  2897  001BE6  0E00               	movlw	0
  2898  001BE8  0100               	movlb	0	; () banked
  2899  001BEA  6FB7               	movwf	(_time+8)& (0+255),b
  2900                           
  2901                           ; BSR set to: 0
  2902  001BEC  0012               	return		;funcret
  2903  001BEE                     __end_of_get_time:
  2904                           	opt stack 0
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           intcon	equ	0xFF2
  2910                           intcon2	equ	0xFF1
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postinc1	equ	0xFE6
  2914                           postdec1	equ	0xFE5
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           indf2	equ	0xFDF
  2918                           postinc2	equ	0xFDE
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _read_ds1307 *****************
  2924 ;; Defined at:
  2925 ;;		line 54 in file "ds1307.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  address         1    wreg     unsigned char 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  address         1   15[COMRAM] unsigned char 
  2930 ;;  data            1   16[COMRAM] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      unsigned char 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2940 ;;      Params:         0       0       0       0       0       0       0
  2941 ;;      Locals:         2       0       0       0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0
  2943 ;;      Totals:         2       0       0       0       0       0       0
  2944 ;;Total ram usage:        2 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    4
  2947 ;; This function calls:
  2948 ;;		_i2c_read
  2949 ;;		_i2c_rep_start
  2950 ;;		_i2c_start
  2951 ;;		_i2c_stop
  2952 ;;		_i2c_write
  2953 ;; This function is called by:
  2954 ;;		_get_time
  2955 ;;		_init_ds1307
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text11
  2960  002008                     __ptext11:
  2961                           	opt stack 0
  2962  002008                     _read_ds1307:
  2963                           	opt stack 24
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;incstack = 0
  2967                           ;read_ds1307@address stored from wreg
  2968  002008  6E10               	movwf	read_ds1307@address,c
  2969                           
  2970                           ;ds1307.c: 56: unsigned char data;
  2971                           ;ds1307.c: 58: i2c_start();
  2972  00200A  ECEB  F010         	call	_i2c_start	;wreg free
  2973                           
  2974                           ;ds1307.c: 59: i2c_write(0xD0);
  2975  00200E  0ED0               	movlw	208
  2976  002010  ECDB  F010         	call	_i2c_write
  2977                           
  2978                           ;ds1307.c: 60: i2c_write(address);
  2979  002014  5010               	movf	read_ds1307@address,w,c
  2980  002016  ECDB  F010         	call	_i2c_write
  2981                           
  2982                           ;ds1307.c: 61: i2c_rep_start();
  2983  00201A  ECEF  F010         	call	_i2c_rep_start	;wreg free
  2984                           
  2985                           ;ds1307.c: 62: i2c_write(0xD1);
  2986  00201E  0ED1               	movlw	209
  2987  002020  ECDB  F010         	call	_i2c_write
  2988                           
  2989                           ;ds1307.c: 63: data = i2c_read();
  2990  002024  ECF3  F010         	call	_i2c_read	;wreg free
  2991  002028  6E11               	movwf	read_ds1307@data,c
  2992                           
  2993                           ;ds1307.c: 64: i2c_stop();
  2994  00202A  ECE7  F010         	call	_i2c_stop	;wreg free
  2995                           
  2996                           ;ds1307.c: 66: return data;
  2997  00202E  5011               	movf	read_ds1307@data,w,c
  2998  002030  0012               	return	
  2999  002032                     __end_of_read_ds1307:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           intcon	equ	0xFF2
  3006                           intcon2	equ	0xFF1
  3007                           postinc0	equ	0xFEE
  3008                           wreg	equ	0xFE8
  3009                           postinc1	equ	0xFE6
  3010                           postdec1	equ	0xFE5
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           postinc2	equ	0xFDE
  3015                           fsr2h	equ	0xFDA
  3016                           fsr2l	equ	0xFD9
  3017                           status	equ	0xFD8
  3018                           
  3019 ;; *************** function _display_time *****************
  3020 ;; Defined at:
  3021 ;;		line 24 in file "main.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3035 ;;      Params:         0       0       0       0       0       0       0
  3036 ;;      Locals:         0       0       0       0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0
  3038 ;;      Totals:         0       0       0       0       0       0       0
  3039 ;;Total ram usage:        0 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    3
  3042 ;; This function calls:
  3043 ;;		_clcd_print
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text12
  3050  002198                     __ptext12:
  3051                           	opt stack 0
  3052  002198                     _display_time:
  3053                           	opt stack 27
  3054                           
  3055                           ;main.c: 26: clcd_print (time, (0xC0 + (0)));
  3056                           
  3057                           ;incstack = 0
  3058  002198  0EAF               	movlw	low _time
  3059  00219A  6E15               	movwf	clcd_print@data,c
  3060  00219C  0E00               	movlw	high _time
  3061  00219E  6E16               	movwf	clcd_print@data+1,c
  3062  0021A0  0EC0               	movlw	192
  3063  0021A2  6E17               	movwf	clcd_print@addr,c
  3064  0021A4  ECA9  F00E         	call	_clcd_print	;wreg free
  3065  0021A8  0012               	return		;funcret
  3066  0021AA                     __end_of_display_time:
  3067                           	opt stack 0
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           intcon	equ	0xFF2
  3073                           intcon2	equ	0xFF1
  3074                           postinc0	equ	0xFEE
  3075                           wreg	equ	0xFE8
  3076                           postinc1	equ	0xFE6
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _display_the_event *****************
  3087 ;; Defined at:
  3088 ;;		line 117 in file "main.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  key             1    wreg     unsigned char 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  key             1   11[BANK0 ] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3102 ;;      Params:         0       0       0       0       0       0       0
  3103 ;;      Locals:         0       1       0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0
  3105 ;;      Totals:         0       1       0       0       0       0       0
  3106 ;;Total ram usage:        1 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    5
  3109 ;; This function calls:
  3110 ;;		___ftdiv
  3111 ;;		___fttol
  3112 ;;		___lwdiv
  3113 ;;		___lwmod
  3114 ;;		___lwtoft
  3115 ;;		___wmul
  3116 ;;		_clcd_print
  3117 ;;		_clcd_putch
  3118 ;;		_read_adc
  3119 ;;		_store_event
  3120 ;; This function is called by:
  3121 ;;		_main
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text13
  3126  001362                     __ptext13:
  3127                           	opt stack 0
  3128  001362                     _display_the_event:
  3129                           	opt stack 25
  3130                           
  3131                           ;incstack = 0
  3132                           ;display_the_event@key stored from wreg
  3133  001362  0100               	movlb	0	; () banked
  3134  001364  6FE2               	movwf	display_the_event@key& (0+255),b
  3135                           
  3136                           ;main.c: 119: static unsigned int on_flag = 0;
  3137                           ;main.c: 120: static unsigned int flag = 0;
  3138                           ;main.c: 121: static unsigned int wait = 0;
  3139                           ;main.c: 122: static unsigned int col_flag = 0;
  3140                           ;main.c: 123: static int count = -1;
  3141                           ;main.c: 125: if(on_flag == 0 && key == 0xFF)
  3142  001366  0100               	movlb	0	; () banked
  3143  001368  5195               	movf	display_the_event@on_flag& (0+255),w,b
  3144  00136A  0100               	movlb	0	; () banked
  3145  00136C  1196               	iorwf	(display_the_event@on_flag+1)& (0+255),w,b
  3146  00136E  A4D8               	btfss	status,2,c
  3147  001370  D00D               	goto	l4431
  3148                           
  3149                           ; BSR set to: 0
  3150  001372  0100               	movlb	0	; () banked
  3151  001374  29E2               	incf	display_the_event@key& (0+255),w,b
  3152  001376  A4D8               	btfss	status,2,c
  3153  001378  D009               	goto	l4431
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;main.c: 126: {
  3157                           ;main.c: 127: clcd_print("ON",(0xC0 + (9)));
  3158  00137A  0EAA               	movlw	low STR_3
  3159  00137C  6E15               	movwf	clcd_print@data,c
  3160  00137E  0E06               	movlw	high STR_3
  3161  001380  6E16               	movwf	clcd_print@data+1,c
  3162  001382  0EC9               	movlw	201
  3163  001384  6E17               	movwf	clcd_print@addr,c
  3164  001386  ECA9  F00E         	call	_clcd_print	;wreg free
  3165                           
  3166                           ;main.c: 128: }
  3167  00138A  D09E               	goto	l4483
  3168  00138C                     l4431:
  3169                           
  3170                           ;main.c: 129: else if(key == 1)
  3171  00138C  0100               	movlb	0	; () banked
  3172  00138E  05E2               	decf	display_the_event@key& (0+255),w,b
  3173  001390  A4D8               	btfss	status,2,c
  3174  001392  D010               	goto	l4437
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;main.c: 130: {
  3178                           ;main.c: 131: flag = 1;
  3179  001394  0E00               	movlw	0
  3180  001396  6E3C               	movwf	display_the_event@flag+1,c
  3181  001398  0E01               	movlw	1
  3182  00139A  6E3B               	movwf	display_the_event@flag,c
  3183                           
  3184                           ;main.c: 132: on_flag = 1;
  3185  00139C  0E00               	movlw	0
  3186  00139E  0100               	movlb	0	; () banked
  3187  0013A0  6F96               	movwf	(display_the_event@on_flag+1)& (0+255),b
  3188  0013A2  0E01               	movlw	1
  3189  0013A4  6F95               	movwf	display_the_event@on_flag& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 133: store_event(count);
  3193  0013A6  C04D  F01B         	movff	display_the_event@count,store_event@count
  3194  0013AA  C04E  F01C         	movff	display_the_event@count+1,store_event@count+1
  3195  0013AE  ECCC  F00A         	call	_store_event	;wreg free
  3196                           
  3197                           ;main.c: 134: }
  3198  0013B2  D08A               	goto	l4483
  3199  0013B4                     l4437:
  3200                           
  3201                           ;main.c: 135: else if(key == 2)
  3202  0013B4  0E02               	movlw	2
  3203  0013B6  0100               	movlb	0	; () banked
  3204  0013B8  19E2               	xorwf	display_the_event@key& (0+255),w,b
  3205  0013BA  A4D8               	btfss	status,2,c
  3206  0013BC  D010               	goto	l4443
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 136: {
  3210                           ;main.c: 137: flag = 2;
  3211  0013BE  0E00               	movlw	0
  3212  0013C0  6E3C               	movwf	display_the_event@flag+1,c
  3213  0013C2  0E02               	movlw	2
  3214  0013C4  6E3B               	movwf	display_the_event@flag,c
  3215                           
  3216                           ;main.c: 138: on_flag = 1;
  3217  0013C6  0E00               	movlw	0
  3218  0013C8  0100               	movlb	0	; () banked
  3219  0013CA  6F96               	movwf	(display_the_event@on_flag+1)& (0+255),b
  3220  0013CC  0E01               	movlw	1
  3221  0013CE  6F95               	movwf	display_the_event@on_flag& (0+255),b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 139: store_event(count);
  3225  0013D0  C04D  F01B         	movff	display_the_event@count,store_event@count
  3226  0013D4  C04E  F01C         	movff	display_the_event@count+1,store_event@count+1
  3227  0013D8  ECCC  F00A         	call	_store_event	;wreg free
  3228                           
  3229                           ;main.c: 140: }
  3230  0013DC  D075               	goto	l4483
  3231  0013DE                     l4443:
  3232                           
  3233                           ;main.c: 141: else if(key == 3)
  3234  0013DE  0E03               	movlw	3
  3235  0013E0  0100               	movlb	0	; () banked
  3236  0013E2  19E2               	xorwf	display_the_event@key& (0+255),w,b
  3237  0013E4  A4D8               	btfss	status,2,c
  3238  0013E6  D010               	goto	l4449
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 142: {
  3242                           ;main.c: 143: flag = 3;
  3243  0013E8  0E00               	movlw	0
  3244  0013EA  6E3C               	movwf	display_the_event@flag+1,c
  3245  0013EC  0E03               	movlw	3
  3246  0013EE  6E3B               	movwf	display_the_event@flag,c
  3247                           
  3248                           ;main.c: 144: on_flag = 1;
  3249  0013F0  0E00               	movlw	0
  3250  0013F2  0100               	movlb	0	; () banked
  3251  0013F4  6F96               	movwf	(display_the_event@on_flag+1)& (0+255),b
  3252  0013F6  0E01               	movlw	1
  3253  0013F8  6F95               	movwf	display_the_event@on_flag& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 145: store_event(7);
  3257  0013FA  0E00               	movlw	0
  3258  0013FC  6E1C               	movwf	store_event@count+1,c
  3259  0013FE  0E07               	movlw	7
  3260  001400  6E1B               	movwf	store_event@count,c
  3261  001402  ECCC  F00A         	call	_store_event	;wreg free
  3262                           
  3263                           ;main.c: 146: }
  3264  001406  D060               	goto	l4483
  3265  001408                     l4449:
  3266                           
  3267                           ;main.c: 147: else if(key == 0xFF && flag == 1)
  3268  001408  0100               	movlb	0	; () banked
  3269  00140A  29E2               	incf	display_the_event@key& (0+255),w,b
  3270  00140C  A4D8               	btfss	status,2,c
  3271  00140E  D00F               	goto	l4459
  3272                           
  3273                           ; BSR set to: 0
  3274  001410  043B               	decf	display_the_event@flag,w,c
  3275  001412  103C               	iorwf	display_the_event@flag+1,w,c
  3276  001414  A4D8               	btfss	status,2,c
  3277  001416  D00B               	goto	l4459
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 148: {
  3281                           ;main.c: 149: if(count < 6)
  3282  001418  BE4E               	btfsc	display_the_event@count+1,7,c
  3283  00141A  D006               	goto	l4455
  3284  00141C  504E               	movf	display_the_event@count+1,w,c
  3285  00141E  E11A               	bnz	l4467
  3286  001420  0E06               	movlw	6
  3287  001422  5C4D               	subwf	display_the_event@count,w,c
  3288  001424  B0D8               	btfsc	status,0,c
  3289  001426  D016               	goto	l4467
  3290  001428                     l4455:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;main.c: 150: count++;
  3294  001428  4A4D               	infsnz	display_the_event@count,f,c
  3295  00142A  2A4E               	incf	display_the_event@count+1,f,c
  3296  00142C  D013               	goto	l4467
  3297  00142E                     l4459:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;main.c: 153: else if(key == 0xFF && flag == 2)
  3301  00142E  0100               	movlb	0	; () banked
  3302  001430  29E2               	incf	display_the_event@key& (0+255),w,b
  3303  001432  A4D8               	btfss	status,2,c
  3304  001434  D014               	goto	l4469
  3305                           
  3306                           ; BSR set to: 0
  3307  001436  0E02               	movlw	2
  3308  001438  183B               	xorwf	display_the_event@flag,w,c
  3309  00143A  103C               	iorwf	display_the_event@flag+1,w,c
  3310  00143C  A4D8               	btfss	status,2,c
  3311  00143E  D00F               	goto	l4469
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 154: {
  3315                           ;main.c: 155: if(count > 0)
  3316  001440  BE4E               	btfsc	display_the_event@count+1,7,c
  3317  001442  D008               	goto	l4467
  3318  001444  504E               	movf	display_the_event@count+1,w,c
  3319  001446  E103               	bnz	u4800
  3320  001448  044D               	decf	display_the_event@count,w,c
  3321  00144A  A0D8               	btfss	status,0,c
  3322  00144C  D003               	goto	l4467
  3323  00144E                     u4800:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 156: count--;
  3327  00144E  064D               	decf	display_the_event@count,f,c
  3328  001450  A0D8               	btfss	status,0,c
  3329  001452  064E               	decf	display_the_event@count+1,f,c
  3330  001454                     l4467:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;main.c: 157: flag = 0;
  3334  001454  0E00               	movlw	0
  3335  001456  6E3C               	movwf	display_the_event@flag+1,c
  3336  001458  0E00               	movlw	0
  3337  00145A  6E3B               	movwf	display_the_event@flag,c
  3338                           
  3339                           ;main.c: 158: }
  3340  00145C  D035               	goto	l4483
  3341  00145E                     l4469:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 159: else if(key == 0xFF && flag == 3)
  3345  00145E  0100               	movlb	0	; () banked
  3346  001460  29E2               	incf	display_the_event@key& (0+255),w,b
  3347  001462  A4D8               	btfss	status,2,c
  3348  001464  D00E               	goto	l4475
  3349                           
  3350                           ; BSR set to: 0
  3351  001466  0E03               	movlw	3
  3352  001468  183B               	xorwf	display_the_event@flag,w,c
  3353  00146A  103C               	iorwf	display_the_event@flag+1,w,c
  3354  00146C  A4D8               	btfss	status,2,c
  3355  00146E  D009               	goto	l4475
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;main.c: 160: {
  3359                           ;main.c: 161: clcd_print(gear[7],(0xC0 + (9)));
  3360  001470  0ED4               	movlw	low (_gear+21)
  3361  001472  6E15               	movwf	clcd_print@data,c
  3362  001474  0E00               	movlw	high (_gear+21)
  3363  001476  6E16               	movwf	clcd_print@data+1,c
  3364  001478  0EC9               	movlw	201
  3365  00147A  6E17               	movwf	clcd_print@addr,c
  3366  00147C  ECA9  F00E         	call	_clcd_print	;wreg free
  3367                           
  3368                           ;main.c: 162: }
  3369  001480  D023               	goto	l4483
  3370  001482                     l4475:
  3371                           
  3372                           ;main.c: 163: else if(count < 7 && count >= 0 && flag != 3)
  3373  001482  BE4E               	btfsc	display_the_event@count+1,7,c
  3374  001484  D006               	goto	l4477
  3375  001486  504E               	movf	display_the_event@count+1,w,c
  3376  001488  E11F               	bnz	l4483
  3377  00148A  0E07               	movlw	7
  3378  00148C  5C4D               	subwf	display_the_event@count,w,c
  3379  00148E  B0D8               	btfsc	status,0,c
  3380  001490  D01B               	goto	l4483
  3381  001492                     l4477:
  3382  001492  BE4E               	btfsc	display_the_event@count+1,7,c
  3383  001494  D019               	goto	l4483
  3384  001496  0E03               	movlw	3
  3385  001498  183B               	xorwf	display_the_event@flag,w,c
  3386  00149A  103C               	iorwf	display_the_event@flag+1,w,c
  3387  00149C  B4D8               	btfsc	status,2,c
  3388  00149E  D014               	goto	l4483
  3389                           
  3390                           ;main.c: 164: {
  3391                           ;main.c: 165: clcd_print(gear[count],(0xC0 + (9)));
  3392  0014A0  C04D  F00F         	movff	display_the_event@count,___wmul@multiplier
  3393  0014A4  C04E  F010         	movff	display_the_event@count+1,___wmul@multiplier+1
  3394  0014A8  0E00               	movlw	0
  3395  0014AA  6E12               	movwf	___wmul@multiplicand+1,c
  3396  0014AC  0E03               	movlw	3
  3397  0014AE  6E11               	movwf	___wmul@multiplicand,c
  3398  0014B0  EC57  F010         	call	___wmul	;wreg free
  3399  0014B4  0EBF               	movlw	low _gear
  3400  0014B6  240F               	addwf	?___wmul,w,c
  3401  0014B8  6E15               	movwf	clcd_print@data,c
  3402  0014BA  0E00               	movlw	high _gear
  3403  0014BC  2010               	addwfc	?___wmul+1,w,c
  3404  0014BE  6E16               	movwf	clcd_print@data+1,c
  3405  0014C0  0EC9               	movlw	201
  3406  0014C2  6E17               	movwf	clcd_print@addr,c
  3407  0014C4  ECA9  F00E         	call	_clcd_print	;wreg free
  3408  0014C8                     l4483:
  3409                           
  3410                           ;main.c: 166: }
  3411                           ;main.c: 169: adc_reg_val = (read_adc(0x04))/10.23;
  3412  0014C8  0EAE               	movlw	174
  3413  0014CA  6E1D               	movwf	___ftdiv@f2,c
  3414  0014CC  0E23               	movlw	35
  3415  0014CE  6E1E               	movwf	___ftdiv@f2+1,c
  3416  0014D0  0E41               	movlw	65
  3417  0014D2  6E1F               	movwf	___ftdiv@f2+2,c
  3418  0014D4  0E04               	movlw	4
  3419  0014D6  ECB0  F00F         	call	_read_adc
  3420  0014DA  C00F  F017         	movff	?_read_adc,___lwtoft@c
  3421  0014DE  C010  F018         	movff	?_read_adc+1,___lwtoft@c+1
  3422  0014E2  EC6A  F010         	call	___lwtoft	;wreg free
  3423  0014E6  C017  F01A         	movff	?___lwtoft,___ftdiv@f1
  3424  0014EA  C018  F01B         	movff	?___lwtoft+1,___ftdiv@f1+1
  3425  0014EE  C019  F01C         	movff	?___lwtoft+2,___ftdiv@f1+2
  3426  0014F2  EC42  F00C         	call	___ftdiv	;wreg free
  3427  0014F6  C01A  F029         	movff	?___ftdiv,___fttol@f1
  3428  0014FA  C01B  F02A         	movff	?___ftdiv+1,___fttol@f1+1
  3429  0014FE  C01C  F02B         	movff	?___ftdiv+2,___fttol@f1+2
  3430  001502  ECAB  F00B         	call	___fttol	;wreg free
  3431  001506  C029  F02D         	movff	?___fttol,_adc_reg_val
  3432  00150A  C02A  F02E         	movff	?___fttol+1,_adc_reg_val+1
  3433                           
  3434                           ;main.c: 172: clcd_putch((adc_reg_val / 100) % 10 + '0', (0xC0 + (12)));
  3435  00150E  0ECC               	movlw	204
  3436  001510  6E1B               	movwf	clcd_putch@addr,c
  3437  001512  0E00               	movlw	0
  3438  001514  6E12               	movwf	___lwdiv@divisor+1,c
  3439  001516  0E64               	movlw	100
  3440  001518  6E11               	movwf	___lwdiv@divisor,c
  3441  00151A  C02D  F00F         	movff	_adc_reg_val,___lwdiv@dividend
  3442  00151E  C02E  F010         	movff	_adc_reg_val+1,___lwdiv@dividend+1
  3443  001522  EC04  F00F         	call	___lwdiv	;wreg free
  3444  001526  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  3445  00152A  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  3446  00152E  0E00               	movlw	0
  3447  001530  6E19               	movwf	___lwmod@divisor+1,c
  3448  001532  0E0A               	movlw	10
  3449  001534  6E18               	movwf	___lwmod@divisor,c
  3450  001536  EC51  F00F         	call	___lwmod	;wreg free
  3451  00153A  5016               	movf	?___lwmod,w,c
  3452  00153C  0F30               	addlw	48
  3453  00153E  ECAC  F010         	call	_clcd_putch
  3454                           
  3455                           ;main.c: 173: clcd_putch((adc_reg_val / 10) % 10 + '0',(0xC0 + (13)));
  3456  001542  0ECD               	movlw	205
  3457  001544  6E1B               	movwf	clcd_putch@addr,c
  3458  001546  0E00               	movlw	0
  3459  001548  6E12               	movwf	___lwdiv@divisor+1,c
  3460  00154A  0E0A               	movlw	10
  3461  00154C  6E11               	movwf	___lwdiv@divisor,c
  3462  00154E  C02D  F00F         	movff	_adc_reg_val,___lwdiv@dividend
  3463  001552  C02E  F010         	movff	_adc_reg_val+1,___lwdiv@dividend+1
  3464  001556  EC04  F00F         	call	___lwdiv	;wreg free
  3465  00155A  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  3466  00155E  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  3467  001562  0E00               	movlw	0
  3468  001564  6E19               	movwf	___lwmod@divisor+1,c
  3469  001566  0E0A               	movlw	10
  3470  001568  6E18               	movwf	___lwmod@divisor,c
  3471  00156A  EC51  F00F         	call	___lwmod	;wreg free
  3472  00156E  5016               	movf	?___lwmod,w,c
  3473  001570  0F30               	addlw	48
  3474  001572  ECAC  F010         	call	_clcd_putch
  3475                           
  3476                           ;main.c: 174: clcd_putch(adc_reg_val % 10 + '0',(0xC0 + (14)));
  3477  001576  0ECE               	movlw	206
  3478  001578  6E1B               	movwf	clcd_putch@addr,c
  3479  00157A  C02D  F016         	movff	_adc_reg_val,___lwmod@dividend
  3480  00157E  C02E  F017         	movff	_adc_reg_val+1,___lwmod@dividend+1
  3481  001582  0E00               	movlw	0
  3482  001584  6E19               	movwf	___lwmod@divisor+1,c
  3483  001586  0E0A               	movlw	10
  3484  001588  6E18               	movwf	___lwmod@divisor,c
  3485  00158A  EC51  F00F         	call	___lwmod	;wreg free
  3486  00158E  5016               	movf	?___lwmod,w,c
  3487  001590  0F30               	addlw	48
  3488  001592  ECAC  F010         	call	_clcd_putch
  3489  001596  0012               	return		;funcret
  3490  001598                     __end_of_display_the_event:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postinc1	equ	0xFE6
  3501                           postdec1	equ	0xFE5
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           indf2	equ	0xFDF
  3505                           postinc2	equ	0xFDE
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _store_event *****************
  3511 ;; Defined at:
  3512 ;;		line 308 in file "main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  count           2   26[COMRAM] unsigned int 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  j               2   31[COMRAM] int 
  3517 ;;  i               2   29[COMRAM] int 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3527 ;;      Params:         2       0       0       0       0       0       0
  3528 ;;      Locals:         4       0       0       0       0       0       0
  3529 ;;      Temps:          1       0       0       0       0       0       0
  3530 ;;      Totals:         7       0       0       0       0       0       0
  3531 ;;Total ram usage:        7 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    4
  3534 ;; This function calls:
  3535 ;;		___lwdiv
  3536 ;;		___lwmod
  3537 ;;		___wmul
  3538 ;;		_write_ext_eeprom
  3539 ;; This function is called by:
  3540 ;;		_display_the_event
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text14
  3545  001598                     __ptext14:
  3546                           	opt stack 0
  3547  001598                     _store_event:
  3548                           	opt stack 25
  3549                           
  3550                           ;main.c: 310: int i = 0, j = 0;
  3551                           
  3552                           ;incstack = 0
  3553  001598  0E00               	movlw	0
  3554  00159A  6E1F               	movwf	store_event@i+1,c
  3555  00159C  0E00               	movlw	0
  3556  00159E  6E1E               	movwf	store_event@i,c
  3557  0015A0  0E00               	movlw	0
  3558  0015A2  6E21               	movwf	store_event@j+1,c
  3559  0015A4  0E00               	movlw	0
  3560  0015A6  6E20               	movwf	store_event@j,c
  3561                           
  3562                           ;main.c: 311: while(time[i] != '\0')
  3563  0015A8  D01C               	goto	l4003
  3564  0015AA                     l3995:
  3565                           
  3566                           ;main.c: 312: {
  3567                           ;main.c: 313: if(time[i] != ':')
  3568  0015AA  0EAF               	movlw	low _time
  3569  0015AC  241E               	addwf	store_event@i,w,c
  3570  0015AE  6ED9               	movwf	fsr2l,c
  3571  0015B0  0E00               	movlw	high _time
  3572  0015B2  201F               	addwfc	store_event@i+1,w,c
  3573  0015B4  6EDA               	movwf	fsr2h,c
  3574  0015B6  0E3A               	movlw	58
  3575  0015B8  18DE               	xorwf	postinc2,w,c
  3576  0015BA  B4D8               	btfsc	status,2,c
  3577  0015BC  D010               	goto	l4001
  3578                           
  3579                           ;main.c: 314: {
  3580                           ;main.c: 315: data[j++] = time[i];
  3581  0015BE  0EAF               	movlw	low _time
  3582  0015C0  241E               	addwf	store_event@i,w,c
  3583  0015C2  6ED9               	movwf	fsr2l,c
  3584  0015C4  0E00               	movlw	high _time
  3585  0015C6  201F               	addwfc	store_event@i+1,w,c
  3586  0015C8  6EDA               	movwf	fsr2h,c
  3587  0015CA  0E60               	movlw	low _data
  3588  0015CC  2420               	addwf	store_event@j,w,c
  3589  0015CE  6EE1               	movwf	fsr1l,c
  3590  0015D0  0E00               	movlw	high _data
  3591  0015D2  2021               	addwfc	store_event@j+1,w,c
  3592  0015D4  6EE2               	movwf	fsr1h,c
  3593  0015D6  CFDF FFE7          	movff	indf2,indf1
  3594  0015DA  4A20               	infsnz	store_event@j,f,c
  3595  0015DC  2A21               	incf	store_event@j+1,f,c
  3596  0015DE                     l4001:
  3597                           
  3598                           ;main.c: 316: }
  3599                           ;main.c: 317: i++;
  3600  0015DE  4A1E               	infsnz	store_event@i,f,c
  3601  0015E0  2A1F               	incf	store_event@i+1,f,c
  3602  0015E2                     l4003:
  3603  0015E2  0EAF               	movlw	low _time
  3604  0015E4  241E               	addwf	store_event@i,w,c
  3605  0015E6  6ED9               	movwf	fsr2l,c
  3606  0015E8  0E00               	movlw	high _time
  3607  0015EA  201F               	addwfc	store_event@i+1,w,c
  3608  0015EC  6EDA               	movwf	fsr2h,c
  3609  0015EE  50DF               	movf	indf2,w,c
  3610  0015F0  A4D8               	btfss	status,2,c
  3611  0015F2  D7DB               	goto	l3995
  3612                           
  3613                           ;main.c: 318: }
  3614                           ;main.c: 320: data[j++] = (char)gear[count][0];
  3615  0015F4  C01B  F00F         	movff	store_event@count,___wmul@multiplier
  3616  0015F8  C01C  F010         	movff	store_event@count+1,___wmul@multiplier+1
  3617  0015FC  0E00               	movlw	0
  3618  0015FE  6E12               	movwf	___wmul@multiplicand+1,c
  3619  001600  0E03               	movlw	3
  3620  001602  6E11               	movwf	___wmul@multiplicand,c
  3621  001604  EC57  F010         	call	___wmul	;wreg free
  3622  001608  0EBF               	movlw	low _gear
  3623  00160A  240F               	addwf	?___wmul,w,c
  3624  00160C  6ED9               	movwf	fsr2l,c
  3625  00160E  0E00               	movlw	high _gear
  3626  001610  2010               	addwfc	?___wmul+1,w,c
  3627  001612  6EDA               	movwf	fsr2h,c
  3628  001614  0E60               	movlw	low _data
  3629  001616  2420               	addwf	store_event@j,w,c
  3630  001618  6EE1               	movwf	fsr1l,c
  3631  00161A  0E00               	movlw	high _data
  3632  00161C  2021               	addwfc	store_event@j+1,w,c
  3633  00161E  6EE2               	movwf	fsr1h,c
  3634  001620  CFDF FFE7          	movff	indf2,indf1
  3635  001624  4A20               	infsnz	store_event@j,f,c
  3636  001626  2A21               	incf	store_event@j+1,f,c
  3637                           
  3638                           ;main.c: 321: data[j++] = (char)gear[count][1];
  3639  001628  C01B  F00F         	movff	store_event@count,___wmul@multiplier
  3640  00162C  C01C  F010         	movff	store_event@count+1,___wmul@multiplier+1
  3641  001630  0E00               	movlw	0
  3642  001632  6E12               	movwf	___wmul@multiplicand+1,c
  3643  001634  0E03               	movlw	3
  3644  001636  6E11               	movwf	___wmul@multiplicand,c
  3645  001638  EC57  F010         	call	___wmul	;wreg free
  3646  00163C  0E01               	movlw	1
  3647  00163E  260F               	addwf	?___wmul,f,c
  3648  001640  0E00               	movlw	0
  3649  001642  2210               	addwfc	?___wmul+1,f,c
  3650  001644  0EBF               	movlw	low _gear
  3651  001646  240F               	addwf	?___wmul,w,c
  3652  001648  6ED9               	movwf	fsr2l,c
  3653  00164A  0E00               	movlw	high _gear
  3654  00164C  2010               	addwfc	?___wmul+1,w,c
  3655  00164E  6EDA               	movwf	fsr2h,c
  3656  001650  0E60               	movlw	low _data
  3657  001652  2420               	addwf	store_event@j,w,c
  3658  001654  6EE1               	movwf	fsr1l,c
  3659  001656  0E00               	movlw	high _data
  3660  001658  2021               	addwfc	store_event@j+1,w,c
  3661  00165A  6EE2               	movwf	fsr1h,c
  3662  00165C  CFDF FFE7          	movff	indf2,indf1
  3663  001660  4A20               	infsnz	store_event@j,f,c
  3664  001662  2A21               	incf	store_event@j+1,f,c
  3665                           
  3666                           ;main.c: 323: data[j++] = (adc_reg_val / 100) +'0';
  3667  001664  0E60               	movlw	low _data
  3668  001666  2420               	addwf	store_event@j,w,c
  3669  001668  6ED9               	movwf	fsr2l,c
  3670  00166A  0E00               	movlw	high _data
  3671  00166C  2021               	addwfc	store_event@j+1,w,c
  3672  00166E  6EDA               	movwf	fsr2h,c
  3673  001670  C02D  F00F         	movff	_adc_reg_val,___lwdiv@dividend
  3674  001674  C02E  F010         	movff	_adc_reg_val+1,___lwdiv@dividend+1
  3675  001678  0E00               	movlw	0
  3676  00167A  6E12               	movwf	___lwdiv@divisor+1,c
  3677  00167C  0E64               	movlw	100
  3678  00167E  6E11               	movwf	___lwdiv@divisor,c
  3679  001680  EC04  F00F         	call	___lwdiv	;wreg free
  3680  001684  500F               	movf	?___lwdiv,w,c
  3681  001686  0F30               	addlw	48
  3682  001688  6EDF               	movwf	indf2,c
  3683  00168A  4A20               	infsnz	store_event@j,f,c
  3684  00168C  2A21               	incf	store_event@j+1,f,c
  3685                           
  3686                           ;main.c: 324: data[j++] = (adc_reg_val / 10) % 10 +'0';
  3687  00168E  0E60               	movlw	low _data
  3688  001690  2420               	addwf	store_event@j,w,c
  3689  001692  6ED9               	movwf	fsr2l,c
  3690  001694  0E00               	movlw	high _data
  3691  001696  2021               	addwfc	store_event@j+1,w,c
  3692  001698  6EDA               	movwf	fsr2h,c
  3693  00169A  0E00               	movlw	0
  3694  00169C  6E12               	movwf	___lwdiv@divisor+1,c
  3695  00169E  0E0A               	movlw	10
  3696  0016A0  6E11               	movwf	___lwdiv@divisor,c
  3697  0016A2  C02D  F00F         	movff	_adc_reg_val,___lwdiv@dividend
  3698  0016A6  C02E  F010         	movff	_adc_reg_val+1,___lwdiv@dividend+1
  3699  0016AA  EC04  F00F         	call	___lwdiv	;wreg free
  3700  0016AE  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  3701  0016B2  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  3702  0016B6  0E00               	movlw	0
  3703  0016B8  6E19               	movwf	___lwmod@divisor+1,c
  3704  0016BA  0E0A               	movlw	10
  3705  0016BC  6E18               	movwf	___lwmod@divisor,c
  3706  0016BE  EC51  F00F         	call	___lwmod	;wreg free
  3707  0016C2  5016               	movf	?___lwmod,w,c
  3708  0016C4  0F30               	addlw	48
  3709  0016C6  6EDF               	movwf	indf2,c
  3710  0016C8  4A20               	infsnz	store_event@j,f,c
  3711  0016CA  2A21               	incf	store_event@j+1,f,c
  3712                           
  3713                           ;main.c: 325: data[j++] = adc_reg_val % 10 +'0';
  3714  0016CC  0E60               	movlw	low _data
  3715  0016CE  2420               	addwf	store_event@j,w,c
  3716  0016D0  6ED9               	movwf	fsr2l,c
  3717  0016D2  0E00               	movlw	high _data
  3718  0016D4  2021               	addwfc	store_event@j+1,w,c
  3719  0016D6  6EDA               	movwf	fsr2h,c
  3720  0016D8  C02D  F016         	movff	_adc_reg_val,___lwmod@dividend
  3721  0016DC  C02E  F017         	movff	_adc_reg_val+1,___lwmod@dividend+1
  3722  0016E0  0E00               	movlw	0
  3723  0016E2  6E19               	movwf	___lwmod@divisor+1,c
  3724  0016E4  0E0A               	movlw	10
  3725  0016E6  6E18               	movwf	___lwmod@divisor,c
  3726  0016E8  EC51  F00F         	call	___lwmod	;wreg free
  3727  0016EC  5016               	movf	?___lwmod,w,c
  3728  0016EE  0F30               	addlw	48
  3729  0016F0  6EDF               	movwf	indf2,c
  3730  0016F2  4A20               	infsnz	store_event@j,f,c
  3731  0016F4  2A21               	incf	store_event@j+1,f,c
  3732                           
  3733                           ;main.c: 328: for(j = 0; j < 11; j++)
  3734  0016F6  0E00               	movlw	0
  3735  0016F8  6E21               	movwf	store_event@j+1,c
  3736  0016FA  0E00               	movlw	0
  3737  0016FC  6E20               	movwf	store_event@j,c
  3738  0016FE                     l4021:
  3739  0016FE  BE21               	btfsc	store_event@j+1,7,c
  3740  001700  D006               	goto	l4025
  3741  001702  5021               	movf	store_event@j+1,w,c
  3742  001704  E115               	bnz	l4031
  3743  001706  0E0B               	movlw	11
  3744  001708  5C20               	subwf	store_event@j,w,c
  3745  00170A  B0D8               	btfsc	status,0,c
  3746  00170C  D011               	goto	l4031
  3747  00170E                     l4025:
  3748                           
  3749                           ;main.c: 329: {
  3750                           ;main.c: 330: write_ext_eeprom((count_event * 10 + j), data[j]);
  3751  00170E  0E60               	movlw	low _data
  3752  001710  2420               	addwf	store_event@j,w,c
  3753  001712  6ED9               	movwf	fsr2l,c
  3754  001714  0E00               	movlw	high _data
  3755  001716  2021               	addwfc	store_event@j+1,w,c
  3756  001718  6EDA               	movwf	fsr2h,c
  3757  00171A  50DF               	movf	indf2,w,c
  3758  00171C  6E10               	movwf	write_ext_eeprom@data,c
  3759  00171E  5031               	movf	_count_event,w,c
  3760  001720  0D0A               	mullw	10
  3761  001722  50F3               	movf	prodl,w,c
  3762  001724  2420               	addwf	store_event@j,w,c
  3763  001726  ECE9  F00F         	call	_write_ext_eeprom
  3764  00172A  4A20               	infsnz	store_event@j,f,c
  3765  00172C  2A21               	incf	store_event@j+1,f,c
  3766  00172E  D7E7               	goto	l4021
  3767  001730                     l4031:
  3768                           
  3769                           ;main.c: 331: }
  3770                           ;main.c: 334: if(count_event < 10)
  3771  001730  5032               	movf	_count_event+1,w,c
  3772  001732  E107               	bnz	l4035
  3773  001734  0E0A               	movlw	10
  3774  001736  5C31               	subwf	_count_event,w,c
  3775  001738  B0D8               	btfsc	status,0,c
  3776  00173A  D003               	goto	l4035
  3777                           
  3778                           ;main.c: 335: count_event++;
  3779  00173C  4A31               	infsnz	_count_event,f,c
  3780  00173E  2A32               	incf	_count_event+1,f,c
  3781  001740  0012               	return	
  3782  001742                     l4035:
  3783                           
  3784                           ;main.c: 336: else
  3785                           ;main.c: 337: {
  3786                           ;main.c: 338: count_event_flag = 1;
  3787  001742  0E00               	movlw	0
  3788  001744  0100               	movlb	0	; () banked
  3789  001746  6F82               	movwf	(_count_event_flag+1)& (0+255),b
  3790  001748  0E01               	movlw	1
  3791  00174A  6F81               	movwf	_count_event_flag& (0+255),b
  3792                           
  3793                           ;main.c: 339: count_event = 0;
  3794  00174C  0E00               	movlw	0
  3795  00174E  6E32               	movwf	_count_event+1,c
  3796  001750  0E00               	movlw	0
  3797  001752  6E31               	movwf	_count_event,c
  3798  001754  0012               	return	
  3799  001756                     __end_of_store_event:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           intcon2	equ	0xFF1
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           indf1	equ	0xFE7
  3811                           postinc1	equ	0xFE6
  3812                           postdec1	equ	0xFE5
  3813                           fsr1h	equ	0xFE2
  3814                           fsr1l	equ	0xFE1
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _read_adc *****************
  3822 ;; Defined at:
  3823 ;;		line 45 in file "adc.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  channel         1    wreg     unsigned char 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  channel         1   18[COMRAM] unsigned char 
  3828 ;;  reg_val         2   19[COMRAM] unsigned short 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  2   14[COMRAM] unsigned short 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3838 ;;      Params:         2       0       0       0       0       0       0
  3839 ;;      Locals:         3       0       0       0       0       0       0
  3840 ;;      Temps:          2       0       0       0       0       0       0
  3841 ;;      Totals:         7       0       0       0       0       0       0
  3842 ;;Total ram usage:        7 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    1
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_display_the_event
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text15
  3853  001F60                     __ptext15:
  3854                           	opt stack 0
  3855  001F60                     _read_adc:
  3856                           	opt stack 28
  3857                           
  3858                           ;incstack = 0
  3859                           ;read_adc@channel stored from wreg
  3860  001F60  6E13               	movwf	read_adc@channel,c
  3861                           
  3862                           ;adc.c: 47: unsigned short reg_val;
  3863                           ;adc.c: 49: ADCON0 = (ADCON0 & 0xc3) | (channel << 2);
  3864  001F62  C013  F011         	movff	read_adc@channel,??_read_adc
  3865  001F66  90D8               	bcf	status,0,c
  3866  001F68  3611               	rlcf	??_read_adc,f,c
  3867  001F6A  90D8               	bcf	status,0,c
  3868  001F6C  3611               	rlcf	??_read_adc,f,c
  3869  001F6E  50C2               	movf	4034,w,c	;volatile
  3870  001F70  0BC3               	andlw	195
  3871  001F72  1011               	iorwf	??_read_adc,w,c
  3872  001F74  6EC2               	movwf	4034,c	;volatile
  3873                           
  3874                           ;adc.c: 51: GO = 1;
  3875  001F76  82C2               	bsf	4034,1,c	;volatile
  3876  001F78                     l668:
  3877  001F78  B2C2               	btfsc	4034,1,c	;volatile
  3878  001F7A  D7FE               	goto	l668
  3879                           
  3880                           ;adc.c: 53: reg_val = (ADRESH << 8) | ADRESL;
  3881  001F7C  50C3               	movf	4035,w,c	;volatile
  3882  001F7E  CFC4 F011          	movff	4036,??_read_adc	;volatile
  3883  001F82  6A12               	clrf	(??_read_adc+1)& (0+255),c
  3884  001F84  C011  F012         	movff	??_read_adc,??_read_adc+1
  3885  001F88  6A11               	clrf	??_read_adc,c
  3886  001F8A  1011               	iorwf	??_read_adc,w,c
  3887  001F8C  6E14               	movwf	read_adc@reg_val,c
  3888  001F8E  5012               	movf	??_read_adc+1,w,c
  3889  001F90  6E15               	movwf	read_adc@reg_val+1,c
  3890                           
  3891                           ;adc.c: 55: return reg_val;
  3892  001F92  C014  F00F         	movff	read_adc@reg_val,?_read_adc
  3893  001F96  C015  F010         	movff	read_adc@reg_val+1,?_read_adc+1
  3894  001F9A  0012               	return	
  3895  001F9C                     __end_of_read_adc:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodl	equ	0xFF3
  3902                           intcon	equ	0xFF2
  3903                           intcon2	equ	0xFF1
  3904                           postinc0	equ	0xFEE
  3905                           wreg	equ	0xFE8
  3906                           indf1	equ	0xFE7
  3907                           postinc1	equ	0xFE6
  3908                           postdec1	equ	0xFE5
  3909                           fsr1h	equ	0xFE2
  3910                           fsr1l	equ	0xFE1
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           fsr2h	equ	0xFDA
  3914                           fsr2l	equ	0xFD9
  3915                           status	equ	0xFD8
  3916                           
  3917 ;; *************** function ___lwtoft *****************
  3918 ;; Defined at:
  3919 ;;		line 28 in file "/opt/microchip/xc8/v1.36/sources/common/lwtoft.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;  c               2   22[COMRAM] unsigned int 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  3   22[COMRAM] float 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3933 ;;      Params:         3       0       0       0       0       0       0
  3934 ;;      Locals:         0       0       0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0
  3936 ;;      Totals:         3       0       0       0       0       0       0
  3937 ;;Total ram usage:        3 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    2
  3940 ;; This function calls:
  3941 ;;		___ftpack
  3942 ;; This function is called by:
  3943 ;;		_display_the_event
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text16
  3948  0020D4                     __ptext16:
  3949                           	opt stack 0
  3950  0020D4                     ___lwtoft:
  3951                           	opt stack 27
  3952                           
  3953                           ;incstack = 0
  3954  0020D4  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
  3955  0020D8  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
  3956  0020DC  6A11               	clrf	___ftpack@arg+2,c
  3957  0020DE  0E8E               	movlw	142
  3958  0020E0  6E12               	movwf	___ftpack@exp,c
  3959  0020E2  0E00               	movlw	0
  3960  0020E4  6E13               	movwf	___ftpack@sign,c
  3961  0020E6  ECB5  F00C         	call	___ftpack	;wreg free
  3962  0020EA  C00F  F017         	movff	?___ftpack,?___lwtoft
  3963  0020EE  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  3964  0020F2  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  3965  0020F6  0012               	return	
  3966  0020F8                     __end_of___lwtoft:
  3967                           	opt stack 0
  3968                           tblptru	equ	0xFF8
  3969                           tblptrh	equ	0xFF7
  3970                           tblptrl	equ	0xFF6
  3971                           tablat	equ	0xFF5
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           intcon2	equ	0xFF1
  3975                           postinc0	equ	0xFEE
  3976                           wreg	equ	0xFE8
  3977                           indf1	equ	0xFE7
  3978                           postinc1	equ	0xFE6
  3979                           postdec1	equ	0xFE5
  3980                           fsr1h	equ	0xFE2
  3981                           fsr1l	equ	0xFE1
  3982                           indf2	equ	0xFDF
  3983                           postinc2	equ	0xFDE
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function ___fttol *****************
  3989 ;; Defined at:
  3990 ;;		line 44 in file "/opt/microchip/xc8/v1.36/sources/common/fttol.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  f1              3   40[COMRAM] float 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  lval            4    6[BANK0 ] unsigned long 
  3995 ;;  exp1            1   10[BANK0 ] unsigned char 
  3996 ;;  sign1           1    5[BANK0 ] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  4   40[COMRAM] long 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4006 ;;      Params:         4       0       0       0       0       0       0
  4007 ;;      Locals:         0       6       0       0       0       0       0
  4008 ;;      Temps:          0       5       0       0       0       0       0
  4009 ;;      Totals:         4      11       0       0       0       0       0
  4010 ;;Total ram usage:       15 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    1
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_display_the_event
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           	psect	text17
  4021  001756                     __ptext17:
  4022                           	opt stack 0
  4023  001756                     ___fttol:
  4024                           	opt stack 28
  4025                           
  4026                           ;incstack = 0
  4027  001756  C02B  F0D7         	movff	___fttol@f1+2,??___fttol
  4028  00175A  0100               	movlb	0	; () banked
  4029  00175C  6BD8               	clrf	(??___fttol+1)& (0+255),b
  4030  00175E  6BD9               	clrf	(??___fttol+2)& (0+255),b
  4031  001760  342A               	rlcf	___fttol@f1+1,w,c
  4032  001762  0100               	movlb	0	; () banked
  4033  001764  37D7               	rlcf	??___fttol& (0+255),f,b
  4034  001766  E301               	bnc	u4591
  4035  001768  81D8               	bsf	(??___fttol+1)& (0+255),0,b
  4036  00176A                     u4591:
  4037  00176A  0100               	movlb	0	; () banked
  4038  00176C  51D7               	movf	??___fttol& (0+255),w,b
  4039  00176E  0100               	movlb	0	; () banked
  4040  001770  6FE1               	movwf	___fttol@exp1& (0+255),b
  4041  001772  0100               	movlb	0	; () banked
  4042  001774  51E1               	movf	___fttol@exp1& (0+255),w,b
  4043  001776  A4D8               	btfss	status,2,c
  4044  001778  D009               	goto	l4327
  4045                           
  4046                           ; BSR set to: 0
  4047  00177A  0E00               	movlw	0
  4048  00177C  6E29               	movwf	?___fttol,c
  4049  00177E  0E00               	movlw	0
  4050  001780  6E2A               	movwf	?___fttol+1,c
  4051  001782  0E00               	movlw	0
  4052  001784  6E2B               	movwf	?___fttol+2,c
  4053  001786  0E00               	movlw	0
  4054  001788  6E2C               	movwf	?___fttol+3,c
  4055                           
  4056                           ; BSR set to: 0
  4057  00178A  0012               	return	
  4058  00178C                     l4327:
  4059                           
  4060                           ; BSR set to: 0
  4061  00178C  0E17               	movlw	23
  4062  00178E  0100               	movlb	0	; () banked
  4063  001790  6FD7               	movwf	??___fttol& (0+255),b
  4064  001792  C029  F0D8         	movff	___fttol@f1,??___fttol+1
  4065  001796  C02A  F0D9         	movff	___fttol@f1+1,??___fttol+2
  4066  00179A  C02B  F0DA         	movff	___fttol@f1+2,??___fttol+3
  4067  00179E  0100               	movlb	0	; () banked
  4068  0017A0  29D7               	incf	??___fttol& (0+255),w,b
  4069  0017A2  0100               	movlb	0	; () banked
  4070  0017A4  6FDB               	movwf	(??___fttol+4)& (0+255),b
  4071  0017A6  D005               	goto	u4610
  4072  0017A8                     u4615:
  4073  0017A8  0100               	movlb	0	; () banked
  4074  0017AA  90D8               	bcf	status,0,c
  4075  0017AC  33DA               	rrcf	(??___fttol+3)& (0+255),f,b
  4076  0017AE  33D9               	rrcf	(??___fttol+2)& (0+255),f,b
  4077  0017B0  33D8               	rrcf	(??___fttol+1)& (0+255),f,b
  4078  0017B2                     u4610:
  4079  0017B2  0100               	movlb	0	; () banked
  4080  0017B4  2FDB               	decfsz	(??___fttol+4)& (0+255),f,b
  4081  0017B6  D7F8               	goto	u4615
  4082  0017B8  0100               	movlb	0	; () banked
  4083  0017BA  51D8               	movf	(??___fttol+1)& (0+255),w,b
  4084  0017BC  0100               	movlb	0	; () banked
  4085  0017BE  6FDC               	movwf	___fttol@sign1& (0+255),b
  4086                           
  4087                           ; BSR set to: 0
  4088  0017C0  8E2A               	bsf	___fttol@f1+1,7,c
  4089                           
  4090                           ; BSR set to: 0
  4091  0017C2  0EFF               	movlw	255
  4092  0017C4  1629               	andwf	___fttol@f1,f,c
  4093  0017C6  0EFF               	movlw	255
  4094  0017C8  162A               	andwf	___fttol@f1+1,f,c
  4095  0017CA  0E00               	movlw	0
  4096  0017CC  162B               	andwf	___fttol@f1+2,f,c
  4097                           
  4098                           ; BSR set to: 0
  4099  0017CE  5029               	movf	___fttol@f1,w,c
  4100  0017D0  0100               	movlb	0	; () banked
  4101  0017D2  6FDD               	movwf	___fttol@lval& (0+255),b
  4102  0017D4  502A               	movf	___fttol@f1+1,w,c
  4103  0017D6  0100               	movlb	0	; () banked
  4104  0017D8  6FDE               	movwf	(___fttol@lval+1)& (0+255),b
  4105  0017DA  502B               	movf	___fttol@f1+2,w,c
  4106  0017DC  0100               	movlb	0	; () banked
  4107  0017DE  6FDF               	movwf	(___fttol@lval+2)& (0+255),b
  4108  0017E0  0100               	movlb	0	; () banked
  4109  0017E2  6BE0               	clrf	(___fttol@lval+3)& (0+255),b
  4110                           
  4111                           ; BSR set to: 0
  4112  0017E4  0E8E               	movlw	142
  4113  0017E6  0100               	movlb	0	; () banked
  4114  0017E8  5FE1               	subwf	___fttol@exp1& (0+255),f,b
  4115                           
  4116                           ; BSR set to: 0
  4117  0017EA  0100               	movlb	0	; () banked
  4118  0017EC  AFE1               	btfss	___fttol@exp1& (0+255),7,b
  4119  0017EE  D019               	goto	l4349
  4120                           
  4121                           ; BSR set to: 0
  4122  0017F0  0100               	movlb	0	; () banked
  4123  0017F2  51E1               	movf	___fttol@exp1& (0+255),w,b
  4124  0017F4  0A80               	xorlw	128
  4125  0017F6  0F8F               	addlw	143
  4126  0017F8  B0D8               	btfsc	status,0,c
  4127  0017FA  D009               	goto	l4345
  4128                           
  4129                           ; BSR set to: 0
  4130  0017FC  0E00               	movlw	0
  4131  0017FE  6E29               	movwf	?___fttol,c
  4132  001800  0E00               	movlw	0
  4133  001802  6E2A               	movwf	?___fttol+1,c
  4134  001804  0E00               	movlw	0
  4135  001806  6E2B               	movwf	?___fttol+2,c
  4136  001808  0E00               	movlw	0
  4137  00180A  6E2C               	movwf	?___fttol+3,c
  4138                           
  4139                           ; BSR set to: 0
  4140  00180C  0012               	return	
  4141  00180E                     l4345:
  4142                           
  4143                           ; BSR set to: 0
  4144  00180E  0100               	movlb	0	; () banked
  4145  001810  90D8               	bcf	status,0,c
  4146  001812  33E0               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4147  001814  33DF               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4148  001816  33DE               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4149  001818  33DD               	rrcf	___fttol@lval& (0+255),f,b
  4150                           
  4151                           ; BSR set to: 0
  4152  00181A  0100               	movlb	0	; () banked
  4153  00181C  3FE1               	incfsz	___fttol@exp1& (0+255),f,b
  4154  00181E  D7F7               	goto	l4345
  4155                           
  4156                           ; BSR set to: 0
  4157  001820  D01A               	goto	l4359
  4158  001822                     l4349:
  4159                           
  4160                           ; BSR set to: 0
  4161  001822  0E17               	movlw	23
  4162  001824  0100               	movlb	0	; () banked
  4163  001826  65E1               	cpfsgt	___fttol@exp1& (0+255),b
  4164  001828  D011               	goto	l4357
  4165                           
  4166                           ; BSR set to: 0
  4167  00182A  0E00               	movlw	0
  4168  00182C  6E29               	movwf	?___fttol,c
  4169  00182E  0E00               	movlw	0
  4170  001830  6E2A               	movwf	?___fttol+1,c
  4171  001832  0E00               	movlw	0
  4172  001834  6E2B               	movwf	?___fttol+2,c
  4173  001836  0E00               	movlw	0
  4174  001838  6E2C               	movwf	?___fttol+3,c
  4175                           
  4176                           ; BSR set to: 0
  4177  00183A  0012               	return	
  4178  00183C                     l4355:
  4179                           
  4180                           ; BSR set to: 0
  4181  00183C  0100               	movlb	0	; () banked
  4182  00183E  90D8               	bcf	status,0,c
  4183  001840  37DD               	rlcf	___fttol@lval& (0+255),f,b
  4184  001842  37DE               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4185  001844  37DF               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4186  001846  37E0               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4187  001848  0100               	movlb	0	; () banked
  4188  00184A  07E1               	decf	___fttol@exp1& (0+255),f,b
  4189  00184C                     l4357:
  4190                           
  4191                           ; BSR set to: 0
  4192  00184C  0100               	movlb	0	; () banked
  4193  00184E  51E1               	movf	___fttol@exp1& (0+255),w,b
  4194  001850  0100               	movlb	0	; () banked
  4195  001852  A4D8               	btfss	status,2,c
  4196  001854  D7F3               	goto	l4355
  4197  001856                     l4359:
  4198                           
  4199                           ; BSR set to: 0
  4200  001856  0100               	movlb	0	; () banked
  4201  001858  51DC               	movf	___fttol@sign1& (0+255),w,b
  4202  00185A  0100               	movlb	0	; () banked
  4203  00185C  B4D8               	btfsc	status,2,c
  4204  00185E  D009               	goto	l4363
  4205                           
  4206                           ; BSR set to: 0
  4207  001860  0100               	movlb	0	; () banked
  4208  001862  1FE0               	comf	(___fttol@lval+3)& (0+255),f,b
  4209  001864  1FDF               	comf	(___fttol@lval+2)& (0+255),f,b
  4210  001866  1FDE               	comf	(___fttol@lval+1)& (0+255),f,b
  4211  001868  6DDD               	negf	___fttol@lval& (0+255),b
  4212  00186A  0E00               	movlw	0
  4213  00186C  23DE               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4214  00186E  23DF               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4215  001870  23E0               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4216  001872                     l4363:
  4217                           
  4218                           ; BSR set to: 0
  4219  001872  C0DD  F029         	movff	___fttol@lval,?___fttol
  4220  001876  C0DE  F02A         	movff	___fttol@lval+1,?___fttol+1
  4221  00187A  C0DF  F02B         	movff	___fttol@lval+2,?___fttol+2
  4222  00187E  C0E0  F02C         	movff	___fttol@lval+3,?___fttol+3
  4223  001882  0012               	return	
  4224  001884                     __end_of___fttol:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           intcon2	equ	0xFF1
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           indf1	equ	0xFE7
  4236                           postinc1	equ	0xFE6
  4237                           postdec1	equ	0xFE5
  4238                           fsr1h	equ	0xFE2
  4239                           fsr1l	equ	0xFE1
  4240                           indf2	equ	0xFDF
  4241                           postinc2	equ	0xFDE
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function ___ftdiv *****************
  4247 ;; Defined at:
  4248 ;;		line 54 in file "/opt/microchip/xc8/v1.36/sources/common/ftdiv.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  f1              3   25[COMRAM] float 
  4251 ;;  f2              3   28[COMRAM] float 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  f3              3   35[COMRAM] float 
  4254 ;;  sign            1   39[COMRAM] unsigned char 
  4255 ;;  exp             1   38[COMRAM] unsigned char 
  4256 ;;  cntr            1   34[COMRAM] unsigned char 
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  3   25[COMRAM] float 
  4259 ;; Registers used:
  4260 ;;		wreg, status,2, status,0, cstack
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4266 ;;      Params:         6       0       0       0       0       0       0
  4267 ;;      Locals:         6       0       0       0       0       0       0
  4268 ;;      Temps:          3       0       0       0       0       0       0
  4269 ;;      Totals:        15       0       0       0       0       0       0
  4270 ;;Total ram usage:       15 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; Hardware stack levels required when called:    2
  4273 ;; This function calls:
  4274 ;;		___ftpack
  4275 ;; This function is called by:
  4276 ;;		_display_the_event
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	text18
  4281  001884                     __ptext18:
  4282                           	opt stack 0
  4283  001884                     ___ftdiv:
  4284                           	opt stack 27
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;incstack = 0
  4288  001884  C01C  F020         	movff	___ftdiv@f1+2,??___ftdiv
  4289  001888  6A21               	clrf	(??___ftdiv+1)& (0+255),c
  4290  00188A  6A22               	clrf	(??___ftdiv+2)& (0+255),c
  4291  00188C  341B               	rlcf	___ftdiv@f1+1,w,c
  4292  00188E  3620               	rlcf	??___ftdiv& (0+255),f,c
  4293  001890  E301               	bnc	u4541
  4294  001892  8021               	bsf	(??___ftdiv+1)& (0+255),0,c
  4295  001894                     u4541:
  4296  001894  5020               	movf	??___ftdiv,w,c
  4297  001896  6E27               	movwf	___ftdiv@exp,c
  4298  001898  5027               	movf	___ftdiv@exp,w,c
  4299  00189A  A4D8               	btfss	status,2,c
  4300  00189C  D007               	goto	l4281
  4301  00189E  0E00               	movlw	0
  4302  0018A0  6E1A               	movwf	?___ftdiv,c
  4303  0018A2  0E00               	movlw	0
  4304  0018A4  6E1B               	movwf	?___ftdiv+1,c
  4305  0018A6  0E00               	movlw	0
  4306  0018A8  6E1C               	movwf	?___ftdiv+2,c
  4307  0018AA  0012               	return	
  4308  0018AC                     l4281:
  4309  0018AC  C01F  F020         	movff	___ftdiv@f2+2,??___ftdiv
  4310  0018B0  6A21               	clrf	(??___ftdiv+1)& (0+255),c
  4311  0018B2  6A22               	clrf	(??___ftdiv+2)& (0+255),c
  4312  0018B4  341E               	rlcf	___ftdiv@f2+1,w,c
  4313  0018B6  3620               	rlcf	??___ftdiv& (0+255),f,c
  4314  0018B8  E301               	bnc	u4561
  4315  0018BA  8021               	bsf	(??___ftdiv+1)& (0+255),0,c
  4316  0018BC                     u4561:
  4317  0018BC  5020               	movf	??___ftdiv,w,c
  4318  0018BE  6E28               	movwf	___ftdiv@sign,c
  4319  0018C0  5028               	movf	___ftdiv@sign,w,c
  4320  0018C2  A4D8               	btfss	status,2,c
  4321  0018C4  D007               	goto	l4287
  4322  0018C6  0E00               	movlw	0
  4323  0018C8  6E1A               	movwf	?___ftdiv,c
  4324  0018CA  0E00               	movlw	0
  4325  0018CC  6E1B               	movwf	?___ftdiv+1,c
  4326  0018CE  0E00               	movlw	0
  4327  0018D0  6E1C               	movwf	?___ftdiv+2,c
  4328  0018D2  0012               	return	
  4329  0018D4                     l4287:
  4330  0018D4  0E00               	movlw	0
  4331  0018D6  6E24               	movwf	___ftdiv@f3,c
  4332  0018D8  0E00               	movlw	0
  4333  0018DA  6E25               	movwf	___ftdiv@f3+1,c
  4334  0018DC  0E00               	movlw	0
  4335  0018DE  6E26               	movwf	___ftdiv@f3+2,c
  4336  0018E0  5028               	movf	___ftdiv@sign,w,c
  4337  0018E2  0F89               	addlw	137
  4338  0018E4  5E27               	subwf	___ftdiv@exp,f,c
  4339  0018E6  C01C  F028         	movff	___ftdiv@f1+2,___ftdiv@sign
  4340  0018EA  501F               	movf	___ftdiv@f2+2,w,c
  4341  0018EC  1A28               	xorwf	___ftdiv@sign,f,c
  4342  0018EE  0E80               	movlw	128
  4343  0018F0  1628               	andwf	___ftdiv@sign,f,c
  4344  0018F2  8E1B               	bsf	___ftdiv@f1+1,7,c
  4345  0018F4  0EFF               	movlw	255
  4346  0018F6  161A               	andwf	___ftdiv@f1,f,c
  4347  0018F8  0EFF               	movlw	255
  4348  0018FA  161B               	andwf	___ftdiv@f1+1,f,c
  4349  0018FC  0E00               	movlw	0
  4350  0018FE  161C               	andwf	___ftdiv@f1+2,f,c
  4351  001900  8E1E               	bsf	___ftdiv@f2+1,7,c
  4352  001902  0EFF               	movlw	255
  4353  001904  161D               	andwf	___ftdiv@f2,f,c
  4354  001906  0EFF               	movlw	255
  4355  001908  161E               	andwf	___ftdiv@f2+1,f,c
  4356  00190A  0E00               	movlw	0
  4357  00190C  161F               	andwf	___ftdiv@f2+2,f,c
  4358  00190E  0E18               	movlw	24
  4359  001910  6E23               	movwf	___ftdiv@cntr,c
  4360  001912                     l4307:
  4361  001912  90D8               	bcf	status,0,c
  4362  001914  3624               	rlcf	___ftdiv@f3,f,c
  4363  001916  3625               	rlcf	___ftdiv@f3+1,f,c
  4364  001918  3626               	rlcf	___ftdiv@f3+2,f,c
  4365  00191A  501D               	movf	___ftdiv@f2,w,c
  4366  00191C  5C1A               	subwf	___ftdiv@f1,w,c
  4367  00191E  501E               	movf	___ftdiv@f2+1,w,c
  4368  001920  581B               	subwfb	___ftdiv@f1+1,w,c
  4369  001922  501F               	movf	___ftdiv@f2+2,w,c
  4370  001924  581C               	subwfb	___ftdiv@f1+2,w,c
  4371  001926  A0D8               	btfss	status,0,c
  4372  001928  D007               	goto	l954
  4373  00192A  501D               	movf	___ftdiv@f2,w,c
  4374  00192C  5E1A               	subwf	___ftdiv@f1,f,c
  4375  00192E  501E               	movf	___ftdiv@f2+1,w,c
  4376  001930  5A1B               	subwfb	___ftdiv@f1+1,f,c
  4377  001932  501F               	movf	___ftdiv@f2+2,w,c
  4378  001934  5A1C               	subwfb	___ftdiv@f1+2,f,c
  4379  001936  8024               	bsf	___ftdiv@f3,0,c
  4380  001938                     l954:
  4381  001938  90D8               	bcf	status,0,c
  4382  00193A  361A               	rlcf	___ftdiv@f1,f,c
  4383  00193C  361B               	rlcf	___ftdiv@f1+1,f,c
  4384  00193E  361C               	rlcf	___ftdiv@f1+2,f,c
  4385  001940  2E23               	decfsz	___ftdiv@cntr,f,c
  4386  001942  D7E7               	goto	l4307
  4387  001944  C024  F00F         	movff	___ftdiv@f3,___ftpack@arg
  4388  001948  C025  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4389  00194C  C026  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4390  001950  C027  F012         	movff	___ftdiv@exp,___ftpack@exp
  4391  001954  C028  F013         	movff	___ftdiv@sign,___ftpack@sign
  4392  001958  ECB5  F00C         	call	___ftpack	;wreg free
  4393  00195C  C00F  F01A         	movff	?___ftpack,?___ftdiv
  4394  001960  C010  F01B         	movff	?___ftpack+1,?___ftdiv+1
  4395  001964  C011  F01C         	movff	?___ftpack+2,?___ftdiv+2
  4396  001968  0012               	return	
  4397  00196A                     __end_of___ftdiv:
  4398                           	opt stack 0
  4399                           tblptru	equ	0xFF8
  4400                           tblptrh	equ	0xFF7
  4401                           tblptrl	equ	0xFF6
  4402                           tablat	equ	0xFF5
  4403                           prodl	equ	0xFF3
  4404                           intcon	equ	0xFF2
  4405                           intcon2	equ	0xFF1
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           indf1	equ	0xFE7
  4409                           postinc1	equ	0xFE6
  4410                           postdec1	equ	0xFE5
  4411                           fsr1h	equ	0xFE2
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           fsr2h	equ	0xFDA
  4416                           fsr2l	equ	0xFD9
  4417                           status	equ	0xFD8
  4418                           
  4419 ;; *************** function ___ftpack *****************
  4420 ;; Defined at:
  4421 ;;		line 62 in file "/opt/microchip/xc8/v1.36/sources/common/float.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  arg             3   14[COMRAM] unsigned um
  4424 ;;  exp             1   17[COMRAM] unsigned char 
  4425 ;;  sign            1   18[COMRAM] unsigned char 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  3   14[COMRAM] float 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2, status,0
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4437 ;;      Params:         5       0       0       0       0       0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0
  4439 ;;      Temps:          3       0       0       0       0       0       0
  4440 ;;      Totals:         8       0       0       0       0       0       0
  4441 ;;Total ram usage:        8 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    1
  4444 ;; This function calls:
  4445 ;;		Nothing
  4446 ;; This function is called by:
  4447 ;;		___ftdiv
  4448 ;;		___lwtoft
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text19
  4453  00196A                     __ptext19:
  4454                           	opt stack 0
  4455  00196A                     ___ftpack:
  4456                           	opt stack 27
  4457                           
  4458                           ;incstack = 0
  4459  00196A  5012               	movf	___ftpack@exp,w,c
  4460  00196C  B4D8               	btfsc	status,2,c
  4461  00196E  D005               	goto	l3867
  4462  001970  500F               	movf	___ftpack@arg,w,c
  4463  001972  1010               	iorwf	___ftpack@arg+1,w,c
  4464  001974  1011               	iorwf	___ftpack@arg+2,w,c
  4465  001976  A4D8               	btfss	status,2,c
  4466  001978  D00C               	goto	l3873
  4467  00197A                     l3867:
  4468  00197A  0E00               	movlw	0
  4469  00197C  6E0F               	movwf	?___ftpack,c
  4470  00197E  0E00               	movlw	0
  4471  001980  6E10               	movwf	?___ftpack+1,c
  4472  001982  0E00               	movlw	0
  4473  001984  6E11               	movwf	?___ftpack+2,c
  4474  001986  0012               	return	
  4475  001988                     l3871:
  4476  001988  2A12               	incf	___ftpack@exp,f,c
  4477  00198A  90D8               	bcf	status,0,c
  4478  00198C  3211               	rrcf	___ftpack@arg+2,f,c
  4479  00198E  3210               	rrcf	___ftpack@arg+1,f,c
  4480  001990  320F               	rrcf	___ftpack@arg,f,c
  4481  001992                     l3873:
  4482  001992  0E00               	movlw	0
  4483  001994  140F               	andwf	___ftpack@arg,w,c
  4484  001996  6E14               	movwf	??___ftpack& (0+255),c
  4485  001998  0E00               	movlw	0
  4486  00199A  1410               	andwf	___ftpack@arg+1,w,c
  4487  00199C  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4488  00199E  0EFE               	movlw	254
  4489  0019A0  1411               	andwf	___ftpack@arg+2,w,c
  4490  0019A2  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4491  0019A4  5014               	movf	??___ftpack,w,c
  4492  0019A6  1015               	iorwf	??___ftpack+1,w,c
  4493  0019A8  1016               	iorwf	??___ftpack+2,w,c
  4494  0019AA  B4D8               	btfsc	status,2,c
  4495  0019AC  D00C               	goto	l3879
  4496  0019AE  D7EC               	goto	l3871
  4497  0019B0                     l3875:
  4498  0019B0  2A12               	incf	___ftpack@exp,f,c
  4499  0019B2  0E01               	movlw	1
  4500  0019B4  260F               	addwf	___ftpack@arg,f,c
  4501  0019B6  0E00               	movlw	0
  4502  0019B8  2210               	addwfc	___ftpack@arg+1,f,c
  4503  0019BA  0E00               	movlw	0
  4504  0019BC  2211               	addwfc	___ftpack@arg+2,f,c
  4505  0019BE  90D8               	bcf	status,0,c
  4506  0019C0  3211               	rrcf	___ftpack@arg+2,f,c
  4507  0019C2  3210               	rrcf	___ftpack@arg+1,f,c
  4508  0019C4  320F               	rrcf	___ftpack@arg,f,c
  4509  0019C6                     l3879:
  4510  0019C6  0E00               	movlw	0
  4511  0019C8  140F               	andwf	___ftpack@arg,w,c
  4512  0019CA  6E14               	movwf	??___ftpack& (0+255),c
  4513  0019CC  0E00               	movlw	0
  4514  0019CE  1410               	andwf	___ftpack@arg+1,w,c
  4515  0019D0  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4516  0019D2  0EFF               	movlw	255
  4517  0019D4  1411               	andwf	___ftpack@arg+2,w,c
  4518  0019D6  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4519  0019D8  5014               	movf	??___ftpack,w,c
  4520  0019DA  1015               	iorwf	??___ftpack+1,w,c
  4521  0019DC  1016               	iorwf	??___ftpack+2,w,c
  4522  0019DE  B4D8               	btfsc	status,2,c
  4523  0019E0  D006               	goto	l3883
  4524  0019E2  D7E6               	goto	l3875
  4525  0019E4                     l3881:
  4526  0019E4  0612               	decf	___ftpack@exp,f,c
  4527  0019E6  90D8               	bcf	status,0,c
  4528  0019E8  360F               	rlcf	___ftpack@arg,f,c
  4529  0019EA  3610               	rlcf	___ftpack@arg+1,f,c
  4530  0019EC  3611               	rlcf	___ftpack@arg+2,f,c
  4531  0019EE                     l3883:
  4532  0019EE  BE10               	btfsc	___ftpack@arg+1,7,c
  4533  0019F0  D003               	goto	l896
  4534  0019F2  0E02               	movlw	2
  4535  0019F4  6012               	cpfslt	___ftpack@exp,c
  4536  0019F6  D7F6               	goto	l3881
  4537  0019F8                     l896:
  4538  0019F8  A012               	btfss	___ftpack@exp,0,c
  4539  0019FA  9E10               	bcf	___ftpack@arg+1,7,c
  4540  0019FC  90D8               	bcf	status,0,c
  4541  0019FE  3212               	rrcf	___ftpack@exp,f,c
  4542  001A00  5012               	movf	___ftpack@exp,w,c
  4543  001A02  1211               	iorwf	___ftpack@arg+2,f,c
  4544  001A04  5013               	movf	___ftpack@sign,w,c
  4545  001A06  A4D8               	btfss	status,2,c
  4546  001A08  8E11               	bsf	___ftpack@arg+2,7,c
  4547  001A0A  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  4548  001A0E  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  4549  001A12  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  4550  001A16  0012               	return	
  4551  001A18                     __end_of___ftpack:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodl	equ	0xFF3
  4558                           intcon	equ	0xFF2
  4559                           intcon2	equ	0xFF1
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           indf1	equ	0xFE7
  4563                           postinc1	equ	0xFE6
  4564                           postdec1	equ	0xFE5
  4565                           fsr1h	equ	0xFE2
  4566                           fsr1l	equ	0xFE1
  4567                           indf2	equ	0xFDF
  4568                           postinc2	equ	0xFDE
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _display_menu *****************
  4574 ;; Defined at:
  4575 ;;		line 349 in file "main.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  key             1    wreg     unsigned char 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  key             1   32[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4589 ;;      Params:         0       0       0       0       0       0       0
  4590 ;;      Locals:         1       0       0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0
  4592 ;;      Totals:         1       0       0       0       0       0       0
  4593 ;;Total ram usage:        1 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    6
  4596 ;; This function calls:
  4597 ;;		___lwdiv
  4598 ;;		___lwmod
  4599 ;;		___wmul
  4600 ;;		_clcd_print
  4601 ;;		_clcd_putch
  4602 ;;		_clcd_write
  4603 ;;		_log_fun
  4604 ;; This function is called by:
  4605 ;;		_main
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text20
  4610  000FEC                     __ptext20:
  4611                           	opt stack 0
  4612  000FEC                     _display_menu:
  4613                           	opt stack 24
  4614                           
  4615                           ;incstack = 0
  4616                           ;display_menu@key stored from wreg
  4617  000FEC  6E21               	movwf	display_menu@key,c
  4618                           
  4619                           ;main.c: 351: static unsigned short menu_wait;
  4620                           ;main.c: 352: static unsigned short count;
  4621                           ;main.c: 353: static unsigned short key11_wait;
  4622                           ;main.c: 355: if(key11_wait_flag == 0)
  4623  000FEE  0100               	movlb	0	; () banked
  4624  000FF0  5187               	movf	_key11_wait_flag& (0+255),w,b
  4625  000FF2  0100               	movlb	0	; () banked
  4626  000FF4  1188               	iorwf	(_key11_wait_flag+1)& (0+255),w,b
  4627  000FF6  A4D8               	btfss	status,2,c
  4628  000FF8  0012               	return	
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;main.c: 356: {
  4632                           ;main.c: 357: clcd_putch('*',(0x80 + (0)));
  4633  000FFA  0E80               	movlw	128
  4634  000FFC  6E1B               	movwf	clcd_putch@addr,c
  4635  000FFE  0E2A               	movlw	42
  4636  001000  ECAC  F010         	call	_clcd_putch
  4637                           
  4638                           ;main.c: 358: if(key == 10)
  4639  001004  0E0A               	movlw	10
  4640  001006  1821               	xorwf	display_menu@key,w,c
  4641  001008  A4D8               	btfss	status,2,c
  4642  00100A  D04A               	goto	l4649
  4643                           
  4644                           ;main.c: 359: {
  4645                           ;main.c: 360: menu_wait++;
  4646  00100C  4A39               	infsnz	display_menu@menu_wait,f,c
  4647  00100E  2A3A               	incf	display_menu@menu_wait+1,f,c
  4648                           
  4649                           ;main.c: 361: menu_flag = 1;
  4650  001010  0E00               	movlw	0
  4651  001012  6E34               	movwf	_menu_flag+1,c
  4652  001014  0E01               	movlw	1
  4653  001016  6E33               	movwf	_menu_flag,c
  4654                           
  4655                           ;main.c: 362: clcd_putch(menu_wait % 10 + '0', (0x80 + (13)));
  4656  001018  0E8D               	movlw	141
  4657  00101A  6E1B               	movwf	clcd_putch@addr,c
  4658  00101C  C039  F016         	movff	display_menu@menu_wait,___lwmod@dividend
  4659  001020  C03A  F017         	movff	display_menu@menu_wait+1,___lwmod@dividend+1
  4660  001024  0E00               	movlw	0
  4661  001026  6E19               	movwf	___lwmod@divisor+1,c
  4662  001028  0E0A               	movlw	10
  4663  00102A  6E18               	movwf	___lwmod@divisor,c
  4664  00102C  EC51  F00F         	call	___lwmod	;wreg free
  4665  001030  5016               	movf	?___lwmod,w,c
  4666  001032  0F30               	addlw	48
  4667  001034  ECAC  F010         	call	_clcd_putch
  4668                           
  4669                           ;main.c: 363: clcd_putch((menu_wait / 10) % 10 + '0', (0x80 + (14)));
  4670  001038  0E8E               	movlw	142
  4671  00103A  6E1B               	movwf	clcd_putch@addr,c
  4672  00103C  0E00               	movlw	0
  4673  00103E  6E12               	movwf	___lwdiv@divisor+1,c
  4674  001040  0E0A               	movlw	10
  4675  001042  6E11               	movwf	___lwdiv@divisor,c
  4676  001044  C039  F00F         	movff	display_menu@menu_wait,___lwdiv@dividend
  4677  001048  C03A  F010         	movff	display_menu@menu_wait+1,___lwdiv@dividend+1
  4678  00104C  EC04  F00F         	call	___lwdiv	;wreg free
  4679  001050  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  4680  001054  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  4681  001058  0E00               	movlw	0
  4682  00105A  6E19               	movwf	___lwmod@divisor+1,c
  4683  00105C  0E0A               	movlw	10
  4684  00105E  6E18               	movwf	___lwmod@divisor,c
  4685  001060  EC51  F00F         	call	___lwmod	;wreg free
  4686  001064  5016               	movf	?___lwmod,w,c
  4687  001066  0F30               	addlw	48
  4688  001068  ECAC  F010         	call	_clcd_putch
  4689                           
  4690                           ;main.c: 364: clcd_putch((menu_wait /100) % 10 + '0', (0x80 + (15)));
  4691  00106C  0E8F               	movlw	143
  4692  00106E  6E1B               	movwf	clcd_putch@addr,c
  4693  001070  0E00               	movlw	0
  4694  001072  6E12               	movwf	___lwdiv@divisor+1,c
  4695  001074  0E64               	movlw	100
  4696  001076  6E11               	movwf	___lwdiv@divisor,c
  4697  001078  C039  F00F         	movff	display_menu@menu_wait,___lwdiv@dividend
  4698  00107C  C03A  F010         	movff	display_menu@menu_wait+1,___lwdiv@dividend+1
  4699  001080  EC04  F00F         	call	___lwdiv	;wreg free
  4700  001084  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  4701  001088  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  4702  00108C  0E00               	movlw	0
  4703  00108E  6E19               	movwf	___lwmod@divisor+1,c
  4704  001090  0E0A               	movlw	10
  4705  001092  6E18               	movwf	___lwmod@divisor,c
  4706  001094  EC51  F00F         	call	___lwmod	;wreg free
  4707  001098  5016               	movf	?___lwmod,w,c
  4708  00109A  0F30               	addlw	48
  4709  00109C  ECAC  F010         	call	_clcd_putch
  4710  0010A0                     l4649:
  4711                           
  4712                           ;main.c: 365: }
  4713                           ;main.c: 366: if(menu_wait >= 500 && key == 10)
  4714  0010A0  0EF4               	movlw	244
  4715  0010A2  5C39               	subwf	display_menu@menu_wait,w,c
  4716  0010A4  0E01               	movlw	1
  4717  0010A6  583A               	subwfb	display_menu@menu_wait+1,w,c
  4718  0010A8  A0D8               	btfss	status,0,c
  4719  0010AA  D00E               	goto	l4657
  4720  0010AC  0E0A               	movlw	10
  4721  0010AE  1821               	xorwf	display_menu@key,w,c
  4722  0010B0  A4D8               	btfss	status,2,c
  4723  0010B2  D00A               	goto	l4657
  4724                           
  4725                           ;main.c: 367: {
  4726                           ;main.c: 368: enter_flag = 1;
  4727  0010B4  0E00               	movlw	0
  4728  0010B6  0100               	movlb	0	; () banked
  4729  0010B8  6F84               	movwf	(_enter_flag+1)& (0+255),b
  4730  0010BA  0E01               	movlw	1
  4731  0010BC  6F83               	movwf	_enter_flag& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;main.c: 369: clcd_write(0x01, 0);
  4735  0010BE  0E00               	movlw	0
  4736  0010C0  6E0F               	movwf	clcd_write@control_bit,c
  4737  0010C2  0E01               	movlw	1
  4738  0010C4  EC43  F010         	call	_clcd_write
  4739  0010C8                     l4657:
  4740                           
  4741                           ;main.c: 370: }
  4742                           ;main.c: 371: if(enter_flag == 1)
  4743  0010C8  0100               	movlb	0	; () banked
  4744  0010CA  0583               	decf	_enter_flag& (0+255),w,b
  4745  0010CC  0100               	movlb	0	; () banked
  4746  0010CE  1184               	iorwf	(_enter_flag+1)& (0+255),w,b
  4747  0010D0  A4D8               	btfss	status,2,c
  4748  0010D2  D02D               	goto	l4667
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;main.c: 372: {
  4752                           ;main.c: 373: menu_wait = 0;
  4753  0010D4  0E00               	movlw	0
  4754  0010D6  6E3A               	movwf	display_menu@menu_wait+1,c
  4755  0010D8  0E00               	movlw	0
  4756  0010DA  6E39               	movwf	display_menu@menu_wait,c
  4757                           
  4758                           ;main.c: 374: menu_flag = 0;
  4759  0010DC  0E00               	movlw	0
  4760  0010DE  6E34               	movwf	_menu_flag+1,c
  4761  0010E0  0E00               	movlw	0
  4762  0010E2  6E33               	movwf	_menu_flag,c
  4763                           
  4764                           ;main.c: 375: op_flag = 1;
  4765  0010E4  0E00               	movlw	0
  4766  0010E6  0100               	movlb	0	; () banked
  4767  0010E8  6F90               	movwf	(_op_flag+1)& (0+255),b
  4768  0010EA  0E01               	movlw	1
  4769  0010EC  6F8F               	movwf	_op_flag& (0+255),b
  4770                           
  4771                           ;main.c: 376: key11_flag = 0;
  4772  0010EE  0E00               	movlw	0
  4773  0010F0  0100               	movlb	0	; () banked
  4774  0010F2  6F86               	movwf	(_key11_flag+1)& (0+255),b
  4775  0010F4  0E00               	movlw	0
  4776  0010F6  6F85               	movwf	_key11_flag& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;main.c: 377: if(count_event_flag == 1)
  4780  0010F8  0100               	movlb	0	; () banked
  4781  0010FA  0581               	decf	_count_event_flag& (0+255),w,b
  4782  0010FC  0100               	movlb	0	; () banked
  4783  0010FE  1182               	iorwf	(_count_event_flag+1)& (0+255),w,b
  4784  001100  A4D8               	btfss	status,2,c
  4785  001102  D00B               	goto	l4665
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;main.c: 378: {
  4789                           ;main.c: 379: log_fun(count, 10);
  4790  001104  C035  F01D         	movff	display_menu@count,log_fun@count
  4791  001108  C036  F01E         	movff	display_menu@count+1,log_fun@count+1
  4792  00110C  0E00               	movlw	0
  4793  00110E  6E20               	movwf	log_fun@limit+1,c
  4794  001110  0E0A               	movlw	10
  4795  001112  6E1F               	movwf	log_fun@limit,c
  4796  001114  EC57  F003         	call	_log_fun	;wreg free
  4797                           
  4798                           ;main.c: 380: }
  4799  001118  D00A               	goto	l4667
  4800  00111A                     l4665:
  4801                           
  4802                           ;main.c: 381: else
  4803                           ;main.c: 382: log_fun(count, count_event);
  4804  00111A  C035  F01D         	movff	display_menu@count,log_fun@count
  4805  00111E  C036  F01E         	movff	display_menu@count+1,log_fun@count+1
  4806  001122  C031  F01F         	movff	_count_event,log_fun@limit
  4807  001126  C032  F020         	movff	_count_event+1,log_fun@limit+1
  4808  00112A  EC57  F003         	call	_log_fun	;wreg free
  4809  00112E                     l4667:
  4810                           
  4811                           ;main.c: 383: }
  4812                           ;main.c: 384: if(key == 11 && op_flag == 0 && one_flag == 0)
  4813  00112E  0E0B               	movlw	11
  4814  001130  1821               	xorwf	display_menu@key,w,c
  4815  001132  A4D8               	btfss	status,2,c
  4816  001134  D05B               	goto	l4685
  4817  001136  0100               	movlb	0	; () banked
  4818  001138  518F               	movf	_op_flag& (0+255),w,b
  4819  00113A  0100               	movlb	0	; () banked
  4820  00113C  1190               	iorwf	(_op_flag+1)& (0+255),w,b
  4821  00113E  A4D8               	btfss	status,2,c
  4822  001140  D055               	goto	l4685
  4823                           
  4824                           ; BSR set to: 0
  4825  001142  0100               	movlb	0	; () banked
  4826  001144  518D               	movf	_one_flag& (0+255),w,b
  4827  001146  0100               	movlb	0	; () banked
  4828  001148  118E               	iorwf	(_one_flag+1)& (0+255),w,b
  4829  00114A  A4D8               	btfss	status,2,c
  4830  00114C  D04F               	goto	l4685
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;main.c: 385: {
  4834                           ;main.c: 386: key11_wait++;
  4835  00114E  4A37               	infsnz	display_menu@key11_wait,f,c
  4836  001150  2A38               	incf	display_menu@key11_wait+1,f,c
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;main.c: 387: enter_flag = 0;
  4840  001152  0E00               	movlw	0
  4841  001154  0100               	movlb	0	; () banked
  4842  001156  6F84               	movwf	(_enter_flag+1)& (0+255),b
  4843  001158  0E00               	movlw	0
  4844  00115A  6F83               	movwf	_enter_flag& (0+255),b
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;main.c: 388: menu_flag = 2;
  4848  00115C  0E00               	movlw	0
  4849  00115E  6E34               	movwf	_menu_flag+1,c
  4850  001160  0E02               	movlw	2
  4851  001162  6E33               	movwf	_menu_flag,c
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;main.c: 389: clcd_putch(key11_wait % 10 + '0', (0x80 + (13)));
  4855  001164  0E8D               	movlw	141
  4856  001166  6E1B               	movwf	clcd_putch@addr,c
  4857  001168  C037  F016         	movff	display_menu@key11_wait,___lwmod@dividend
  4858  00116C  C038  F017         	movff	display_menu@key11_wait+1,___lwmod@dividend+1
  4859  001170  0E00               	movlw	0
  4860  001172  6E19               	movwf	___lwmod@divisor+1,c
  4861  001174  0E0A               	movlw	10
  4862  001176  6E18               	movwf	___lwmod@divisor,c
  4863  001178  EC51  F00F         	call	___lwmod	;wreg free
  4864  00117C  5016               	movf	?___lwmod,w,c
  4865  00117E  0F30               	addlw	48
  4866  001180  ECAC  F010         	call	_clcd_putch
  4867                           
  4868                           ;main.c: 390: clcd_putch((key11_wait / 10) % 10 + '0', (0x80 + (14)));
  4869  001184  0E8E               	movlw	142
  4870  001186  6E1B               	movwf	clcd_putch@addr,c
  4871  001188  0E00               	movlw	0
  4872  00118A  6E12               	movwf	___lwdiv@divisor+1,c
  4873  00118C  0E0A               	movlw	10
  4874  00118E  6E11               	movwf	___lwdiv@divisor,c
  4875  001190  C037  F00F         	movff	display_menu@key11_wait,___lwdiv@dividend
  4876  001194  C038  F010         	movff	display_menu@key11_wait+1,___lwdiv@dividend+1
  4877  001198  EC04  F00F         	call	___lwdiv	;wreg free
  4878  00119C  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  4879  0011A0  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  4880  0011A4  0E00               	movlw	0
  4881  0011A6  6E19               	movwf	___lwmod@divisor+1,c
  4882  0011A8  0E0A               	movlw	10
  4883  0011AA  6E18               	movwf	___lwmod@divisor,c
  4884  0011AC  EC51  F00F         	call	___lwmod	;wreg free
  4885  0011B0  5016               	movf	?___lwmod,w,c
  4886  0011B2  0F30               	addlw	48
  4887  0011B4  ECAC  F010         	call	_clcd_putch
  4888                           
  4889                           ;main.c: 391: clcd_putch((key11_wait /100) % 10 + '0', (0x80 + (15)));
  4890  0011B8  0E8F               	movlw	143
  4891  0011BA  6E1B               	movwf	clcd_putch@addr,c
  4892  0011BC  0E00               	movlw	0
  4893  0011BE  6E12               	movwf	___lwdiv@divisor+1,c
  4894  0011C0  0E64               	movlw	100
  4895  0011C2  6E11               	movwf	___lwdiv@divisor,c
  4896  0011C4  C037  F00F         	movff	display_menu@key11_wait,___lwdiv@dividend
  4897  0011C8  C038  F010         	movff	display_menu@key11_wait+1,___lwdiv@dividend+1
  4898  0011CC  EC04  F00F         	call	___lwdiv	;wreg free
  4899  0011D0  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  4900  0011D4  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  4901  0011D8  0E00               	movlw	0
  4902  0011DA  6E19               	movwf	___lwmod@divisor+1,c
  4903  0011DC  0E0A               	movlw	10
  4904  0011DE  6E18               	movwf	___lwmod@divisor,c
  4905  0011E0  EC51  F00F         	call	___lwmod	;wreg free
  4906  0011E4  5016               	movf	?___lwmod,w,c
  4907  0011E6  0F30               	addlw	48
  4908  0011E8  ECAC  F010         	call	_clcd_putch
  4909  0011EC                     l4685:
  4910                           
  4911                           ;main.c: 392: }
  4912                           ;main.c: 393: if(key11_wait >= 1000 && key == 11)
  4913  0011EC  0EE8               	movlw	232
  4914  0011EE  5C37               	subwf	display_menu@key11_wait,w,c
  4915  0011F0  0E03               	movlw	3
  4916  0011F2  5838               	subwfb	display_menu@key11_wait+1,w,c
  4917  0011F4  A0D8               	btfss	status,0,c
  4918  0011F6  D00D               	goto	l4691
  4919  0011F8  0E0B               	movlw	11
  4920  0011FA  1821               	xorwf	display_menu@key,w,c
  4921  0011FC  A4D8               	btfss	status,2,c
  4922  0011FE  D009               	goto	l4691
  4923                           
  4924                           ;main.c: 394: {
  4925                           ;main.c: 395: key11_wait = 0;
  4926  001200  0E00               	movlw	0
  4927  001202  6E38               	movwf	display_menu@key11_wait+1,c
  4928  001204  0E00               	movlw	0
  4929  001206  6E37               	movwf	display_menu@key11_wait,c
  4930                           
  4931                           ;main.c: 396: key11_wait_flag = 1;
  4932  001208  0E00               	movlw	0
  4933  00120A  0100               	movlb	0	; () banked
  4934  00120C  6F88               	movwf	(_key11_wait_flag+1)& (0+255),b
  4935  00120E  0E01               	movlw	1
  4936  001210  6F87               	movwf	_key11_wait_flag& (0+255),b
  4937  001212                     l4691:
  4938                           
  4939                           ;main.c: 397: }
  4940                           ;main.c: 398: if(key11_wait_flag == 1)
  4941  001212  0100               	movlb	0	; () banked
  4942  001214  0587               	decf	_key11_wait_flag& (0+255),w,b
  4943  001216  0100               	movlb	0	; () banked
  4944  001218  1188               	iorwf	(_key11_wait_flag+1)& (0+255),w,b
  4945  00121A  A4D8               	btfss	status,2,c
  4946  00121C  D018               	goto	l4697
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;main.c: 399: {
  4950                           ;main.c: 400: menu_flag = 0;
  4951  00121E  0E00               	movlw	0
  4952  001220  6E34               	movwf	_menu_flag+1,c
  4953  001222  0E00               	movlw	0
  4954  001224  6E33               	movwf	_menu_flag,c
  4955                           
  4956                           ;main.c: 401: node_flag = 0;
  4957  001226  0E00               	movlw	0
  4958  001228  0100               	movlb	0	; () banked
  4959  00122A  6F8C               	movwf	(_node_flag+1)& (0+255),b
  4960  00122C  0E00               	movlw	0
  4961  00122E  6F8B               	movwf	_node_flag& (0+255),b
  4962                           
  4963                           ;main.c: 402: log_flag = 0;
  4964  001230  0E00               	movlw	0
  4965  001232  0100               	movlb	0	; () banked
  4966  001234  6F8A               	movwf	(_log_flag+1)& (0+255),b
  4967  001236  0E00               	movlw	0
  4968  001238  6F89               	movwf	_log_flag& (0+255),b
  4969                           
  4970                           ;main.c: 403: op_flag = 1;
  4971  00123A  0E00               	movlw	0
  4972  00123C  0100               	movlb	0	; () banked
  4973  00123E  6F90               	movwf	(_op_flag+1)& (0+255),b
  4974  001240  0E01               	movlw	1
  4975  001242  6F8F               	movwf	_op_flag& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 404: clcd_write(0x01, 0);
  4979  001244  0E00               	movlw	0
  4980  001246  6E0F               	movwf	clcd_write@control_bit,c
  4981  001248  0E01               	movlw	1
  4982  00124A  EC43  F010         	call	_clcd_write
  4983  00124E                     l4697:
  4984                           
  4985                           ;main.c: 405: }
  4986                           ;main.c: 406: if(key11_wait < 500)
  4987  00124E  0EF4               	movlw	244
  4988  001250  5C37               	subwf	display_menu@key11_wait,w,c
  4989  001252  0E01               	movlw	1
  4990  001254  5838               	subwfb	display_menu@key11_wait+1,w,c
  4991  001256  B0D8               	btfsc	status,0,c
  4992  001258  0012               	return	
  4993                           
  4994                           ;main.c: 407: {
  4995                           ;main.c: 408: key11_wait_flag = 0;
  4996  00125A  0E00               	movlw	0
  4997  00125C  0100               	movlb	0	; () banked
  4998  00125E  6F88               	movwf	(_key11_wait_flag+1)& (0+255),b
  4999  001260  0E00               	movlw	0
  5000  001262  6F87               	movwf	_key11_wait_flag& (0+255),b
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;main.c: 409: if(key == 0xFF && (menu_flag == 1 || menu_flag == 2))
  5004  001264  2821               	incf	display_menu@key,w,c
  5005  001266  A4D8               	btfss	status,2,c
  5006  001268  D01B               	goto	l4709
  5007                           
  5008                           ; BSR set to: 0
  5009  00126A  0433               	decf	_menu_flag,w,c
  5010  00126C  1034               	iorwf	_menu_flag+1,w,c
  5011  00126E  B4D8               	btfsc	status,2,c
  5012  001270  D005               	goto	l4707
  5013                           
  5014                           ; BSR set to: 0
  5015  001272  0E02               	movlw	2
  5016  001274  1833               	xorwf	_menu_flag,w,c
  5017  001276  1034               	iorwf	_menu_flag+1,w,c
  5018  001278  A4D8               	btfss	status,2,c
  5019  00127A  D012               	goto	l4709
  5020  00127C                     l4707:
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;main.c: 410: {
  5024                           ;main.c: 411: one_flag = 0;
  5025  00127C  0E00               	movlw	0
  5026  00127E  0100               	movlb	0	; () banked
  5027  001280  6F8E               	movwf	(_one_flag+1)& (0+255),b
  5028  001282  0E00               	movlw	0
  5029  001284  6F8D               	movwf	_one_flag& (0+255),b
  5030                           
  5031                           ;main.c: 412: key11_wait = 0;
  5032  001286  0E00               	movlw	0
  5033  001288  6E38               	movwf	display_menu@key11_wait+1,c
  5034  00128A  0E00               	movlw	0
  5035  00128C  6E37               	movwf	display_menu@key11_wait,c
  5036                           
  5037                           ;main.c: 413: op_flag = 0;
  5038  00128E  0E00               	movlw	0
  5039  001290  0100               	movlb	0	; () banked
  5040  001292  6F90               	movwf	(_op_flag+1)& (0+255),b
  5041  001294  0E00               	movlw	0
  5042  001296  6F8F               	movwf	_op_flag& (0+255),b
  5043                           
  5044                           ;main.c: 414: menu_wait = 0;
  5045  001298  0E00               	movlw	0
  5046  00129A  6E3A               	movwf	display_menu@menu_wait+1,c
  5047  00129C  0E00               	movlw	0
  5048  00129E  6E39               	movwf	display_menu@menu_wait,c
  5049  0012A0                     l4709:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;main.c: 415: }
  5053                           ;main.c: 416: if(key == 0xFF && menu_flag == 1)
  5054  0012A0  2821               	incf	display_menu@key,w,c
  5055  0012A2  A4D8               	btfss	status,2,c
  5056  0012A4  D010               	goto	l4719
  5057                           
  5058                           ; BSR set to: 0
  5059  0012A6  0433               	decf	_menu_flag,w,c
  5060  0012A8  1034               	iorwf	_menu_flag+1,w,c
  5061  0012AA  A4D8               	btfss	status,2,c
  5062  0012AC  D00C               	goto	l4719
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;main.c: 417: {
  5066                           ;main.c: 418: if(count < 3)
  5067  0012AE  5036               	movf	display_menu@count+1,w,c
  5068  0012B0  E106               	bnz	l4717
  5069  0012B2  0E03               	movlw	3
  5070  0012B4  5C35               	subwf	display_menu@count,w,c
  5071  0012B6  B0D8               	btfsc	status,0,c
  5072  0012B8  D002               	goto	l4717
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;main.c: 419: count++;
  5076  0012BA  4A35               	infsnz	display_menu@count,f,c
  5077  0012BC  2A36               	incf	display_menu@count+1,f,c
  5078  0012BE                     l4717:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;main.c: 420: menu_flag = 0;
  5082  0012BE  0E00               	movlw	0
  5083  0012C0  6E34               	movwf	_menu_flag+1,c
  5084  0012C2  0E00               	movlw	0
  5085  0012C4  6E33               	movwf	_menu_flag,c
  5086  0012C6                     l4719:
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;main.c: 421: }
  5090                           ;main.c: 422: if(key == 0xFF && menu_flag == 2)
  5091  0012C6  2821               	incf	display_menu@key,w,c
  5092  0012C8  A4D8               	btfss	status,2,c
  5093  0012CA  D010               	goto	l4729
  5094                           
  5095                           ; BSR set to: 0
  5096  0012CC  0E02               	movlw	2
  5097  0012CE  1833               	xorwf	_menu_flag,w,c
  5098  0012D0  1034               	iorwf	_menu_flag+1,w,c
  5099  0012D2  A4D8               	btfss	status,2,c
  5100  0012D4  D00B               	goto	l4729
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;main.c: 423: {
  5104                           ;main.c: 424: if(count > 0)
  5105  0012D6  5035               	movf	display_menu@count,w,c
  5106  0012D8  1036               	iorwf	display_menu@count+1,w,c
  5107  0012DA  B4D8               	btfsc	status,2,c
  5108  0012DC  D003               	goto	l4727
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;main.c: 425: count--;
  5112  0012DE  0635               	decf	display_menu@count,f,c
  5113  0012E0  A0D8               	btfss	status,0,c
  5114  0012E2  0636               	decf	display_menu@count+1,f,c
  5115  0012E4                     l4727:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 426: menu_flag = 0;
  5119  0012E4  0E00               	movlw	0
  5120  0012E6  6E34               	movwf	_menu_flag+1,c
  5121  0012E8  0E00               	movlw	0
  5122  0012EA  6E33               	movwf	_menu_flag,c
  5123  0012EC                     l4729:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;main.c: 427: }
  5127                           ;main.c: 428: if(count < 4 && count >= 0 && key == 0xFF && op_flag == 0)
  5128  0012EC  5036               	movf	display_menu@count+1,w,c
  5129  0012EE  E138               	bnz	l460
  5130  0012F0  0E04               	movlw	4
  5131  0012F2  5C35               	subwf	display_menu@count,w,c
  5132  0012F4  B0D8               	btfsc	status,0,c
  5133  0012F6  0012               	return	
  5134                           
  5135                           ; BSR set to: 0
  5136  0012F8  2821               	incf	display_menu@key,w,c
  5137  0012FA  A4D8               	btfss	status,2,c
  5138  0012FC  0012               	return	
  5139                           
  5140                           ; BSR set to: 0
  5141  0012FE  0100               	movlb	0	; () banked
  5142  001300  518F               	movf	_op_flag& (0+255),w,b
  5143  001302  0100               	movlb	0	; () banked
  5144  001304  1190               	iorwf	(_op_flag+1)& (0+255),w,b
  5145  001306  A4D8               	btfss	status,2,c
  5146  001308  0012               	return	
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;main.c: 429: {
  5150                           ;main.c: 430: clcd_print(menu[count], (0x80 + (1)));
  5151  00130A  C035  F00F         	movff	display_menu@count,___wmul@multiplier
  5152  00130E  C036  F010         	movff	display_menu@count+1,___wmul@multiplier+1
  5153  001312  0E00               	movlw	0
  5154  001314  6E12               	movwf	___wmul@multiplicand+1,c
  5155  001316  0E11               	movlw	17
  5156  001318  6E11               	movwf	___wmul@multiplicand,c
  5157  00131A  EC57  F010         	call	___wmul	;wreg free
  5158  00131E  0E00               	movlw	low _menu
  5159  001320  240F               	addwf	?___wmul,w,c
  5160  001322  6E15               	movwf	clcd_print@data,c
  5161  001324  0E01               	movlw	high _menu
  5162  001326  2010               	addwfc	?___wmul+1,w,c
  5163  001328  6E16               	movwf	clcd_print@data+1,c
  5164  00132A  0E81               	movlw	129
  5165  00132C  6E17               	movwf	clcd_print@addr,c
  5166  00132E  ECA9  F00E         	call	_clcd_print	;wreg free
  5167                           
  5168                           ;main.c: 431: clcd_print(menu[count + 1], (0xC0 + (1)));
  5169  001332  0E01               	movlw	1
  5170  001334  2435               	addwf	display_menu@count,w,c
  5171  001336  6E0F               	movwf	___wmul@multiplier,c
  5172  001338  0E00               	movlw	0
  5173  00133A  2036               	addwfc	display_menu@count+1,w,c
  5174  00133C  6E10               	movwf	___wmul@multiplier+1,c
  5175  00133E  0E00               	movlw	0
  5176  001340  6E12               	movwf	___wmul@multiplicand+1,c
  5177  001342  0E11               	movlw	17
  5178  001344  6E11               	movwf	___wmul@multiplicand,c
  5179  001346  EC57  F010         	call	___wmul	;wreg free
  5180  00134A  0E00               	movlw	low _menu
  5181  00134C  240F               	addwf	?___wmul,w,c
  5182  00134E  6E15               	movwf	clcd_print@data,c
  5183  001350  0E01               	movlw	high _menu
  5184  001352  2010               	addwfc	?___wmul+1,w,c
  5185  001354  6E16               	movwf	clcd_print@data+1,c
  5186  001356  0EC1               	movlw	193
  5187  001358  6E17               	movwf	clcd_print@addr,c
  5188  00135A  ECA9  F00E         	call	_clcd_print	;wreg free
  5189  00135E  0012               	return	
  5190  001360                     l460:
  5191  001360  0012               	return		;funcret
  5192  001362                     __end_of_display_menu:
  5193                           	opt stack 0
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon2	equ	0xFF1
  5201                           postinc0	equ	0xFEE
  5202                           wreg	equ	0xFE8
  5203                           indf1	equ	0xFE7
  5204                           postinc1	equ	0xFE6
  5205                           postdec1	equ	0xFE5
  5206                           fsr1h	equ	0xFE2
  5207                           fsr1l	equ	0xFE1
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214 ;; *************** function _log_fun *****************
  5215 ;; Defined at:
  5216 ;;		line 438 in file "main.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  count           2   28[COMRAM] unsigned short 
  5219 ;;  limit           2   30[COMRAM] unsigned short 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  i               4    8[BANK0 ] long 
  5222 ;;  i               4    4[BANK0 ] long 
  5223 ;;  i               4    0[BANK0 ] long 
  5224 ;;  k               2   16[BANK0 ] int 
  5225 ;;  j               2   12[BANK0 ] int 
  5226 ;;  i               2   18[BANK0 ] int 
  5227 ;;  j               2   14[BANK0 ] int 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  1    wreg      void 
  5230 ;; Registers used:
  5231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5237 ;;      Params:         4       0       0       0       0       0       0
  5238 ;;      Locals:         0      20       0       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0       0       0
  5240 ;;      Totals:         4      20       0       0       0       0       0
  5241 ;;Total ram usage:       24 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    5
  5244 ;; This function calls:
  5245 ;;		_clcd_print
  5246 ;;		_clcd_putch
  5247 ;;		_clcd_write
  5248 ;;		_init_uart
  5249 ;;		_putch
  5250 ;;		_puts
  5251 ;;		_read_ext_eeprom
  5252 ;;		_read_switches
  5253 ;;		_write_ext_eeprom
  5254 ;; This function is called by:
  5255 ;;		_display_menu
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text21
  5260  0006AE                     __ptext21:
  5261                           	opt stack 0
  5262  0006AE                     _log_fun:
  5263                           	opt stack 24
  5264                           
  5265                           ;main.c: 440: static signed short event_num;
  5266                           ;main.c: 442: static unsigned short view_flag;
  5267                           ;main.c: 443: static int i, j;
  5268                           ;main.c: 444: static int wait;
  5269                           ;main.c: 445: static unsigned char key;
  5270                           ;main.c: 446: PEIE = 1;
  5271                           
  5272                           ;incstack = 0
  5273  0006AE  8CF2               	bsf	intcon,6,c	;volatile
  5274                           
  5275                           ;main.c: 447: GIE = 1;
  5276  0006B0  8EF2               	bsf	intcon,7,c	;volatile
  5277                           
  5278                           ;main.c: 448: clcd_print("   Event Log   ",(0x80 + (0)));
  5279  0006B2  0E56               	movlw	low STR_11
  5280  0006B4  6E15               	movwf	clcd_print@data,c
  5281  0006B6  0E06               	movlw	high STR_11
  5282  0006B8  6E16               	movwf	clcd_print@data+1,c
  5283  0006BA  0E80               	movlw	128
  5284  0006BC  6E17               	movwf	clcd_print@addr,c
  5285  0006BE  ECA9  F00E         	call	_clcd_print	;wreg free
  5286                           
  5287                           ;main.c: 450: key = read_switches(0);
  5288  0006C2  0E00               	movlw	0
  5289  0006C4  EC72  F00F         	call	_read_switches
  5290  0006C8  6E49               	movwf	log_fun@key,c
  5291                           
  5292                           ;main.c: 451: if(key == 10)
  5293  0006CA  0E0A               	movlw	10
  5294  0006CC  1849               	xorwf	log_fun@key,w,c
  5295  0006CE  A4D8               	btfss	status,2,c
  5296  0006D0  D005               	goto	l4057
  5297                           
  5298                           ;main.c: 452: {
  5299                           ;main.c: 453: view_flag = 1;
  5300  0006D2  0E00               	movlw	0
  5301  0006D4  0100               	movlb	0	; () banked
  5302  0006D6  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  5303  0006D8  0E01               	movlw	1
  5304  0006DA  6FAB               	movwf	log_fun@view_flag& (0+255),b
  5305  0006DC                     l4057:
  5306                           
  5307                           ;main.c: 454: }
  5308                           ;main.c: 455: if(key == 11)
  5309  0006DC  0E0B               	movlw	11
  5310  0006DE  1849               	xorwf	log_fun@key,w,c
  5311  0006E0  A4D8               	btfss	status,2,c
  5312  0006E2  D008               	goto	l4063
  5313                           
  5314                           ;main.c: 456: {
  5315                           ;main.c: 457: view_flag = 2;
  5316  0006E4  0E00               	movlw	0
  5317  0006E6  0100               	movlb	0	; () banked
  5318  0006E8  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  5319  0006EA  0E02               	movlw	2
  5320  0006EC  6FAB               	movwf	log_fun@view_flag& (0+255),b
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;main.c: 458: wait++;
  5324  0006EE  0100               	movlb	0	; () banked
  5325  0006F0  4BAD               	infsnz	log_fun@wait& (0+255),f,b
  5326  0006F2  2BAE               	incf	(log_fun@wait+1)& (0+255),f,b
  5327  0006F4                     l4063:
  5328                           
  5329                           ;main.c: 459: }
  5330                           ;main.c: 460: if(wait > 500 && key == 11)
  5331  0006F4  0100               	movlb	0	; () banked
  5332  0006F6  BFAE               	btfsc	(log_fun@wait+1)& (0+255),7,b
  5333  0006F8  D016               	goto	l4069
  5334  0006FA  0EF5               	movlw	245
  5335  0006FC  0100               	movlb	0	; () banked
  5336  0006FE  5DAD               	subwf	log_fun@wait& (0+255),w,b
  5337  000700  0E01               	movlw	1
  5338  000702  0100               	movlb	0	; () banked
  5339  000704  59AE               	subwfb	(log_fun@wait+1)& (0+255),w,b
  5340  000706  A0D8               	btfss	status,0,c
  5341  000708  D00E               	goto	l4069
  5342                           
  5343                           ; BSR set to: 0
  5344  00070A  0E0B               	movlw	11
  5345  00070C  1849               	xorwf	log_fun@key,w,c
  5346  00070E  A4D8               	btfss	status,2,c
  5347  000710  D00A               	goto	l4069
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;main.c: 461: {
  5351                           ;main.c: 462: wait = 0;
  5352  000712  0E00               	movlw	0
  5353  000714  0100               	movlb	0	; () banked
  5354  000716  6FAE               	movwf	(log_fun@wait+1)& (0+255),b
  5355  000718  0E00               	movlw	0
  5356  00071A  6FAD               	movwf	log_fun@wait& (0+255),b
  5357                           
  5358                           ;main.c: 463: key11_flag = 1;
  5359  00071C  0E00               	movlw	0
  5360  00071E  0100               	movlb	0	; () banked
  5361  000720  6F86               	movwf	(_key11_flag+1)& (0+255),b
  5362  000722  0E01               	movlw	1
  5363  000724  6F85               	movwf	_key11_flag& (0+255),b
  5364  000726                     l4069:
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;main.c: 464: }
  5368                           ;main.c: 465: if(key11_flag == 1)
  5369  000726  0100               	movlb	0	; () banked
  5370  000728  0585               	decf	_key11_flag& (0+255),w,b
  5371  00072A  0100               	movlb	0	; () banked
  5372  00072C  1186               	iorwf	(_key11_flag+1)& (0+255),w,b
  5373  00072E  A4D8               	btfss	status,2,c
  5374  000730  D022               	goto	l4075
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;main.c: 466: {
  5378                           ;main.c: 467: one_flag = 1;
  5379  000732  0E00               	movlw	0
  5380  000734  0100               	movlb	0	; () banked
  5381  000736  6F8E               	movwf	(_one_flag+1)& (0+255),b
  5382  000738  0E01               	movlw	1
  5383  00073A  6F8D               	movwf	_one_flag& (0+255),b
  5384                           
  5385                           ;main.c: 468: menu_flag = 1;
  5386  00073C  0E00               	movlw	0
  5387  00073E  6E34               	movwf	_menu_flag+1,c
  5388  000740  0E01               	movlw	1
  5389  000742  6E33               	movwf	_menu_flag,c
  5390                           
  5391                           ;main.c: 469: enter_flag = 0;
  5392  000744  0E00               	movlw	0
  5393  000746  0100               	movlb	0	; () banked
  5394  000748  6F84               	movwf	(_enter_flag+1)& (0+255),b
  5395  00074A  0E00               	movlw	0
  5396  00074C  6F83               	movwf	_enter_flag& (0+255),b
  5397                           
  5398                           ;main.c: 470: op_flag = 0;
  5399  00074E  0E00               	movlw	0
  5400  000750  0100               	movlb	0	; () banked
  5401  000752  6F90               	movwf	(_op_flag+1)& (0+255),b
  5402  000754  0E00               	movlw	0
  5403  000756  6F8F               	movwf	_op_flag& (0+255),b
  5404                           
  5405                           ;main.c: 471: view_flag = 0;
  5406  000758  0E00               	movlw	0
  5407  00075A  0100               	movlb	0	; () banked
  5408  00075C  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  5409  00075E  0E00               	movlw	0
  5410  000760  6FAB               	movwf	log_fun@view_flag& (0+255),b
  5411                           
  5412                           ;main.c: 472: log_flag = 1;
  5413  000762  0E00               	movlw	0
  5414  000764  0100               	movlb	0	; () banked
  5415  000766  6F8A               	movwf	(_log_flag+1)& (0+255),b
  5416  000768  0E01               	movlw	1
  5417  00076A  6F89               	movwf	_log_flag& (0+255),b
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;main.c: 473: clcd_write(0x01, 0);
  5421  00076C  0E00               	movlw	0
  5422  00076E  6E0F               	movwf	clcd_write@control_bit,c
  5423  000770  0E01               	movlw	1
  5424  000772  EC43  F010         	call	_clcd_write
  5425  000776                     l4075:
  5426                           
  5427                           ;main.c: 474: }
  5428                           ;main.c: 475: if(key == 0xFF && view_flag == 1)
  5429  000776  2849               	incf	log_fun@key,w,c
  5430  000778  A4D8               	btfss	status,2,c
  5431  00077A  D00D               	goto	l4083
  5432  00077C  0100               	movlb	0	; () banked
  5433  00077E  05AB               	decf	log_fun@view_flag& (0+255),w,b
  5434  000780  0100               	movlb	0	; () banked
  5435  000782  11AC               	iorwf	(log_fun@view_flag+1)& (0+255),w,b
  5436  000784  A4D8               	btfss	status,2,c
  5437  000786  D007               	goto	l4083
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;main.c: 476: {
  5441                           ;main.c: 477: event_num++;
  5442  000788  4A45               	infsnz	log_fun@event_num,f,c
  5443  00078A  2A46               	incf	log_fun@event_num+1,f,c
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;main.c: 478: view_flag = 0;
  5447  00078C  0E00               	movlw	0
  5448  00078E  0100               	movlb	0	; () banked
  5449  000790  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  5450  000792  0E00               	movlw	0
  5451  000794  6FAB               	movwf	log_fun@view_flag& (0+255),b
  5452  000796                     l4083:
  5453                           
  5454                           ;main.c: 479: }
  5455                           ;main.c: 480: if(key == 0xFF && view_flag == 2 && wait < 500)
  5456  000796  2849               	incf	log_fun@key,w,c
  5457  000798  A4D8               	btfss	status,2,c
  5458  00079A  D01F               	goto	l4095
  5459  00079C  0E02               	movlw	2
  5460  00079E  0100               	movlb	0	; () banked
  5461  0007A0  19AB               	xorwf	log_fun@view_flag& (0+255),w,b
  5462  0007A2  0100               	movlb	0	; () banked
  5463  0007A4  11AC               	iorwf	(log_fun@view_flag+1)& (0+255),w,b
  5464  0007A6  A4D8               	btfss	status,2,c
  5465  0007A8  D018               	goto	l4095
  5466                           
  5467                           ; BSR set to: 0
  5468  0007AA  0100               	movlb	0	; () banked
  5469  0007AC  BFAE               	btfsc	(log_fun@wait+1)& (0+255),7,b
  5470  0007AE  D008               	goto	l4089
  5471  0007B0  0EF4               	movlw	244
  5472  0007B2  0100               	movlb	0	; () banked
  5473  0007B4  5DAD               	subwf	log_fun@wait& (0+255),w,b
  5474  0007B6  0E01               	movlw	1
  5475  0007B8  0100               	movlb	0	; () banked
  5476  0007BA  59AE               	subwfb	(log_fun@wait+1)& (0+255),w,b
  5477  0007BC  B0D8               	btfsc	status,0,c
  5478  0007BE  D00D               	goto	l4095
  5479  0007C0                     l4089:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;main.c: 481: {
  5483                           ;main.c: 482: wait_flag = 0;
  5484  0007C0  0E00               	movlw	0
  5485  0007C2  0100               	movlb	0	; () banked
  5486  0007C4  6F92               	movwf	(_wait_flag+1)& (0+255),b
  5487  0007C6  0E00               	movlw	0
  5488  0007C8  6F91               	movwf	_wait_flag& (0+255),b
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;main.c: 483: event_num--;
  5492  0007CA  0645               	decf	log_fun@event_num,f,c
  5493  0007CC  A0D8               	btfss	status,0,c
  5494  0007CE  0646               	decf	log_fun@event_num+1,f,c
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;main.c: 484: view_flag = 0;
  5498  0007D0  0E00               	movlw	0
  5499  0007D2  0100               	movlb	0	; () banked
  5500  0007D4  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  5501  0007D6  0E00               	movlw	0
  5502  0007D8  6FAB               	movwf	log_fun@view_flag& (0+255),b
  5503  0007DA                     l4095:
  5504                           
  5505                           ;main.c: 485: }
  5506                           ;main.c: 486: if(key11_flag == 0)
  5507  0007DA  0100               	movlb	0	; () banked
  5508  0007DC  5185               	movf	_key11_flag& (0+255),w,b
  5509  0007DE  0100               	movlb	0	; () banked
  5510  0007E0  1186               	iorwf	(_key11_flag+1)& (0+255),w,b
  5511  0007E2  A4D8               	btfss	status,2,c
  5512  0007E4  0012               	return	
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;main.c: 487: {
  5516                           ;main.c: 488: if(count == 0)
  5517  0007E6  501D               	movf	log_fun@count,w,c
  5518  0007E8  101E               	iorwf	log_fun@count+1,w,c
  5519  0007EA  A4D8               	btfss	status,2,c
  5520  0007EC  D05F               	goto	l4133
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;main.c: 489: {
  5524                           ;main.c: 490: if(event_num < limit && event_num > 0)
  5525  0007EE  501F               	movf	log_fun@limit,w,c
  5526  0007F0  5C45               	subwf	log_fun@event_num,w,c
  5527  0007F2  5020               	movf	log_fun@limit+1,w,c
  5528  0007F4  5846               	subwfb	log_fun@event_num+1,w,c
  5529  0007F6  B0D8               	btfsc	status,0,c
  5530  0007F8  0012               	return	
  5531                           
  5532                           ; BSR set to: 0
  5533  0007FA  BE46               	btfsc	log_fun@event_num+1,7,c
  5534  0007FC  0012               	return	
  5535  0007FE  5046               	movf	log_fun@event_num+1,w,c
  5536  000800  E103               	bnz	u4240
  5537  000802  0445               	decf	log_fun@event_num,w,c
  5538  000804  A0D8               	btfss	status,0,c
  5539  000806  0012               	return	
  5540  000808                     u4240:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;main.c: 491: {
  5544                           ;main.c: 492: clcd_putch(event_num +'0',(0xC0 + (0)));
  5545  000808  0EC0               	movlw	192
  5546  00080A  6E1B               	movwf	clcd_putch@addr,c
  5547  00080C  5045               	movf	log_fun@event_num,w,c
  5548  00080E  0F30               	addlw	48
  5549  000810  ECAC  F010         	call	_clcd_putch
  5550                           
  5551                           ;main.c: 493: int j = 0;
  5552  000814  0E00               	movlw	0
  5553  000816  0100               	movlb	0	; () banked
  5554  000818  6FE4               	movwf	(log_fun@j_366+1)& (0+255),b
  5555  00081A  0E00               	movlw	0
  5556  00081C  6FE3               	movwf	log_fun@j_366& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;main.c: 494: for(i = 1; i < 17; i++)
  5560  00081E  0E00               	movlw	0
  5561  000820  6E48               	movwf	log_fun@i+1,c
  5562  000822  0E01               	movlw	1
  5563  000824  6E47               	movwf	log_fun@i,c
  5564                           
  5565                           ; BSR set to: 0
  5566  000826  BE48               	btfsc	log_fun@i+1,7,c
  5567  000828  D008               	goto	l4113
  5568  00082A  5048               	movf	log_fun@i+1,w,c
  5569  00082C  E105               	bnz	u4250
  5570  00082E  0E11               	movlw	17
  5571  000830  5C47               	subwf	log_fun@i,w,c
  5572  000832  B0D8               	btfsc	status,0,c
  5573  000834  0012               	return	
  5574  000836  D001               	goto	l4113
  5575  000838                     u4250:
  5576                           
  5577                           ; BSR set to: 0
  5578  000838  0012               	return	
  5579  00083A                     l4113:
  5580                           
  5581                           ;main.c: 495: {
  5582                           ;main.c: 496: if(i == 3 || i == 6)
  5583  00083A  0E03               	movlw	3
  5584  00083C  1847               	xorwf	log_fun@i,w,c
  5585  00083E  1048               	iorwf	log_fun@i+1,w,c
  5586  000840  B4D8               	btfsc	status,2,c
  5587  000842  D005               	goto	l4117
  5588  000844  0E06               	movlw	6
  5589  000846  1847               	xorwf	log_fun@i,w,c
  5590  000848  1048               	iorwf	log_fun@i+1,w,c
  5591  00084A  A4D8               	btfss	status,2,c
  5592  00084C  D007               	goto	l4119
  5593  00084E                     l4117:
  5594                           
  5595                           ;main.c: 497: {
  5596                           ;main.c: 498: clcd_putch(':',(0xC0 + (i)));
  5597  00084E  5047               	movf	log_fun@i,w,c
  5598  000850  0FC0               	addlw	192
  5599  000852  6E1B               	movwf	clcd_putch@addr,c
  5600  000854  0E3A               	movlw	58
  5601  000856  ECAC  F010         	call	_clcd_putch
  5602                           
  5603                           ;main.c: 499: }
  5604  00085A  D020               	goto	l4129
  5605  00085C                     l4119:
  5606                           
  5607                           ;main.c: 500: else if(i == 9 || i == 12)
  5608  00085C  0E09               	movlw	9
  5609  00085E  1847               	xorwf	log_fun@i,w,c
  5610  000860  1048               	iorwf	log_fun@i+1,w,c
  5611  000862  B4D8               	btfsc	status,2,c
  5612  000864  D005               	goto	l4123
  5613  000866  0E0C               	movlw	12
  5614  000868  1847               	xorwf	log_fun@i,w,c
  5615  00086A  1048               	iorwf	log_fun@i+1,w,c
  5616  00086C  A4D8               	btfss	status,2,c
  5617  00086E  D007               	goto	l4125
  5618  000870                     l4123:
  5619                           
  5620                           ;main.c: 501: {
  5621                           ;main.c: 502: clcd_putch(' ',(0xC0 + (i)));
  5622  000870  5047               	movf	log_fun@i,w,c
  5623  000872  0FC0               	addlw	192
  5624  000874  6E1B               	movwf	clcd_putch@addr,c
  5625  000876  0E20               	movlw	32
  5626  000878  ECAC  F010         	call	_clcd_putch
  5627                           
  5628                           ;main.c: 503: }
  5629  00087C  D00F               	goto	l4129
  5630  00087E                     l4125:
  5631                           
  5632                           ;main.c: 504: else
  5633                           ;main.c: 505: {
  5634                           ;main.c: 506: clcd_putch((read_ext_eeprom(event_num* 10 + j)), (0xC0 + (i)));
  5635  00087E  5047               	movf	log_fun@i,w,c
  5636  000880  0FC0               	addlw	192
  5637  000882  6E1B               	movwf	clcd_putch@addr,c
  5638  000884  5045               	movf	log_fun@event_num,w,c
  5639  000886  0D0A               	mullw	10
  5640  000888  50F3               	movf	prodl,w,c
  5641  00088A  0100               	movlb	0	; () banked
  5642  00088C  25E3               	addwf	log_fun@j_366& (0+255),w,b
  5643  00088E  EC19  F010         	call	_read_ext_eeprom
  5644  000892  ECAC  F010         	call	_clcd_putch
  5645                           
  5646                           ;main.c: 507: j++;
  5647  000896  0100               	movlb	0	; () banked
  5648  000898  4BE3               	infsnz	log_fun@j_366& (0+255),f,b
  5649  00089A  2BE4               	incf	(log_fun@j_366+1)& (0+255),f,b
  5650  00089C                     l4129:
  5651  00089C  4A47               	infsnz	log_fun@i,f,c
  5652  00089E  2A48               	incf	log_fun@i+1,f,c
  5653  0008A0  BE48               	btfsc	log_fun@i+1,7,c
  5654  0008A2  D7CB               	goto	l4113
  5655  0008A4  5048               	movf	log_fun@i+1,w,c
  5656  0008A6  E101               	bnz	u4300
  5657  0008A8  D7C2               	goto	L2
  5658  0008AA                     u4300:
  5659                           
  5660                           ;main.c: 508: }
  5661                           ;main.c: 509: }
  5662                           ;main.c: 510: }
  5663                           ;main.c: 511: }
  5664  0008AA  0012               	return	
  5665  0008AC                     l4133:
  5666                           
  5667                           ;main.c: 512: else if(count == 1)
  5668  0008AC  041D               	decf	log_fun@count,w,c
  5669  0008AE  101E               	iorwf	log_fun@count+1,w,c
  5670  0008B0  A4D8               	btfss	status,2,c
  5671  0008B2  D0B7               	goto	l4201
  5672                           
  5673                           ;main.c: 513: {
  5674                           ;main.c: 514: int i, j = 0;
  5675  0008B4  0E00               	movlw	0
  5676  0008B6  0100               	movlb	0	; () banked
  5677  0008B8  6FE6               	movwf	(log_fun@j_368+1)& (0+255),b
  5678  0008BA  0E00               	movlw	0
  5679  0008BC  6FE5               	movwf	log_fun@j_368& (0+255),b
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;main.c: 515: PEIE = 0;
  5683  0008BE  9CF2               	bcf	intcon,6,c	;volatile
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;main.c: 516: GIE = 0;
  5687  0008C0  9EF2               	bcf	intcon,7,c	;volatile
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;main.c: 517: init_uart();
  5691  0008C2  EC91  F00F         	call	_init_uart	;wreg free
  5692                           
  5693                           ;main.c: 518: for(int k = 0; k < count_event; k++)
  5694  0008C6  0E00               	movlw	0
  5695  0008C8  0100               	movlb	0	; () banked
  5696  0008CA  6FE8               	movwf	(log_fun@k+1)& (0+255),b
  5697  0008CC  0E00               	movlw	0
  5698  0008CE  6FE7               	movwf	log_fun@k& (0+255),b
  5699  0008D0  D053               	goto	l4175
  5700  0008D2                     l4145:
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;main.c: 519: {
  5704                           ;main.c: 520: j = 0;
  5705  0008D2  0E00               	movlw	0
  5706  0008D4  0100               	movlb	0	; () banked
  5707  0008D6  6FE6               	movwf	(log_fun@j_368+1)& (0+255),b
  5708  0008D8  0E00               	movlw	0
  5709  0008DA  6FE5               	movwf	log_fun@j_368& (0+255),b
  5710                           
  5711                           ;main.c: 521: for(i = 0; i < 15; i++)
  5712  0008DC  0E00               	movlw	0
  5713  0008DE  0100               	movlb	0	; () banked
  5714  0008E0  6FEA               	movwf	(log_fun@i_367+1)& (0+255),b
  5715  0008E2  0E00               	movlw	0
  5716  0008E4  6FE9               	movwf	log_fun@i_367& (0+255),b
  5717  0008E6                     l4147:
  5718                           
  5719                           ; BSR set to: 0
  5720  0008E6  0100               	movlb	0	; () banked
  5721  0008E8  BFEA               	btfsc	(log_fun@i_367+1)& (0+255),7,b
  5722  0008EA  D008               	goto	l4151
  5723  0008EC  0100               	movlb	0	; () banked
  5724  0008EE  51EA               	movf	(log_fun@i_367+1)& (0+255),w,b
  5725  0008F0  E13A               	bnz	l4171
  5726  0008F2  0E0F               	movlw	15
  5727  0008F4  0100               	movlb	0	; () banked
  5728  0008F6  5DE9               	subwf	log_fun@i_367& (0+255),w,b
  5729  0008F8  B0D8               	btfsc	status,0,c
  5730  0008FA  D035               	goto	l4171
  5731  0008FC                     l4151:
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;main.c: 522: {
  5735                           ;main.c: 523: if(i == 2 || i == 5)
  5736  0008FC  0E02               	movlw	2
  5737  0008FE  0100               	movlb	0	; () banked
  5738  000900  19E9               	xorwf	log_fun@i_367& (0+255),w,b
  5739  000902  0100               	movlb	0	; () banked
  5740  000904  11EA               	iorwf	(log_fun@i_367+1)& (0+255),w,b
  5741  000906  B4D8               	btfsc	status,2,c
  5742  000908  D007               	goto	l4155
  5743                           
  5744                           ; BSR set to: 0
  5745  00090A  0E05               	movlw	5
  5746  00090C  0100               	movlb	0	; () banked
  5747  00090E  19E9               	xorwf	log_fun@i_367& (0+255),w,b
  5748  000910  0100               	movlb	0	; () banked
  5749  000912  11EA               	iorwf	(log_fun@i_367+1)& (0+255),w,b
  5750  000914  A4D8               	btfss	status,2,c
  5751  000916  D004               	goto	l4157
  5752  000918                     l4155:
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;main.c: 524: {
  5756                           ;main.c: 525: putch(':');
  5757  000918  0E3A               	movlw	58
  5758  00091A  ECE1  F010         	call	_putch
  5759                           
  5760                           ;main.c: 526: }
  5761  00091E  D01F               	goto	l4167
  5762  000920                     l4157:
  5763                           
  5764                           ;main.c: 527: else if(i == 8 || i == 11)
  5765  000920  0E08               	movlw	8
  5766  000922  0100               	movlb	0	; () banked
  5767  000924  19E9               	xorwf	log_fun@i_367& (0+255),w,b
  5768  000926  0100               	movlb	0	; () banked
  5769  000928  11EA               	iorwf	(log_fun@i_367+1)& (0+255),w,b
  5770  00092A  B4D8               	btfsc	status,2,c
  5771  00092C  D007               	goto	l4161
  5772                           
  5773                           ; BSR set to: 0
  5774  00092E  0E0B               	movlw	11
  5775  000930  0100               	movlb	0	; () banked
  5776  000932  19E9               	xorwf	log_fun@i_367& (0+255),w,b
  5777  000934  0100               	movlb	0	; () banked
  5778  000936  11EA               	iorwf	(log_fun@i_367+1)& (0+255),w,b
  5779  000938  A4D8               	btfss	status,2,c
  5780  00093A  D004               	goto	l4163
  5781  00093C                     l4161:
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;main.c: 528: {
  5785                           ;main.c: 529: putch(' ');
  5786  00093C  0E20               	movlw	32
  5787  00093E  ECE1  F010         	call	_putch
  5788                           
  5789                           ;main.c: 530: }
  5790  000942  D00D               	goto	l4167
  5791  000944                     l4163:
  5792                           
  5793                           ;main.c: 531: else
  5794                           ;main.c: 532: {
  5795                           ;main.c: 533: putch(read_ext_eeprom(k * 10 + j));
  5796  000944  0100               	movlb	0	; () banked
  5797  000946  51E7               	movf	log_fun@k& (0+255),w,b
  5798  000948  0D0A               	mullw	10
  5799  00094A  50F3               	movf	prodl,w,c
  5800  00094C  0100               	movlb	0	; () banked
  5801  00094E  25E5               	addwf	log_fun@j_368& (0+255),w,b
  5802  000950  EC19  F010         	call	_read_ext_eeprom
  5803  000954  ECE1  F010         	call	_putch
  5804                           
  5805                           ;main.c: 534: j++;
  5806  000958  0100               	movlb	0	; () banked
  5807  00095A  4BE5               	infsnz	log_fun@j_368& (0+255),f,b
  5808  00095C  2BE6               	incf	(log_fun@j_368+1)& (0+255),f,b
  5809  00095E                     l4167:
  5810  00095E  0100               	movlb	0	; () banked
  5811  000960  4BE9               	infsnz	log_fun@i_367& (0+255),f,b
  5812  000962  2BEA               	incf	(log_fun@i_367+1)& (0+255),f,b
  5813  000964  D7C0               	goto	l4147
  5814  000966                     l4171:
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;main.c: 535: }
  5818                           ;main.c: 536: }puts("\n\r");
  5819  000966  0EA7               	movlw	low STR_12
  5820  000968  6E10               	movwf	puts@s,c
  5821  00096A  0E06               	movlw	high STR_12
  5822  00096C  6E11               	movwf	puts@s+1,c
  5823  00096E  EC2E  F010         	call	_puts	;wreg free
  5824  000972  0100               	movlb	0	; () banked
  5825  000974  4BE7               	infsnz	log_fun@k& (0+255),f,b
  5826  000976  2BE8               	incf	(log_fun@k+1)& (0+255),f,b
  5827  000978                     l4175:
  5828                           
  5829                           ; BSR set to: 0
  5830  000978  5031               	movf	_count_event,w,c
  5831  00097A  0100               	movlb	0	; () banked
  5832  00097C  5DE7               	subwf	log_fun@k& (0+255),w,b
  5833  00097E  5032               	movf	_count_event+1,w,c
  5834  000980  0100               	movlb	0	; () banked
  5835  000982  59E8               	subwfb	(log_fun@k+1)& (0+255),w,b
  5836  000984  A0D8               	btfss	status,0,c
  5837  000986  D7A5               	goto	l4145
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;main.c: 537: }
  5841                           ;main.c: 538: clcd_write(0x01, 0);
  5842                           
  5843                           ; BSR set to: 0
  5844  000988  0E00               	movlw	0
  5845  00098A  6E0F               	movwf	clcd_write@control_bit,c
  5846  00098C  0E01               	movlw	1
  5847  00098E  EC43  F010         	call	_clcd_write
  5848                           
  5849                           ;main.c: 539: clcd_print("Files downloaded",(0xC0 + (0)));
  5850  000992  0E23               	movlw	low STR_13
  5851  000994  6E15               	movwf	clcd_print@data,c
  5852  000996  0E06               	movlw	high STR_13
  5853  000998  6E16               	movwf	clcd_print@data+1,c
  5854  00099A  0EC0               	movlw	192
  5855  00099C  6E17               	movwf	clcd_print@addr,c
  5856  00099E  ECA9  F00E         	call	_clcd_print	;wreg free
  5857                           
  5858                           ;main.c: 540: for(long i = 500000; i--;);
  5859  0009A2  0E20               	movlw	32
  5860  0009A4  0100               	movlb	0	; () banked
  5861  0009A6  6FD7               	movwf	log_fun@i_374& (0+255),b
  5862  0009A8  0EA1               	movlw	161
  5863  0009AA  6FD8               	movwf	(log_fun@i_374+1)& (0+255),b
  5864  0009AC  0E07               	movlw	7
  5865  0009AE  6FD9               	movwf	(log_fun@i_374+2)& (0+255),b
  5866  0009B0  0E00               	movlw	0
  5867  0009B2  6FDA               	movwf	(log_fun@i_374+3)& (0+255),b
  5868  0009B4                     l4183:
  5869                           
  5870                           ; BSR set to: 0
  5871  0009B4  0EFF               	movlw	255
  5872  0009B6  0100               	movlb	0	; () banked
  5873  0009B8  27D7               	addwf	log_fun@i_374& (0+255),f,b
  5874  0009BA  0EFF               	movlw	255
  5875  0009BC  23D8               	addwfc	(log_fun@i_374+1)& (0+255),f,b
  5876  0009BE  0EFF               	movlw	255
  5877  0009C0  23D9               	addwfc	(log_fun@i_374+2)& (0+255),f,b
  5878  0009C2  0EFF               	movlw	255
  5879  0009C4  23DA               	addwfc	(log_fun@i_374+3)& (0+255),f,b
  5880  0009C6  0100               	movlb	0	; () banked
  5881  0009C8  29D7               	incf	log_fun@i_374& (0+255),w,b
  5882  0009CA  E1F4               	bnz	l4183
  5883  0009CC  0100               	movlb	0	; () banked
  5884  0009CE  29D8               	incf	(log_fun@i_374+1)& (0+255),w,b
  5885  0009D0  E1F1               	bnz	l4183
  5886  0009D2  0100               	movlb	0	; () banked
  5887  0009D4  29D9               	incf	(log_fun@i_374+2)& (0+255),w,b
  5888  0009D6  E1EE               	bnz	l4183
  5889  0009D8  0100               	movlb	0	; () banked
  5890  0009DA  29DA               	incf	(log_fun@i_374+3)& (0+255),w,b
  5891  0009DC  A4D8               	btfss	status,2,c
  5892  0009DE  D7EA               	goto	l4183
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;main.c: 541: clcd_write(0x01, 0);
  5896                           
  5897                           ; BSR set to: 0
  5898  0009E0  0E00               	movlw	0
  5899  0009E2  6E0F               	movwf	clcd_write@control_bit,c
  5900  0009E4  0E01               	movlw	1
  5901  0009E6  EC43  F010         	call	_clcd_write
  5902                           
  5903                           ;main.c: 543: key11_flag = 1;
  5904  0009EA  0E00               	movlw	0
  5905  0009EC  0100               	movlb	0	; () banked
  5906  0009EE  6F86               	movwf	(_key11_flag+1)& (0+255),b
  5907  0009F0  0E01               	movlw	1
  5908  0009F2  6F85               	movwf	_key11_flag& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;main.c: 544: enter_flag = 0;
  5912  0009F4  0E00               	movlw	0
  5913  0009F6  0100               	movlb	0	; () banked
  5914  0009F8  6F84               	movwf	(_enter_flag+1)& (0+255),b
  5915  0009FA  0E00               	movlw	0
  5916  0009FC  6F83               	movwf	_enter_flag& (0+255),b
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;main.c: 545: op_flag = 0;
  5920  0009FE  0E00               	movlw	0
  5921  000A00  0100               	movlb	0	; () banked
  5922  000A02  6F90               	movwf	(_op_flag+1)& (0+255),b
  5923  000A04  0E00               	movlw	0
  5924  000A06  6F8F               	movwf	_op_flag& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;main.c: 546: view_flag = 0;
  5928  000A08  0E00               	movlw	0
  5929  000A0A  0100               	movlb	0	; () banked
  5930  000A0C  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  5931  000A0E  0E00               	movlw	0
  5932  000A10  6FAB               	movwf	log_fun@view_flag& (0+255),b
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;main.c: 547: log_flag = 1;
  5936  000A12  0E00               	movlw	0
  5937  000A14  0100               	movlb	0	; () banked
  5938  000A16  6F8A               	movwf	(_log_flag+1)& (0+255),b
  5939  000A18  0E01               	movlw	1
  5940  000A1A  6F89               	movwf	_log_flag& (0+255),b
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;main.c: 548: TXIE = 0;
  5944  000A1C  989D               	bcf	3997,4,c	;volatile
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;main.c: 549: RCIE = 0;
  5948  000A1E  9A9D               	bcf	3997,5,c	;volatile
  5949                           
  5950                           ;main.c: 550: }
  5951  000A20  0012               	return	
  5952  000A22                     l4201:
  5953                           
  5954                           ;main.c: 551: else if(count == 2)
  5955  000A22  0E02               	movlw	2
  5956  000A24  181D               	xorwf	log_fun@count,w,c
  5957  000A26  101E               	iorwf	log_fun@count+1,w,c
  5958  000A28  A4D8               	btfss	status,2,c
  5959  000A2A  D045               	goto	l4213
  5960                           
  5961                           ;main.c: 552: {
  5962                           ;main.c: 553: count_event = 0;
  5963  000A2C  0E00               	movlw	0
  5964  000A2E  6E32               	movwf	_count_event+1,c
  5965  000A30  0E00               	movlw	0
  5966  000A32  6E31               	movwf	_count_event,c
  5967                           
  5968                           ;main.c: 554: clcd_print("   Events erased",(0xC0 + (0)));
  5969  000A34  0E45               	movlw	low STR_14
  5970  000A36  6E15               	movwf	clcd_print@data,c
  5971  000A38  0E06               	movlw	high STR_14
  5972  000A3A  6E16               	movwf	clcd_print@data+1,c
  5973  000A3C  0EC0               	movlw	192
  5974  000A3E  6E17               	movwf	clcd_print@addr,c
  5975  000A40  ECA9  F00E         	call	_clcd_print	;wreg free
  5976                           
  5977                           ;main.c: 555: for(long i = 500000; i--; );
  5978  000A44  0E20               	movlw	32
  5979  000A46  0100               	movlb	0	; () banked
  5980  000A48  6FDB               	movwf	log_fun@i_376& (0+255),b
  5981  000A4A  0EA1               	movlw	161
  5982  000A4C  6FDC               	movwf	(log_fun@i_376+1)& (0+255),b
  5983  000A4E  0E07               	movlw	7
  5984  000A50  6FDD               	movwf	(log_fun@i_376+2)& (0+255),b
  5985  000A52  0E00               	movlw	0
  5986  000A54  6FDE               	movwf	(log_fun@i_376+3)& (0+255),b
  5987  000A56                     l4209:
  5988                           
  5989                           ; BSR set to: 0
  5990  000A56  0EFF               	movlw	255
  5991  000A58  0100               	movlb	0	; () banked
  5992  000A5A  27DB               	addwf	log_fun@i_376& (0+255),f,b
  5993  000A5C  0EFF               	movlw	255
  5994  000A5E  23DC               	addwfc	(log_fun@i_376+1)& (0+255),f,b
  5995  000A60  0EFF               	movlw	255
  5996  000A62  23DD               	addwfc	(log_fun@i_376+2)& (0+255),f,b
  5997  000A64  0EFF               	movlw	255
  5998  000A66  23DE               	addwfc	(log_fun@i_376+3)& (0+255),f,b
  5999  000A68  0100               	movlb	0	; () banked
  6000  000A6A  29DB               	incf	log_fun@i_376& (0+255),w,b
  6001  000A6C  E1F4               	bnz	l4209
  6002  000A6E  0100               	movlb	0	; () banked
  6003  000A70  29DC               	incf	(log_fun@i_376+1)& (0+255),w,b
  6004  000A72  E1F1               	bnz	l4209
  6005  000A74  0100               	movlb	0	; () banked
  6006  000A76  29DD               	incf	(log_fun@i_376+2)& (0+255),w,b
  6007  000A78  E1EE               	bnz	l4209
  6008  000A7A  0100               	movlb	0	; () banked
  6009  000A7C  29DE               	incf	(log_fun@i_376+3)& (0+255),w,b
  6010  000A7E  A4D8               	btfss	status,2,c
  6011  000A80  D7EA               	goto	l4209
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;main.c: 556: enter_flag = 0;
  6015                           
  6016                           ; BSR set to: 0
  6017  000A82  0E00               	movlw	0
  6018  000A84  0100               	movlb	0	; () banked
  6019  000A86  6F84               	movwf	(_enter_flag+1)& (0+255),b
  6020  000A88  0E00               	movlw	0
  6021  000A8A  6F83               	movwf	_enter_flag& (0+255),b
  6022                           
  6023                           ;main.c: 557: op_flag = 0;
  6024  000A8C  0E00               	movlw	0
  6025  000A8E  0100               	movlb	0	; () banked
  6026  000A90  6F90               	movwf	(_op_flag+1)& (0+255),b
  6027  000A92  0E00               	movlw	0
  6028  000A94  6F8F               	movwf	_op_flag& (0+255),b
  6029                           
  6030                           ;main.c: 558: view_flag = 0;
  6031  000A96  0E00               	movlw	0
  6032  000A98  0100               	movlb	0	; () banked
  6033  000A9A  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  6034  000A9C  0E00               	movlw	0
  6035  000A9E  6FAB               	movwf	log_fun@view_flag& (0+255),b
  6036                           
  6037                           ;main.c: 559: log_flag = 1;
  6038  000AA0  0E00               	movlw	0
  6039  000AA2  0100               	movlb	0	; () banked
  6040  000AA4  6F8A               	movwf	(_log_flag+1)& (0+255),b
  6041  000AA6  0E01               	movlw	1
  6042  000AA8  6F89               	movwf	_log_flag& (0+255),b
  6043                           
  6044                           ;main.c: 560: key11_flag = 1;
  6045  000AAA  0E00               	movlw	0
  6046  000AAC  0100               	movlb	0	; () banked
  6047  000AAE  6F86               	movwf	(_key11_flag+1)& (0+255),b
  6048  000AB0  0E01               	movlw	1
  6049  000AB2  6F85               	movwf	_key11_flag& (0+255),b
  6050                           
  6051                           ;main.c: 561: }
  6052  000AB4  0012               	return	
  6053  000AB6                     l4213:
  6054                           
  6055                           ;main.c: 562: else if(count == 3)
  6056  000AB6  0E03               	movlw	3
  6057  000AB8  181D               	xorwf	log_fun@count,w,c
  6058  000ABA  101E               	iorwf	log_fun@count+1,w,c
  6059  000ABC  A4D8               	btfss	status,2,c
  6060  000ABE  0012               	return	
  6061                           
  6062                           ;main.c: 563: {
  6063                           ;main.c: 564: static char mem_add = 0xc8;
  6064                           ;main.c: 565: static int i, j;
  6065                           ;main.c: 566: if(i < 4)
  6066  000AC0  BE42               	btfsc	log_fun@_378+1,7,c
  6067  000AC2  D006               	goto	l4217
  6068  000AC4  5042               	movf	log_fun@_378+1,w,c
  6069  000AC6  E15A               	bnz	l4251
  6070  000AC8  0E04               	movlw	4
  6071  000ACA  5C41               	subwf	log_fun@_378,w,c
  6072  000ACC  B0D8               	btfsc	status,0,c
  6073  000ACE  D056               	goto	l4251
  6074  000AD0                     l4217:
  6075                           
  6076                           ;main.c: 567: {
  6077                           ;main.c: 568: if(blink == 60)
  6078  000AD0  0E3C               	movlw	60
  6079  000AD2  182F               	xorwf	_blink,w,c
  6080  000AD4  1030               	iorwf	_blink+1,w,c
  6081  000AD6  A4D8               	btfss	status,2,c
  6082  000AD8  D005               	goto	l526
  6083                           
  6084                           ;main.c: 569: blink = 0;
  6085  000ADA  0E00               	movlw	0
  6086  000ADC  6E30               	movwf	_blink+1,c
  6087  000ADE  0E00               	movlw	0
  6088  000AE0  6E2F               	movwf	_blink,c
  6089  000AE2  D011               	goto	l4225
  6090  000AE4                     l526:
  6091                           
  6092                           ;main.c: 570: else if(blink % 2 == 0)
  6093  000AE4  B02F               	btfsc	_blink,0,c
  6094  000AE6  D007               	goto	l528
  6095                           
  6096                           ;main.c: 571: {
  6097                           ;main.c: 572: clcd_putch('_', (0xC0 + (i+6)));
  6098  000AE8  5041               	movf	log_fun@_378,w,c
  6099  000AEA  0FC6               	addlw	198
  6100  000AEC  6E1B               	movwf	clcd_putch@addr,c
  6101  000AEE  0E5F               	movlw	95
  6102  000AF0  ECAC  F010         	call	_clcd_putch
  6103                           
  6104                           ;main.c: 573: }
  6105  000AF4  D008               	goto	l4225
  6106  000AF6                     l528:
  6107                           
  6108                           ;main.c: 574: else if(blink % 2 == 1)
  6109  000AF6  A02F               	btfss	_blink,0,c
  6110  000AF8  D006               	goto	l4225
  6111                           
  6112                           ;main.c: 575: {
  6113                           ;main.c: 576: clcd_putch(' ', (0xC0 + (i+6)));
  6114  000AFA  5041               	movf	log_fun@_378,w,c
  6115  000AFC  0FC6               	addlw	198
  6116  000AFE  6E1B               	movwf	clcd_putch@addr,c
  6117  000B00  0E20               	movlw	32
  6118  000B02  ECAC  F010         	call	_clcd_putch
  6119  000B06                     l4225:
  6120                           
  6121                           ;main.c: 577: }
  6122                           ;main.c: 578: if(j < 4)
  6123  000B06  BE44               	btfsc	log_fun@_379+1,7,c
  6124  000B08  D006               	goto	l4227
  6125  000B0A  5044               	movf	log_fun@_379+1,w,c
  6126  000B0C  E137               	bnz	l4251
  6127  000B0E  0E04               	movlw	4
  6128  000B10  5C43               	subwf	log_fun@_379,w,c
  6129  000B12  B0D8               	btfsc	status,0,c
  6130  000B14  D033               	goto	l4251
  6131  000B16                     l4227:
  6132                           
  6133                           ;main.c: 579: {
  6134                           ;main.c: 580: if(key == 8 || key == 9)
  6135  000B16  0E08               	movlw	8
  6136  000B18  1849               	xorwf	log_fun@key,w,c
  6137  000B1A  B4D8               	btfsc	status,2,c
  6138  000B1C  D004               	goto	l4231
  6139  000B1E  0E09               	movlw	9
  6140  000B20  1849               	xorwf	log_fun@key,w,c
  6141  000B22  A4D8               	btfss	status,2,c
  6142  000B24  D02B               	goto	l4251
  6143  000B26                     l4231:
  6144                           
  6145                           ;main.c: 581: {
  6146                           ;main.c: 582: if(key == 8)
  6147  000B26  0E08               	movlw	8
  6148  000B28  1849               	xorwf	log_fun@key,w,c
  6149  000B2A  A4D8               	btfss	status,2,c
  6150  000B2C  D002               	goto	l4235
  6151                           
  6152                           ;main.c: 583: key = 0;
  6153  000B2E  0E00               	movlw	0
  6154  000B30  6E49               	movwf	log_fun@key,c
  6155  000B32                     l4235:
  6156                           
  6157                           ;main.c: 584: if(key == 9)
  6158  000B32  0E09               	movlw	9
  6159  000B34  1849               	xorwf	log_fun@key,w,c
  6160  000B36  A4D8               	btfss	status,2,c
  6161  000B38  D002               	goto	l4239
  6162                           
  6163                           ;main.c: 585: key = 1;
  6164  000B3A  0E01               	movlw	1
  6165  000B3C  6E49               	movwf	log_fun@key,c
  6166  000B3E                     l4239:
  6167                           
  6168                           ;main.c: 586: password[j] = key + 48;
  6169  000B3E  0EB8               	movlw	low _password
  6170  000B40  2443               	addwf	log_fun@_379,w,c
  6171  000B42  6ED9               	movwf	fsr2l,c
  6172  000B44  0E00               	movlw	high _password
  6173  000B46  2044               	addwfc	log_fun@_379+1,w,c
  6174  000B48  6EDA               	movwf	fsr2h,c
  6175  000B4A  5049               	movf	log_fun@key,w,c
  6176  000B4C  0F30               	addlw	48
  6177  000B4E  6EDF               	movwf	indf2,c
  6178                           
  6179                           ;main.c: 587: write_ext_eeprom(mem_add++, password[j]);
  6180  000B50  0EB8               	movlw	low _password
  6181  000B52  2443               	addwf	log_fun@_379,w,c
  6182  000B54  6ED9               	movwf	fsr2l,c
  6183  000B56  0E00               	movlw	high _password
  6184  000B58  2044               	addwfc	log_fun@_379+1,w,c
  6185  000B5A  6EDA               	movwf	fsr2h,c
  6186  000B5C  50DF               	movf	indf2,w,c
  6187  000B5E  6E10               	movwf	write_ext_eeprom@data,c
  6188  000B60  504F               	movf	log_fun@mem_add,w,c
  6189  000B62  ECE9  F00F         	call	_write_ext_eeprom
  6190  000B66  2A4F               	incf	log_fun@mem_add,f,c
  6191                           
  6192                           ;main.c: 588: clcd_putch('*', (0xC0 + (j++ + 6)));
  6193  000B68  5043               	movf	log_fun@_379,w,c
  6194  000B6A  0FC6               	addlw	198
  6195  000B6C  6E1B               	movwf	clcd_putch@addr,c
  6196  000B6E  0E2A               	movlw	42
  6197  000B70  ECAC  F010         	call	_clcd_putch
  6198  000B74  4A43               	infsnz	log_fun@_379,f,c
  6199  000B76  2A44               	incf	log_fun@_379+1,f,c
  6200                           
  6201                           ;main.c: 589: i++;
  6202  000B78  4A41               	infsnz	log_fun@_378,f,c
  6203  000B7A  2A42               	incf	log_fun@_378+1,f,c
  6204  000B7C                     l4251:
  6205                           
  6206                           ;main.c: 590: }
  6207                           ;main.c: 591: }
  6208                           ;main.c: 592: }
  6209                           ;main.c: 593: if(i >= 4)
  6210  000B7C  BE42               	btfsc	log_fun@_378+1,7,c
  6211  000B7E  0012               	return	
  6212  000B80  5042               	movf	log_fun@_378+1,w,c
  6213  000B82  E104               	bnz	u4520
  6214  000B84  0E04               	movlw	4
  6215  000B86  5C41               	subwf	log_fun@_378,w,c
  6216  000B88  A0D8               	btfss	status,0,c
  6217  000B8A  0012               	return	
  6218  000B8C                     u4520:
  6219                           
  6220                           ;main.c: 594: {
  6221                           ;main.c: 595: j = 0;
  6222  000B8C  0E00               	movlw	0
  6223  000B8E  6E44               	movwf	log_fun@_379+1,c
  6224  000B90  0E00               	movlw	0
  6225  000B92  6E43               	movwf	log_fun@_379,c
  6226                           
  6227                           ;main.c: 596: i = 0;
  6228  000B94  0E00               	movlw	0
  6229  000B96  6E42               	movwf	log_fun@_378+1,c
  6230  000B98  0E00               	movlw	0
  6231  000B9A  6E41               	movwf	log_fun@_378,c
  6232                           
  6233                           ;main.c: 597: clcd_write(0x01, 0);
  6234  000B9C  0E00               	movlw	0
  6235  000B9E  6E0F               	movwf	clcd_write@control_bit,c
  6236  000BA0  0E01               	movlw	1
  6237  000BA2  EC43  F010         	call	_clcd_write
  6238                           
  6239                           ;main.c: 598: clcd_print("Password changed",(0xC0 + (0)));
  6240  000BA6  0E34               	movlw	low STR_15
  6241  000BA8  6E15               	movwf	clcd_print@data,c
  6242  000BAA  0E06               	movlw	high STR_15
  6243  000BAC  6E16               	movwf	clcd_print@data+1,c
  6244  000BAE  0EC0               	movlw	192
  6245  000BB0  6E17               	movwf	clcd_print@addr,c
  6246  000BB2  ECA9  F00E         	call	_clcd_print	;wreg free
  6247                           
  6248                           ;main.c: 599: for(long i = 500000; i--; );
  6249  000BB6  0E20               	movlw	32
  6250  000BB8  0100               	movlb	0	; () banked
  6251  000BBA  6FDF               	movwf	log_fun@i_381& (0+255),b
  6252  000BBC  0EA1               	movlw	161
  6253  000BBE  6FE0               	movwf	(log_fun@i_381+1)& (0+255),b
  6254  000BC0  0E07               	movlw	7
  6255  000BC2  6FE1               	movwf	(log_fun@i_381+2)& (0+255),b
  6256  000BC4  0E00               	movlw	0
  6257  000BC6  6FE2               	movwf	(log_fun@i_381+3)& (0+255),b
  6258  000BC8                     l4261:
  6259                           
  6260                           ; BSR set to: 0
  6261  000BC8  0EFF               	movlw	255
  6262  000BCA  0100               	movlb	0	; () banked
  6263  000BCC  27DF               	addwf	log_fun@i_381& (0+255),f,b
  6264  000BCE  0EFF               	movlw	255
  6265  000BD0  23E0               	addwfc	(log_fun@i_381+1)& (0+255),f,b
  6266  000BD2  0EFF               	movlw	255
  6267  000BD4  23E1               	addwfc	(log_fun@i_381+2)& (0+255),f,b
  6268  000BD6  0EFF               	movlw	255
  6269  000BD8  23E2               	addwfc	(log_fun@i_381+3)& (0+255),f,b
  6270  000BDA  0100               	movlb	0	; () banked
  6271  000BDC  29DF               	incf	log_fun@i_381& (0+255),w,b
  6272  000BDE  E1F4               	bnz	l4261
  6273  000BE0  0100               	movlb	0	; () banked
  6274  000BE2  29E0               	incf	(log_fun@i_381+1)& (0+255),w,b
  6275  000BE4  E1F1               	bnz	l4261
  6276  000BE6  0100               	movlb	0	; () banked
  6277  000BE8  29E1               	incf	(log_fun@i_381+2)& (0+255),w,b
  6278  000BEA  E1EE               	bnz	l4261
  6279  000BEC  0100               	movlb	0	; () banked
  6280  000BEE  29E2               	incf	(log_fun@i_381+3)& (0+255),w,b
  6281  000BF0  A4D8               	btfss	status,2,c
  6282  000BF2  D7EA               	goto	l4261
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;main.c: 600: clcd_write(0x01, 0);
  6286                           
  6287                           ; BSR set to: 0
  6288  000BF4  0E00               	movlw	0
  6289  000BF6  6E0F               	movwf	clcd_write@control_bit,c
  6290  000BF8  0E01               	movlw	1
  6291  000BFA  EC43  F010         	call	_clcd_write
  6292                           
  6293                           ;main.c: 602: enter_flag = 0;
  6294  000BFE  0E00               	movlw	0
  6295  000C00  0100               	movlb	0	; () banked
  6296  000C02  6F84               	movwf	(_enter_flag+1)& (0+255),b
  6297  000C04  0E00               	movlw	0
  6298  000C06  6F83               	movwf	_enter_flag& (0+255),b
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;main.c: 603: op_flag = 0;
  6302  000C08  0E00               	movlw	0
  6303  000C0A  0100               	movlb	0	; () banked
  6304  000C0C  6F90               	movwf	(_op_flag+1)& (0+255),b
  6305  000C0E  0E00               	movlw	0
  6306  000C10  6F8F               	movwf	_op_flag& (0+255),b
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;main.c: 604: view_flag = 0;
  6310  000C12  0E00               	movlw	0
  6311  000C14  0100               	movlb	0	; () banked
  6312  000C16  6FAC               	movwf	(log_fun@view_flag+1)& (0+255),b
  6313  000C18  0E00               	movlw	0
  6314  000C1A  6FAB               	movwf	log_fun@view_flag& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;main.c: 605: log_flag = 1;
  6318  000C1C  0E00               	movlw	0
  6319  000C1E  0100               	movlb	0	; () banked
  6320  000C20  6F8A               	movwf	(_log_flag+1)& (0+255),b
  6321  000C22  0E01               	movlw	1
  6322  000C24  6F89               	movwf	_log_flag& (0+255),b
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;main.c: 606: key11_flag = 1;
  6326  000C26  0E00               	movlw	0
  6327  000C28  0100               	movlb	0	; () banked
  6328  000C2A  6F86               	movwf	(_key11_flag+1)& (0+255),b
  6329  000C2C  0E01               	movlw	1
  6330  000C2E  6F85               	movwf	_key11_flag& (0+255),b
  6331                           
  6332                           ; BSR set to: 0
  6333                           
  6334                           ; BSR set to: 0
  6335                           
  6336                           ; BSR set to: 0
  6337                           
  6338                           ; BSR set to: 0
  6339                           
  6340                           ; BSR set to: 0
  6341  000C30  0012               	return	
  6342  000C32                     __end_of_log_fun:
  6343                           	opt stack 0
  6344                           tblptru	equ	0xFF8
  6345                           tblptrh	equ	0xFF7
  6346                           tblptrl	equ	0xFF6
  6347                           tablat	equ	0xFF5
  6348                           prodl	equ	0xFF3
  6349                           intcon	equ	0xFF2
  6350                           intcon2	equ	0xFF1
  6351                           postinc0	equ	0xFEE
  6352                           wreg	equ	0xFE8
  6353                           indf1	equ	0xFE7
  6354                           postinc1	equ	0xFE6
  6355                           postdec1	equ	0xFE5
  6356                           fsr1h	equ	0xFE2
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _write_ext_eeprom *****************
  6365 ;; Defined at:
  6366 ;;		line 6 in file "ext_eeprom.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;  address         1    wreg     unsigned char 
  6369 ;;  data            1   15[COMRAM] unsigned char 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  address         1   16[COMRAM] unsigned char 
  6372 ;;  wait            2   17[COMRAM] int 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         1       0       0       0       0       0       0
  6383 ;;      Locals:         3       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0
  6385 ;;      Totals:         4       0       0       0       0       0       0
  6386 ;;Total ram usage:        4 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    3
  6389 ;; This function calls:
  6390 ;;		_i2c_start
  6391 ;;		_i2c_stop
  6392 ;;		_i2c_write
  6393 ;; This function is called by:
  6394 ;;		_store_event
  6395 ;;		_log_fun
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text22
  6400  001FD2                     __ptext22:
  6401                           	opt stack 0
  6402  001FD2                     _write_ext_eeprom:
  6403                           	opt stack 25
  6404                           
  6405                           ;incstack = 0
  6406                           ;write_ext_eeprom@address stored from wreg
  6407  001FD2  6E11               	movwf	write_ext_eeprom@address,c
  6408                           
  6409                           ;ext_eeprom.c: 8: i2c_start();
  6410  001FD4  ECEB  F010         	call	_i2c_start	;wreg free
  6411                           
  6412                           ;ext_eeprom.c: 9: i2c_write(0xA0);
  6413  001FD8  0EA0               	movlw	160
  6414  001FDA  ECDB  F010         	call	_i2c_write
  6415                           
  6416                           ;ext_eeprom.c: 10: i2c_write(address);
  6417  001FDE  5011               	movf	write_ext_eeprom@address,w,c
  6418  001FE0  ECDB  F010         	call	_i2c_write
  6419                           
  6420                           ;ext_eeprom.c: 11: i2c_write(data);
  6421  001FE4  5010               	movf	write_ext_eeprom@data,w,c
  6422  001FE6  ECDB  F010         	call	_i2c_write
  6423                           
  6424                           ;ext_eeprom.c: 12: i2c_stop();
  6425  001FEA  ECE7  F010         	call	_i2c_stop	;wreg free
  6426                           
  6427                           ;ext_eeprom.c: 13: for(int wait = 50000;wait--;);
  6428  001FEE  0EC3               	movlw	195
  6429  001FF0  6E13               	movwf	write_ext_eeprom@wait+1,c
  6430  001FF2  0E50               	movlw	80
  6431  001FF4  6E12               	movwf	write_ext_eeprom@wait,c
  6432  001FF6                     l3759:
  6433  001FF6  0612               	decf	write_ext_eeprom@wait,f,c
  6434  001FF8  A0D8               	btfss	status,0,c
  6435  001FFA  0613               	decf	write_ext_eeprom@wait+1,f,c
  6436  001FFC  2812               	incf	write_ext_eeprom@wait,w,c
  6437  001FFE  E1FB               	bnz	l3759
  6438  002000  2813               	incf	write_ext_eeprom@wait+1,w,c
  6439  002002  B4D8               	btfsc	status,2,c
  6440  002004  0012               	return	
  6441  002006  D7F7               	goto	l3759
  6442  002008                     __end_of_write_ext_eeprom:
  6443                           	opt stack 0
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodl	equ	0xFF3
  6449                           intcon	equ	0xFF2
  6450                           intcon2	equ	0xFF1
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           indf1	equ	0xFE7
  6454                           postinc1	equ	0xFE6
  6455                           postdec1	equ	0xFE5
  6456                           fsr1h	equ	0xFE2
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _read_switches *****************
  6465 ;; Defined at:
  6466 ;;		line 88 in file "matrix_keypad.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  detection_ty    1    wreg     unsigned char 
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  detection_ty    1   14[COMRAM] unsigned char 
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      unsigned char 
  6473 ;; Registers used:
  6474 ;;		wreg, status,2, status,0, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6480 ;;      Params:         0       0       0       0       0       0       0
  6481 ;;      Locals:         1       0       0       0       0       0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0
  6483 ;;      Totals:         1       0       0       0       0       0       0
  6484 ;;Total ram usage:        1 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    2
  6487 ;; This function calls:
  6488 ;;		_scan_key
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;;		_give_password
  6492 ;;		_log_fun
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text23
  6497  001EE4                     __ptext23:
  6498                           	opt stack 0
  6499  001EE4                     _read_switches:
  6500                           	opt stack 28
  6501                           
  6502                           ;incstack = 0
  6503                           ;read_switches@detection_type stored from wreg
  6504  001EE4  6E0F               	movwf	read_switches@detection_type,c
  6505                           
  6506                           ;matrix_keypad.c: 90: static unsigned char once = 1, key;
  6507                           ;matrix_keypad.c: 92: if (detection_type == 1)
  6508  001EE6  040F               	decf	read_switches@detection_type,w,c
  6509  001EE8  A4D8               	btfss	status,2,c
  6510  001EEA  D013               	goto	l3823
  6511                           
  6512                           ;matrix_keypad.c: 93: {
  6513                           ;matrix_keypad.c: 94: key = scan_key();
  6514  001EEC  EC3A  F00E         	call	_scan_key	;wreg free
  6515  001EF0  6E4A               	movwf	read_switches@key,c
  6516                           
  6517                           ;matrix_keypad.c: 95: if(key != 0xFF && once )
  6518  001EF2  284A               	incf	read_switches@key,w,c
  6519  001EF4  B4D8               	btfsc	status,2,c
  6520  001EF6  D007               	goto	l3819
  6521  001EF8  5050               	movf	read_switches@once,w,c
  6522  001EFA  B4D8               	btfsc	status,2,c
  6523  001EFC  D004               	goto	l3819
  6524                           
  6525                           ;matrix_keypad.c: 96: {
  6526                           ;matrix_keypad.c: 97: once = 0;
  6527  001EFE  0E00               	movlw	0
  6528  001F00  6E50               	movwf	read_switches@once,c
  6529                           
  6530                           ;matrix_keypad.c: 98: return key;
  6531  001F02  504A               	movf	read_switches@key,w,c
  6532  001F04  0012               	return	
  6533  001F06                     l3819:
  6534                           
  6535                           ;matrix_keypad.c: 100: else if(key == 0xFF)
  6536  001F06  284A               	incf	read_switches@key,w,c
  6537  001F08  A4D8               	btfss	status,2,c
  6538  001F0A  D009               	goto	l3829
  6539                           
  6540                           ;matrix_keypad.c: 101: {
  6541                           ;matrix_keypad.c: 102: once = 1;
  6542  001F0C  0E01               	movlw	1
  6543  001F0E  6E50               	movwf	read_switches@once,c
  6544                           
  6545                           ;matrix_keypad.c: 103: }
  6546                           ;matrix_keypad.c: 104: }
  6547  001F10  D006               	goto	l3829
  6548  001F12                     l3823:
  6549                           
  6550                           ;matrix_keypad.c: 105: else if (detection_type == 0)
  6551  001F12  500F               	movf	read_switches@detection_type,w,c
  6552  001F14  A4D8               	btfss	status,2,c
  6553  001F16  D003               	goto	l3829
  6554                           
  6555                           ;matrix_keypad.c: 106: {
  6556                           ;matrix_keypad.c: 107: return scan_key();
  6557  001F18  EC3A  F00E         	call	_scan_key	;wreg free
  6558  001F1C  0012               	return	
  6559  001F1E                     l3829:
  6560                           
  6561                           ;matrix_keypad.c: 108: }
  6562                           ;matrix_keypad.c: 109: return 0xFF;
  6563  001F1E  0EFF               	movlw	255
  6564  001F20  0012               	return	
  6565  001F22                     __end_of_read_switches:
  6566                           	opt stack 0
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodl	equ	0xFF3
  6572                           intcon	equ	0xFF2
  6573                           intcon2	equ	0xFF1
  6574                           postinc0	equ	0xFEE
  6575                           wreg	equ	0xFE8
  6576                           indf1	equ	0xFE7
  6577                           postinc1	equ	0xFE6
  6578                           postdec1	equ	0xFE5
  6579                           fsr1h	equ	0xFE2
  6580                           fsr1l	equ	0xFE1
  6581                           indf2	equ	0xFDF
  6582                           postinc2	equ	0xFDE
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8
  6586                           
  6587 ;; *************** function _scan_key *****************
  6588 ;; Defined at:
  6589 ;;		line 18 in file "matrix_keypad.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      unsigned char 
  6596 ;; Registers used:
  6597 ;;		wreg
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6603 ;;      Params:         0       0       0       0       0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    1
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_read_switches
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text24
  6618  001C74                     __ptext24:
  6619                           	opt stack 0
  6620  001C74                     _scan_key:
  6621                           	opt stack 28
  6622                           
  6623                           ;matrix_keypad.c: 20: PORTBbits.RB5 = 0;
  6624                           
  6625                           ;incstack = 0
  6626  001C74  9A81               	bcf	3969,5,c	;volatile
  6627                           
  6628                           ;matrix_keypad.c: 21: PORTBbits.RB6 = 1;
  6629  001C76  8C81               	bsf	3969,6,c	;volatile
  6630                           
  6631                           ;matrix_keypad.c: 22: PORTBbits.RB7 = 1;
  6632  001C78  8E81               	bsf	3969,7,c	;volatile
  6633                           
  6634                           ;matrix_keypad.c: 24: if (PORTBbits.RB1 == 0)
  6635  001C7A  B281               	btfsc	3969,1,c	;volatile
  6636  001C7C  D002               	goto	l183
  6637                           
  6638                           ;matrix_keypad.c: 25: {
  6639                           ;matrix_keypad.c: 26: return 1;
  6640  001C7E  0E01               	movlw	1
  6641  001C80  0012               	return	
  6642  001C82                     l183:
  6643                           
  6644                           ;matrix_keypad.c: 28: else if (PORTBbits.RB2 == 0)
  6645  001C82  B481               	btfsc	3969,2,c	;volatile
  6646  001C84  D002               	goto	l186
  6647                           
  6648                           ;matrix_keypad.c: 29: {
  6649                           ;matrix_keypad.c: 30: return 4;
  6650  001C86  0E04               	movlw	4
  6651  001C88  0012               	return	
  6652  001C8A                     l186:
  6653                           
  6654                           ;matrix_keypad.c: 32: else if (PORTBbits.RB3 == 0)
  6655  001C8A  B681               	btfsc	3969,3,c	;volatile
  6656  001C8C  D002               	goto	l188
  6657                           
  6658                           ;matrix_keypad.c: 33: {
  6659                           ;matrix_keypad.c: 34: return 7;
  6660  001C8E  0E07               	movlw	7
  6661  001C90  0012               	return	
  6662  001C92                     l188:
  6663                           
  6664                           ;matrix_keypad.c: 36: else if (PORTBbits.RB4 == 0)
  6665  001C92  B881               	btfsc	3969,4,c	;volatile
  6666  001C94  D002               	goto	l185
  6667                           
  6668                           ;matrix_keypad.c: 37: {
  6669                           ;matrix_keypad.c: 38: return 10;
  6670  001C96  0E0A               	movlw	10
  6671  001C98  0012               	return	
  6672  001C9A                     l185:
  6673                           
  6674                           ;matrix_keypad.c: 39: }
  6675                           ;matrix_keypad.c: 41: PORTBbits.RB5 = 1;
  6676  001C9A  8A81               	bsf	3969,5,c	;volatile
  6677                           
  6678                           ;matrix_keypad.c: 42: PORTBbits.RB6 = 0;
  6679  001C9C  9C81               	bcf	3969,6,c	;volatile
  6680                           
  6681                           ;matrix_keypad.c: 43: PORTBbits.RB7 = 1;
  6682  001C9E  8E81               	bsf	3969,7,c	;volatile
  6683                           
  6684                           ;matrix_keypad.c: 45: if (PORTBbits.RB1 == 0)
  6685  001CA0  B281               	btfsc	3969,1,c	;volatile
  6686  001CA2  D002               	goto	l191
  6687                           
  6688                           ;matrix_keypad.c: 46: {
  6689                           ;matrix_keypad.c: 47: return 2;
  6690  001CA4  0E02               	movlw	2
  6691  001CA6  0012               	return	
  6692  001CA8                     l191:
  6693                           
  6694                           ;matrix_keypad.c: 49: else if (PORTBbits.RB2 == 0)
  6695  001CA8  B481               	btfsc	3969,2,c	;volatile
  6696  001CAA  D002               	goto	l193
  6697                           
  6698                           ;matrix_keypad.c: 50: {
  6699                           ;matrix_keypad.c: 51: return 5;
  6700  001CAC  0E05               	movlw	5
  6701  001CAE  0012               	return	
  6702  001CB0                     l193:
  6703                           
  6704                           ;matrix_keypad.c: 53: else if (PORTBbits.RB3 == 0)
  6705  001CB0  B681               	btfsc	3969,3,c	;volatile
  6706  001CB2  D002               	goto	l195
  6707                           
  6708                           ;matrix_keypad.c: 54: {
  6709                           ;matrix_keypad.c: 55: return 8;
  6710  001CB4  0E08               	movlw	8
  6711  001CB6  0012               	return	
  6712  001CB8                     l195:
  6713                           
  6714                           ;matrix_keypad.c: 57: else if (PORTBbits.RB4 == 0)
  6715  001CB8  B881               	btfsc	3969,4,c	;volatile
  6716  001CBA  D002               	goto	l192
  6717                           
  6718                           ;matrix_keypad.c: 58: {
  6719                           ;matrix_keypad.c: 59: return 11;
  6720  001CBC  0E0B               	movlw	11
  6721  001CBE  0012               	return	
  6722  001CC0                     l192:
  6723                           
  6724                           ;matrix_keypad.c: 60: }
  6725                           ;matrix_keypad.c: 62: PORTBbits.RB5 = 1;
  6726  001CC0  8A81               	bsf	3969,5,c	;volatile
  6727                           
  6728                           ;matrix_keypad.c: 63: PORTBbits.RB6 = 1;
  6729  001CC2  8C81               	bsf	3969,6,c	;volatile
  6730                           
  6731                           ;matrix_keypad.c: 64: PORTBbits.RB7 = 0;
  6732  001CC4  9E81               	bcf	3969,7,c	;volatile
  6733                           
  6734                           ;matrix_keypad.c: 66: PORTBbits.RB7 = 0;
  6735  001CC6  9E81               	bcf	3969,7,c	;volatile
  6736                           
  6737                           ;matrix_keypad.c: 68: if (PORTBbits.RB1 == 0)
  6738  001CC8  B281               	btfsc	3969,1,c	;volatile
  6739  001CCA  D002               	goto	l198
  6740                           
  6741                           ;matrix_keypad.c: 69: {
  6742                           ;matrix_keypad.c: 70: return 3;
  6743  001CCC  0E03               	movlw	3
  6744  001CCE  0012               	return	
  6745  001CD0                     l198:
  6746                           
  6747                           ;matrix_keypad.c: 72: else if (PORTBbits.RB2 == 0)
  6748  001CD0  B481               	btfsc	3969,2,c	;volatile
  6749  001CD2  D002               	goto	l200
  6750                           
  6751                           ;matrix_keypad.c: 73: {
  6752                           ;matrix_keypad.c: 74: return 6;
  6753  001CD4  0E06               	movlw	6
  6754  001CD6  0012               	return	
  6755  001CD8                     l200:
  6756                           
  6757                           ;matrix_keypad.c: 76: else if (PORTBbits.RB3 == 0)
  6758  001CD8  B681               	btfsc	3969,3,c	;volatile
  6759  001CDA  D002               	goto	l202
  6760                           
  6761                           ;matrix_keypad.c: 77: {
  6762                           ;matrix_keypad.c: 78: return 9;
  6763  001CDC  0E09               	movlw	9
  6764  001CDE  0012               	return	
  6765  001CE0                     l202:
  6766                           
  6767                           ;matrix_keypad.c: 80: else if (PORTBbits.RB4 == 0)
  6768  001CE0  B881               	btfsc	3969,4,c	;volatile
  6769  001CE2  D002               	goto	l3743
  6770                           
  6771                           ;matrix_keypad.c: 81: {
  6772                           ;matrix_keypad.c: 82: return 12;
  6773  001CE4  0E0C               	movlw	12
  6774  001CE6  0012               	return	
  6775  001CE8                     l3743:
  6776                           
  6777                           ;matrix_keypad.c: 83: }
  6778                           ;matrix_keypad.c: 85: return 0xFF;
  6779  001CE8  0EFF               	movlw	255
  6780  001CEA  0012               	return	
  6781  001CEC                     __end_of_scan_key:
  6782                           	opt stack 0
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodl	equ	0xFF3
  6788                           intcon	equ	0xFF2
  6789                           intcon2	equ	0xFF1
  6790                           postinc0	equ	0xFEE
  6791                           wreg	equ	0xFE8
  6792                           indf1	equ	0xFE7
  6793                           postinc1	equ	0xFE6
  6794                           postdec1	equ	0xFE5
  6795                           fsr1h	equ	0xFE2
  6796                           fsr1l	equ	0xFE1
  6797                           indf2	equ	0xFDF
  6798                           postinc2	equ	0xFDE
  6799                           fsr2h	equ	0xFDA
  6800                           fsr2l	equ	0xFD9
  6801                           status	equ	0xFD8
  6802                           
  6803 ;; *************** function _read_ext_eeprom *****************
  6804 ;; Defined at:
  6805 ;;		line 16 in file "ext_eeprom.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;  address         1    wreg     unsigned char 
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  address         1   15[COMRAM] unsigned char 
  6810 ;;  data            1   16[COMRAM] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  1    wreg      unsigned char 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6820 ;;      Params:         0       0       0       0       0       0       0
  6821 ;;      Locals:         2       0       0       0       0       0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0
  6823 ;;      Totals:         2       0       0       0       0       0       0
  6824 ;;Total ram usage:        2 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    4
  6827 ;; This function calls:
  6828 ;;		_i2c_read
  6829 ;;		_i2c_rep_start
  6830 ;;		_i2c_start
  6831 ;;		_i2c_stop
  6832 ;;		_i2c_write
  6833 ;; This function is called by:
  6834 ;;		_init_config
  6835 ;;		_log_fun
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text25
  6840  002032                     __ptext25:
  6841                           	opt stack 0
  6842  002032                     _read_ext_eeprom:
  6843                           	opt stack 25
  6844                           
  6845                           ;incstack = 0
  6846                           ;read_ext_eeprom@address stored from wreg
  6847  002032  6E10               	movwf	read_ext_eeprom@address,c
  6848                           
  6849                           ;ext_eeprom.c: 18: unsigned char data;
  6850                           ;ext_eeprom.c: 20: i2c_start();
  6851  002034  ECEB  F010         	call	_i2c_start	;wreg free
  6852                           
  6853                           ;ext_eeprom.c: 21: i2c_write(0xA0);
  6854  002038  0EA0               	movlw	160
  6855  00203A  ECDB  F010         	call	_i2c_write
  6856                           
  6857                           ;ext_eeprom.c: 22: i2c_write(address);
  6858  00203E  5010               	movf	read_ext_eeprom@address,w,c
  6859  002040  ECDB  F010         	call	_i2c_write
  6860                           
  6861                           ;ext_eeprom.c: 23: i2c_rep_start();
  6862  002044  ECEF  F010         	call	_i2c_rep_start	;wreg free
  6863                           
  6864                           ;ext_eeprom.c: 24: i2c_write(0xA1);
  6865  002048  0EA1               	movlw	161
  6866  00204A  ECDB  F010         	call	_i2c_write
  6867                           
  6868                           ;ext_eeprom.c: 25: data = i2c_read();
  6869  00204E  ECF3  F010         	call	_i2c_read	;wreg free
  6870  002052  6E11               	movwf	read_ext_eeprom@data,c
  6871                           
  6872                           ;ext_eeprom.c: 26: i2c_stop();
  6873  002054  ECE7  F010         	call	_i2c_stop	;wreg free
  6874                           
  6875                           ;ext_eeprom.c: 28: return data;
  6876  002058  5011               	movf	read_ext_eeprom@data,w,c
  6877  00205A  0012               	return	
  6878  00205C                     __end_of_read_ext_eeprom:
  6879                           	opt stack 0
  6880                           tblptru	equ	0xFF8
  6881                           tblptrh	equ	0xFF7
  6882                           tblptrl	equ	0xFF6
  6883                           tablat	equ	0xFF5
  6884                           prodl	equ	0xFF3
  6885                           intcon	equ	0xFF2
  6886                           intcon2	equ	0xFF1
  6887                           postinc0	equ	0xFEE
  6888                           wreg	equ	0xFE8
  6889                           indf1	equ	0xFE7
  6890                           postinc1	equ	0xFE6
  6891                           postdec1	equ	0xFE5
  6892                           fsr1h	equ	0xFE2
  6893                           fsr1l	equ	0xFE1
  6894                           indf2	equ	0xFDF
  6895                           postinc2	equ	0xFDE
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _i2c_write *****************
  6901 ;; Defined at:
  6902 ;;		line 54 in file "i2c.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  data            1    wreg     unsigned char 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  data            1   14[COMRAM] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6916 ;;      Params:         0       0       0       0       0       0       0
  6917 ;;      Locals:         1       0       0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0
  6919 ;;      Totals:         1       0       0       0       0       0       0
  6920 ;;Total ram usage:        1 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    2
  6923 ;; This function calls:
  6924 ;;		_i2c_idle
  6925 ;; This function is called by:
  6926 ;;		_write_ext_eeprom
  6927 ;;		_read_ext_eeprom
  6928 ;;		_write_ds1307
  6929 ;;		_read_ds1307
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text26
  6934  0021B6                     __ptext26:
  6935                           	opt stack 0
  6936  0021B6                     _i2c_write:
  6937                           	opt stack 26
  6938                           
  6939                           ;incstack = 0
  6940                           ;i2c_write@data stored from wreg
  6941  0021B6  6E0F               	movwf	i2c_write@data,c
  6942                           
  6943                           ;i2c.c: 56: SSPBUF = data;
  6944  0021B8  C00F  FFC9         	movff	i2c_write@data,4041	;volatile
  6945                           
  6946                           ;i2c.c: 57: i2c_idle();
  6947  0021BC  ECFB  F010         	call	_i2c_idle	;wreg free
  6948  0021C0  0012               	return		;funcret
  6949  0021C2                     __end_of_i2c_write:
  6950                           	opt stack 0
  6951                           tblptru	equ	0xFF8
  6952                           tblptrh	equ	0xFF7
  6953                           tblptrl	equ	0xFF6
  6954                           tablat	equ	0xFF5
  6955                           prodl	equ	0xFF3
  6956                           intcon	equ	0xFF2
  6957                           intcon2	equ	0xFF1
  6958                           postinc0	equ	0xFEE
  6959                           wreg	equ	0xFE8
  6960                           indf1	equ	0xFE7
  6961                           postinc1	equ	0xFE6
  6962                           postdec1	equ	0xFE5
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971 ;; *************** function _i2c_stop *****************
  6972 ;; Defined at:
  6973 ;;		line 42 in file "i2c.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;		None
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;		None
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  1    wreg      void 
  6980 ;; Registers used:
  6981 ;;		cstack
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6987 ;;      Params:         0       0       0       0       0       0       0
  6988 ;;      Locals:         0       0       0       0       0       0       0
  6989 ;;      Temps:          0       0       0       0       0       0       0
  6990 ;;      Totals:         0       0       0       0       0       0       0
  6991 ;;Total ram usage:        0 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    2
  6994 ;; This function calls:
  6995 ;;		_i2c_idle
  6996 ;; This function is called by:
  6997 ;;		_write_ext_eeprom
  6998 ;;		_read_ext_eeprom
  6999 ;;		_write_ds1307
  7000 ;;		_read_ds1307
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text27
  7005  0021CE                     __ptext27:
  7006                           	opt stack 0
  7007  0021CE                     _i2c_stop:
  7008                           	opt stack 26
  7009                           
  7010                           ;i2c.c: 44: PEN = 1;
  7011                           
  7012                           ;incstack = 0
  7013  0021CE  84C5               	bsf	4037,2,c	;volatile
  7014                           
  7015                           ;i2c.c: 45: i2c_idle();
  7016  0021D0  ECFB  F010         	call	_i2c_idle	;wreg free
  7017  0021D4  0012               	return		;funcret
  7018  0021D6                     __end_of_i2c_stop:
  7019                           	opt stack 0
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon2	equ	0xFF1
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           indf1	equ	0xFE7
  7030                           postinc1	equ	0xFE6
  7031                           postdec1	equ	0xFE5
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           fsr2h	equ	0xFDA
  7037                           fsr2l	equ	0xFD9
  7038                           status	equ	0xFD8
  7039                           
  7040 ;; *************** function _i2c_start *****************
  7041 ;; Defined at:
  7042 ;;		line 36 in file "i2c.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      void 
  7049 ;; Registers used:
  7050 ;;		cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7056 ;;      Params:         0       0       0       0       0       0       0
  7057 ;;      Locals:         0       0       0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0
  7059 ;;      Totals:         0       0       0       0       0       0       0
  7060 ;;Total ram usage:        0 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    2
  7063 ;; This function calls:
  7064 ;;		_i2c_idle
  7065 ;; This function is called by:
  7066 ;;		_write_ext_eeprom
  7067 ;;		_read_ext_eeprom
  7068 ;;		_write_ds1307
  7069 ;;		_read_ds1307
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text28
  7074  0021D6                     __ptext28:
  7075                           	opt stack 0
  7076  0021D6                     _i2c_start:
  7077                           	opt stack 26
  7078                           
  7079                           ;i2c.c: 38: SEN = 1;
  7080                           
  7081                           ;incstack = 0
  7082  0021D6  80C5               	bsf	4037,0,c	;volatile
  7083                           
  7084                           ;i2c.c: 39: i2c_idle();
  7085  0021D8  ECFB  F010         	call	_i2c_idle	;wreg free
  7086  0021DC  0012               	return		;funcret
  7087  0021DE                     __end_of_i2c_start:
  7088                           	opt stack 0
  7089                           tblptru	equ	0xFF8
  7090                           tblptrh	equ	0xFF7
  7091                           tblptrl	equ	0xFF6
  7092                           tablat	equ	0xFF5
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           intcon2	equ	0xFF1
  7096                           postinc0	equ	0xFEE
  7097                           wreg	equ	0xFE8
  7098                           indf1	equ	0xFE7
  7099                           postinc1	equ	0xFE6
  7100                           postdec1	equ	0xFE5
  7101                           fsr1h	equ	0xFE2
  7102                           fsr1l	equ	0xFE1
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _i2c_rep_start *****************
  7110 ;; Defined at:
  7111 ;;		line 48 in file "i2c.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      void 
  7118 ;; Registers used:
  7119 ;;		cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7125 ;;      Params:         0       0       0       0       0       0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0
  7127 ;;      Temps:          0       0       0       0       0       0       0
  7128 ;;      Totals:         0       0       0       0       0       0       0
  7129 ;;Total ram usage:        0 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    2
  7132 ;; This function calls:
  7133 ;;		_i2c_idle
  7134 ;; This function is called by:
  7135 ;;		_read_ext_eeprom
  7136 ;;		_read_ds1307
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text29
  7141  0021DE                     __ptext29:
  7142                           	opt stack 0
  7143  0021DE                     _i2c_rep_start:
  7144                           	opt stack 26
  7145                           
  7146                           ;i2c.c: 50: RSEN = 1;
  7147                           
  7148                           ;incstack = 0
  7149  0021DE  82C5               	bsf	4037,1,c	;volatile
  7150                           
  7151                           ;i2c.c: 51: i2c_idle();
  7152  0021E0  ECFB  F010         	call	_i2c_idle	;wreg free
  7153  0021E4  0012               	return		;funcret
  7154  0021E6                     __end_of_i2c_rep_start:
  7155                           	opt stack 0
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodl	equ	0xFF3
  7161                           intcon	equ	0xFF2
  7162                           intcon2	equ	0xFF1
  7163                           postinc0	equ	0xFEE
  7164                           wreg	equ	0xFE8
  7165                           indf1	equ	0xFE7
  7166                           postinc1	equ	0xFE6
  7167                           postdec1	equ	0xFE5
  7168                           fsr1h	equ	0xFE2
  7169                           fsr1l	equ	0xFE1
  7170                           indf2	equ	0xFDF
  7171                           postinc2	equ	0xFDE
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function _i2c_read *****************
  7177 ;; Defined at:
  7178 ;;		line 72 in file "i2c.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;		None
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      unsigned char 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7192 ;;      Params:         0       0       0       0       0       0       0
  7193 ;;      Locals:         0       0       0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0       0       0
  7195 ;;      Totals:         0       0       0       0       0       0       0
  7196 ;;Total ram usage:        0 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    3
  7199 ;; This function calls:
  7200 ;;		_i2c_rx_mode
  7201 ;; This function is called by:
  7202 ;;		_read_ext_eeprom
  7203 ;;		_read_ds1307
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text30
  7208  0021E6                     __ptext30:
  7209                           	opt stack 0
  7210  0021E6                     _i2c_read:
  7211                           	opt stack 25
  7212                           
  7213                           ;i2c.c: 74: i2c_rx_mode();
  7214                           
  7215                           ;incstack = 0
  7216  0021E6  ECF7  F010         	call	_i2c_rx_mode	;wreg free
  7217                           
  7218                           ;i2c.c: 77: return SSPBUF;
  7219  0021EA  50C9               	movf	4041,w,c	;volatile
  7220  0021EC  0012               	return	
  7221  0021EE                     __end_of_i2c_read:
  7222                           	opt stack 0
  7223                           tblptru	equ	0xFF8
  7224                           tblptrh	equ	0xFF7
  7225                           tblptrl	equ	0xFF6
  7226                           tablat	equ	0xFF5
  7227                           prodl	equ	0xFF3
  7228                           intcon	equ	0xFF2
  7229                           intcon2	equ	0xFF1
  7230                           postinc0	equ	0xFEE
  7231                           wreg	equ	0xFE8
  7232                           indf1	equ	0xFE7
  7233                           postinc1	equ	0xFE6
  7234                           postdec1	equ	0xFE5
  7235                           fsr1h	equ	0xFE2
  7236                           fsr1l	equ	0xFE1
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function _i2c_rx_mode *****************
  7244 ;; Defined at:
  7245 ;;		line 60 in file "i2c.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;		None
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  1    wreg      void 
  7252 ;; Registers used:
  7253 ;;		cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7259 ;;      Params:         0       0       0       0       0       0       0
  7260 ;;      Locals:         0       0       0       0       0       0       0
  7261 ;;      Temps:          0       0       0       0       0       0       0
  7262 ;;      Totals:         0       0       0       0       0       0       0
  7263 ;;Total ram usage:        0 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    2
  7266 ;; This function calls:
  7267 ;;		_i2c_idle
  7268 ;; This function is called by:
  7269 ;;		_i2c_read
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text31
  7274  0021EE                     __ptext31:
  7275                           	opt stack 0
  7276  0021EE                     _i2c_rx_mode:
  7277                           	opt stack 25
  7278                           
  7279                           ;i2c.c: 62: RCEN = 1;
  7280                           
  7281                           ;incstack = 0
  7282  0021EE  86C5               	bsf	4037,3,c	;volatile
  7283                           
  7284                           ;i2c.c: 63: i2c_idle();
  7285  0021F0  ECFB  F010         	call	_i2c_idle	;wreg free
  7286  0021F4  0012               	return		;funcret
  7287  0021F6                     __end_of_i2c_rx_mode:
  7288                           	opt stack 0
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           postinc0	equ	0xFEE
  7297                           wreg	equ	0xFE8
  7298                           indf1	equ	0xFE7
  7299                           postinc1	equ	0xFE6
  7300                           postdec1	equ	0xFE5
  7301                           fsr1h	equ	0xFE2
  7302                           fsr1l	equ	0xFE1
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8
  7308                           
  7309 ;; *************** function _i2c_idle *****************
  7310 ;; Defined at:
  7311 ;;		line 22 in file "i2c.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		None
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7325 ;;      Params:         0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    1
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_i2c_start
  7336 ;;		_i2c_stop
  7337 ;;		_i2c_rep_start
  7338 ;;		_i2c_write
  7339 ;;		_i2c_rx_mode
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text32
  7344  0021F6                     __ptext32:
  7345                           	opt stack 0
  7346  0021F6                     _i2c_idle:
  7347                           	opt stack 26
  7348  0021F6                     l602:
  7349  0021F6  A69E               	btfss	3998,3,c	;volatile
  7350  0021F8  D7FE               	goto	l602
  7351                           
  7352                           ;i2c.c: 25: SSPIF = 0;
  7353  0021FA  969E               	bcf	3998,3,c	;volatile
  7354  0021FC  0012               	return		;funcret
  7355  0021FE                     __end_of_i2c_idle:
  7356                           	opt stack 0
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodl	equ	0xFF3
  7362                           intcon	equ	0xFF2
  7363                           intcon2	equ	0xFF1
  7364                           postinc0	equ	0xFEE
  7365                           wreg	equ	0xFE8
  7366                           indf1	equ	0xFE7
  7367                           postinc1	equ	0xFE6
  7368                           postdec1	equ	0xFE5
  7369                           fsr1h	equ	0xFE2
  7370                           fsr1l	equ	0xFE1
  7371                           indf2	equ	0xFDF
  7372                           postinc2	equ	0xFDE
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function _puts *****************
  7378 ;; Defined at:
  7379 ;;		line 89 in file "uart.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  s               2   15[COMRAM] PTR const unsigned char 
  7382 ;;		 -> STR_12(3), 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  2   15[COMRAM] int 
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7394 ;;      Params:         2       0       0       0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0
  7396 ;;      Temps:          0       0       0       0       0       0       0
  7397 ;;      Totals:         2       0       0       0       0       0       0
  7398 ;;Total ram usage:        2 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    2
  7401 ;; This function calls:
  7402 ;;		_putch
  7403 ;; This function is called by:
  7404 ;;		_log_fun
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text33
  7409  00205C                     __ptext33:
  7410                           	opt stack 0
  7411  00205C                     _puts:
  7412                           	opt stack 26
  7413                           
  7414                           ;uart.c: 91: while(*s)
  7415                           
  7416                           ;incstack = 0
  7417  00205C  D00A               	goto	l3803
  7418  00205E                     l3799:
  7419                           
  7420                           ;uart.c: 92: {
  7421                           ;uart.c: 93: putch(*s++);
  7422  00205E  C010  FFF6         	movff	puts@s,tblptrl
  7423  002062  C011  FFF7         	movff	puts@s+1,tblptrh
  7424  002066                     	if	0	;tblptru may be non-zero
  7425  002066                     	endif
  7426  002066                     	if	0	;tblptru may be non-zero
  7427  002066                     	endif
  7428  002066  0008               	tblrd		*
  7429  002068  50F5               	movf	tablat,w,c
  7430  00206A  ECE1  F010         	call	_putch
  7431  00206E  4A10               	infsnz	puts@s,f,c
  7432  002070  2A11               	incf	puts@s+1,f,c
  7433  002072                     l3803:
  7434  002072  C010  FFF6         	movff	puts@s,tblptrl
  7435  002076  C011  FFF7         	movff	puts@s+1,tblptrh
  7436  00207A                     	if	0	;tblptru may be non-zero
  7437  00207A                     	endif
  7438  00207A                     	if	0	;tblptru may be non-zero
  7439  00207A                     	endif
  7440  00207A  0008               	tblrd		*
  7441  00207C  50F5               	movf	tablat,w,c
  7442  00207E  0900               	iorlw	0
  7443  002080  B4D8               	btfsc	status,2,c
  7444  002082  0012               	return	
  7445  002084  D7EC               	goto	l3799
  7446  002086                     __end_of_puts:
  7447                           	opt stack 0
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodl	equ	0xFF3
  7453                           intcon	equ	0xFF2
  7454                           intcon2	equ	0xFF1
  7455                           postinc0	equ	0xFEE
  7456                           wreg	equ	0xFE8
  7457                           indf1	equ	0xFE7
  7458                           postinc1	equ	0xFE6
  7459                           postdec1	equ	0xFE5
  7460                           fsr1h	equ	0xFE2
  7461                           fsr1l	equ	0xFE1
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _putch *****************
  7469 ;; Defined at:
  7470 ;;		line 78 in file "uart.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  byte            1    wreg     unsigned char 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  byte            1   14[COMRAM] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      void 
  7477 ;; Registers used:
  7478 ;;		wreg
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7484 ;;      Params:         0       0       0       0       0       0       0
  7485 ;;      Locals:         1       0       0       0       0       0       0
  7486 ;;      Temps:          0       0       0       0       0       0       0
  7487 ;;      Totals:         1       0       0       0       0       0       0
  7488 ;;Total ram usage:        1 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    1
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_puts
  7495 ;;		_log_fun
  7496 ;;		_getche
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text34
  7501  0021C2                     __ptext34:
  7502                           	opt stack 0
  7503  0021C2                     _putch:
  7504                           	opt stack 26
  7505                           
  7506                           ;incstack = 0
  7507                           ;putch@byte stored from wreg
  7508  0021C2  6E0F               	movwf	putch@byte,c
  7509  0021C4                     l149:
  7510  0021C4  A89E               	btfss	3998,4,c	;volatile
  7511  0021C6  D7FE               	goto	l149
  7512                           
  7513                           ;uart.c: 85: }
  7514                           ;uart.c: 86: TXREG = byte;
  7515  0021C8  C00F  FFAD         	movff	putch@byte,4013	;volatile
  7516  0021CC  0012               	return		;funcret
  7517  0021CE                     __end_of_putch:
  7518                           	opt stack 0
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           intcon2	equ	0xFF1
  7526                           postinc0	equ	0xFEE
  7527                           wreg	equ	0xFE8
  7528                           indf1	equ	0xFE7
  7529                           postinc1	equ	0xFE6
  7530                           postdec1	equ	0xFE5
  7531                           fsr1h	equ	0xFE2
  7532                           fsr1l	equ	0xFE1
  7533                           indf2	equ	0xFDF
  7534                           postinc2	equ	0xFDE
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _init_uart *****************
  7540 ;; Defined at:
  7541 ;;		line 4 in file "uart.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, status,2
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7555 ;;      Params:         0       0       0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0
  7557 ;;      Temps:          0       0       0       0       0       0       0
  7558 ;;      Totals:         0       0       0       0       0       0       0
  7559 ;;Total ram usage:        0 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    1
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_log_fun
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           	psect	text35
  7570  001F22                     __ptext35:
  7571                           	opt stack 0
  7572  001F22                     _init_uart:
  7573                           	opt stack 27
  7574                           
  7575                           ;uart.c: 7: TRISC7 = 1;
  7576                           
  7577                           ;incstack = 0
  7578  001F22  8E94               	bsf	3988,7,c	;volatile
  7579                           
  7580                           ;uart.c: 8: TRISC6 = 0;
  7581  001F24  9C94               	bcf	3988,6,c	;volatile
  7582                           
  7583                           ;uart.c: 12: CSRC = 0;
  7584  001F26  9EAC               	bcf	4012,7,c	;volatile
  7585                           
  7586                           ;uart.c: 14: TX9 = 0;
  7587  001F28  9CAC               	bcf	4012,6,c	;volatile
  7588                           
  7589                           ;uart.c: 16: TXEN = 1;
  7590  001F2A  8AAC               	bsf	4012,5,c	;volatile
  7591                           
  7592                           ;uart.c: 19: SYNC = 0;
  7593  001F2C  98AC               	bcf	4012,4,c	;volatile
  7594                           
  7595                           ;uart.c: 21: SENDB = 0;
  7596  001F2E  96AC               	bcf	4012,3,c	;volatile
  7597                           
  7598                           ;uart.c: 24: BRGH = 1;
  7599  001F30  84AC               	bsf	4012,2,c	;volatile
  7600                           
  7601                           ;uart.c: 26: TRMT = 0;
  7602  001F32  92AC               	bcf	4012,1,c	;volatile
  7603                           
  7604                           ;uart.c: 28: TX9D = 0;
  7605  001F34  90AC               	bcf	4012,0,c	;volatile
  7606                           
  7607                           ;uart.c: 33: SPEN = 1;
  7608  001F36  8EAB               	bsf	4011,7,c	;volatile
  7609                           
  7610                           ;uart.c: 35: RX9 = 0;
  7611  001F38  9CAB               	bcf	4011,6,c	;volatile
  7612                           
  7613                           ;uart.c: 37: SREN = 0;
  7614  001F3A  9AAB               	bcf	4011,5,c	;volatile
  7615                           
  7616                           ;uart.c: 39: CREN = 1;
  7617  001F3C  88AB               	bsf	4011,4,c	;volatile
  7618                           
  7619                           ;uart.c: 41: ADDEN = 0;
  7620  001F3E  96AB               	bcf	4011,3,c	;volatile
  7621                           
  7622                           ;uart.c: 43: FERR = 0;
  7623  001F40  94AB               	bcf	4011,2,c	;volatile
  7624                           
  7625                           ;uart.c: 45: OERR = 0;
  7626  001F42  92AB               	bcf	4011,1,c	;volatile
  7627                           
  7628                           ;uart.c: 47: RX9D = 0;
  7629  001F44  90AB               	bcf	4011,0,c	;volatile
  7630                           
  7631                           ;uart.c: 52: ABDOVF = 0;
  7632  001F46  9EB8               	bcf	4024,7,c	;volatile
  7633                           
  7634                           ;uart.c: 54: RCIDL = 1;
  7635  001F48  8CB8               	bsf	4024,6,c	;volatile
  7636                           
  7637                           ;uart.c: 56: SCKP = 0;
  7638  001F4A  98B8               	bcf	4024,4,c	;volatile
  7639                           
  7640                           ;uart.c: 58: BRG16 = 0;
  7641  001F4C  96B8               	bcf	4024,3,c	;volatile
  7642                           
  7643                           ;uart.c: 60: WUE = 0;
  7644  001F4E  92B8               	bcf	4024,1,c	;volatile
  7645                           
  7646                           ;uart.c: 62: ABDEN = 0;
  7647  001F50  90B8               	bcf	4024,0,c	;volatile
  7648                           
  7649                           ;uart.c: 66: SPBRG = 129;
  7650  001F52  0E81               	movlw	129
  7651  001F54  6EAF               	movwf	4015,c	;volatile
  7652                           
  7653                           ;uart.c: 69: TXIE = 1;
  7654  001F56  889D               	bsf	3997,4,c	;volatile
  7655                           
  7656                           ;uart.c: 71: TXIF = 0;
  7657  001F58  989E               	bcf	3998,4,c	;volatile
  7658                           
  7659                           ;uart.c: 73: RCIE = 1;
  7660  001F5A  8A9D               	bsf	3997,5,c	;volatile
  7661                           
  7662                           ;uart.c: 75: RCIF = 0;
  7663  001F5C  9A9E               	bcf	3998,5,c	;volatile
  7664  001F5E  0012               	return		;funcret
  7665  001F60                     __end_of_init_uart:
  7666                           	opt stack 0
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           intcon2	equ	0xFF1
  7674                           postinc0	equ	0xFEE
  7675                           wreg	equ	0xFE8
  7676                           indf1	equ	0xFE7
  7677                           postinc1	equ	0xFE6
  7678                           postdec1	equ	0xFE5
  7679                           fsr1h	equ	0xFE2
  7680                           fsr1l	equ	0xFE1
  7681                           indf2	equ	0xFDF
  7682                           postinc2	equ	0xFDE
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687 ;; *************** function _clcd_putch *****************
  7688 ;; Defined at:
  7689 ;;		line 51 in file "clcd.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  data            1    wreg     const unsigned char 
  7692 ;;  addr            1   26[COMRAM] unsigned char 
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;  data            1   27[COMRAM] const unsigned char 
  7695 ;; Return value:  Size  Location     Type
  7696 ;;                  1    wreg      void 
  7697 ;; Registers used:
  7698 ;;		wreg, status,2, cstack
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7704 ;;      Params:         1       0       0       0       0       0       0
  7705 ;;      Locals:         1       0       0       0       0       0       0
  7706 ;;      Temps:          0       0       0       0       0       0       0
  7707 ;;      Totals:         2       0       0       0       0       0       0
  7708 ;;Total ram usage:        2 bytes
  7709 ;; Hardware stack levels used:    1
  7710 ;; Hardware stack levels required when called:    2
  7711 ;; This function calls:
  7712 ;;		_clcd_write
  7713 ;; This function is called by:
  7714 ;;		_display_the_event
  7715 ;;		_give_password
  7716 ;;		_display_menu
  7717 ;;		_log_fun
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text36
  7722  002158                     __ptext36:
  7723                           	opt stack 0
  7724  002158                     _clcd_putch:
  7725                           	opt stack 27
  7726                           
  7727                           ;incstack = 0
  7728                           ;clcd_putch@data stored from wreg
  7729  002158  6E1C               	movwf	clcd_putch@data,c
  7730                           
  7731                           ;clcd.c: 53: clcd_write(addr, 0);
  7732  00215A  0E00               	movlw	0
  7733  00215C  6E0F               	movwf	clcd_write@control_bit,c
  7734  00215E  501B               	movf	clcd_putch@addr,w,c
  7735  002160  EC43  F010         	call	_clcd_write
  7736                           
  7737                           ;clcd.c: 54: clcd_write(data, 1);
  7738  002164  0E01               	movlw	1
  7739  002166  6E0F               	movwf	clcd_write@control_bit,c
  7740  002168  501C               	movf	clcd_putch@data,w,c
  7741  00216A  EC43  F010         	call	_clcd_write
  7742  00216E  0012               	return		;funcret
  7743  002170                     __end_of_clcd_putch:
  7744                           	opt stack 0
  7745                           tblptru	equ	0xFF8
  7746                           tblptrh	equ	0xFF7
  7747                           tblptrl	equ	0xFF6
  7748                           tablat	equ	0xFF5
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           intcon2	equ	0xFF1
  7752                           postinc0	equ	0xFEE
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           postinc1	equ	0xFE6
  7756                           postdec1	equ	0xFE5
  7757                           fsr1h	equ	0xFE2
  7758                           fsr1l	equ	0xFE1
  7759                           indf2	equ	0xFDF
  7760                           postinc2	equ	0xFDE
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _clcd_print *****************
  7766 ;; Defined at:
  7767 ;;		line 42 in file "clcd.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  data            2   20[COMRAM] PTR const unsigned char 
  7770 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_11(16), 
  7771 ;;		 -> menu(85), STR_10(14), STR_9(17), STR_8(17), 
  7772 ;;		 -> STR_7(9), STR_6(10), STR_4(16), gear(24), 
  7773 ;;		 -> STR_3(3), STR_2(16), STR_1(16), time(9), 
  7774 ;;  addr            1   22[COMRAM] unsigned char 
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;		None
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7786 ;;      Params:         3       0       0       0       0       0       0
  7787 ;;      Locals:         0       0       0       0       0       0       0
  7788 ;;      Temps:          0       0       0       0       0       0       0
  7789 ;;      Totals:         3       0       0       0       0       0       0
  7790 ;;Total ram usage:        3 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    2
  7793 ;; This function calls:
  7794 ;;		_clcd_write
  7795 ;; This function is called by:
  7796 ;;		_display_time
  7797 ;;		_init_config
  7798 ;;		_main
  7799 ;;		_display_the_event
  7800 ;;		_give_password
  7801 ;;		_display_menu
  7802 ;;		_log_fun
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text37
  7807  001D52                     __ptext37:
  7808                           	opt stack 0
  7809  001D52                     _clcd_print:
  7810                           	opt stack 27
  7811                           
  7812                           ;clcd.c: 44: clcd_write(addr, 0);
  7813                           
  7814                           ;incstack = 0
  7815  001D52  0E00               	movlw	0
  7816  001D54  6E0F               	movwf	clcd_write@control_bit,c
  7817  001D56  5017               	movf	clcd_print@addr,w,c
  7818  001D58  EC43  F010         	call	_clcd_write
  7819                           
  7820                           ;clcd.c: 45: while (*data != '\0')
  7821  001D5C  D016               	goto	l3781
  7822  001D5E                     l3777:
  7823                           
  7824                           ;clcd.c: 46: {
  7825                           ;clcd.c: 47: clcd_write(*data++, 1);
  7826  001D5E  0E01               	movlw	1
  7827  001D60  6E0F               	movwf	clcd_write@control_bit,c
  7828  001D62  C015  FFF6         	movff	clcd_print@data,tblptrl
  7829  001D66  C016  FFF7         	movff	clcd_print@data+1,tblptrh
  7830  001D6A  6AF8               	clrf	tblptru,c
  7831  001D6C  0E05               	movlw	(high __ramtop+-1)
  7832  001D6E  64F7               	cpfsgt	tblptrh,c
  7833  001D70  D003               	bra	u3827
  7834  001D72  0008               	tblrd		*
  7835  001D74  50F5               	movf	tablat,w,c
  7836  001D76  D005               	bra	u3820
  7837  001D78                     u3827:
  7838  001D78  CFF6 FFE9          	movff	tblptrl,fsr0l
  7839  001D7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  7840  001D80  50EF               	movf	indf0,w,c
  7841  001D82                     u3820:
  7842  001D82  EC43  F010         	call	_clcd_write
  7843  001D86  4A15               	infsnz	clcd_print@data,f,c
  7844  001D88  2A16               	incf	clcd_print@data+1,f,c
  7845  001D8A                     l3781:
  7846  001D8A  C015  FFF6         	movff	clcd_print@data,tblptrl
  7847  001D8E  C016  FFF7         	movff	clcd_print@data+1,tblptrh
  7848  001D92  6AF8               	clrf	tblptru,c
  7849  001D94  0E05               	movlw	(high __ramtop+-1)
  7850  001D96  64F7               	cpfsgt	tblptrh,c
  7851  001D98  D003               	bra	u3837
  7852  001D9A  0008               	tblrd		*
  7853  001D9C  50F5               	movf	tablat,w,c
  7854  001D9E  D005               	bra	u3830
  7855  001DA0                     u3837:
  7856  001DA0  CFF6 FFE9          	movff	tblptrl,fsr0l
  7857  001DA4  CFF7 FFEA          	movff	tblptrh,fsr0h
  7858  001DA8  50EF               	movf	indf0,w,c
  7859  001DAA                     u3830:
  7860  001DAA  0900               	iorlw	0
  7861  001DAC  B4D8               	btfsc	status,2,c
  7862  001DAE  0012               	return	
  7863  001DB0  D7D6               	goto	l3777
  7864  001DB2                     __end_of_clcd_print:
  7865                           	opt stack 0
  7866                           tblptru	equ	0xFF8
  7867                           tblptrh	equ	0xFF7
  7868                           tblptrl	equ	0xFF6
  7869                           tablat	equ	0xFF5
  7870                           prodl	equ	0xFF3
  7871                           intcon	equ	0xFF2
  7872                           intcon2	equ	0xFF1
  7873                           indf0	equ	0xFEF
  7874                           postinc0	equ	0xFEE
  7875                           fsr0h	equ	0xFEA
  7876                           fsr0l	equ	0xFE9
  7877                           wreg	equ	0xFE8
  7878                           indf1	equ	0xFE7
  7879                           postinc1	equ	0xFE6
  7880                           postdec1	equ	0xFE5
  7881                           fsr1h	equ	0xFE2
  7882                           fsr1l	equ	0xFE1
  7883                           indf2	equ	0xFDF
  7884                           postinc2	equ	0xFDE
  7885                           fsr2h	equ	0xFDA
  7886                           fsr2l	equ	0xFD9
  7887                           status	equ	0xFD8
  7888                           
  7889 ;; *************** function _clcd_write *****************
  7890 ;; Defined at:
  7891 ;;		line 4 in file "clcd.c"
  7892 ;; Parameters:    Size  Location     Type
  7893 ;;  byte            1    wreg     unsigned char 
  7894 ;;  control_bit     1   14[COMRAM] unsigned char 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  byte            1   15[COMRAM] unsigned char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7906 ;;      Params:         1       0       0       0       0       0       0
  7907 ;;      Locals:         1       0       0       0       0       0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0
  7909 ;;      Totals:         2       0       0       0       0       0       0
  7910 ;;Total ram usage:        2 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    1
  7913 ;; This function calls:
  7914 ;;		Nothing
  7915 ;; This function is called by:
  7916 ;;		_init_clcd
  7917 ;;		_clcd_print
  7918 ;;		_clcd_putch
  7919 ;;		_give_password
  7920 ;;		_display_menu
  7921 ;;		_log_fun
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           	psect	text38
  7926  002086                     __ptext38:
  7927                           	opt stack 0
  7928  002086                     _clcd_write:
  7929                           	opt stack 27
  7930                           
  7931                           ;incstack = 0
  7932                           ;clcd_write@byte stored from wreg
  7933  002086  6E10               	movwf	clcd_write@byte,c
  7934                           
  7935                           ;clcd.c: 6: RC1 = control_bit;
  7936  002088  A00F               	btfss	clcd_write@control_bit,0,c
  7937  00208A  D002               	goto	u3650
  7938  00208C  8282               	bsf	3970,1,c	;volatile
  7939  00208E  D001               	goto	l3653
  7940  002090                     u3650:
  7941  002090  9282               	bcf	3970,1,c	;volatile
  7942  002092                     l3653:
  7943                           
  7944                           ;clcd.c: 7: PORTD = byte;
  7945  002092  C010  FF83         	movff	clcd_write@byte,3971	;volatile
  7946                           
  7947                           ;clcd.c: 10: RC2 = 1;
  7948  002096  8482               	bsf	3970,2,c	;volatile
  7949                           
  7950                           ;clcd.c: 11: RC2 = 0;
  7951  002098  9482               	bcf	3970,2,c	;volatile
  7952                           
  7953                           ;clcd.c: 13: TRISD7 = 0xFF;
  7954  00209A  8E95               	bsf	3989,7,c	;volatile
  7955                           
  7956                           ;clcd.c: 14: RC0 = 1;
  7957  00209C  8082               	bsf	3970,0,c	;volatile
  7958                           
  7959                           ;clcd.c: 15: RC1 = 0;
  7960  00209E  9282               	bcf	3970,1,c	;volatile
  7961  0020A0                     l3665:
  7962                           
  7963                           ;clcd.c: 18: {
  7964                           ;clcd.c: 19: RC2 = 1;
  7965  0020A0  8482               	bsf	3970,2,c	;volatile
  7966                           
  7967                           ;clcd.c: 20: RC2 = 0;
  7968  0020A2  9482               	bcf	3970,2,c	;volatile
  7969                           
  7970                           ;clcd.c: 21: } while (RD7);
  7971  0020A4  BE83               	btfsc	3971,7,c	;volatile
  7972  0020A6  D7FC               	goto	l3665
  7973                           
  7974                           ;clcd.c: 23: RC0 = 0;
  7975  0020A8  9082               	bcf	3970,0,c	;volatile
  7976                           
  7977                           ;clcd.c: 24: TRISD7 = 0x00;
  7978  0020AA  9E95               	bcf	3989,7,c	;volatile
  7979  0020AC  0012               	return		;funcret
  7980  0020AE                     __end_of_clcd_write:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodl	equ	0xFF3
  7987                           intcon	equ	0xFF2
  7988                           intcon2	equ	0xFF1
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           indf1	equ	0xFE7
  7995                           postinc1	equ	0xFE6
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           fsr2h	equ	0xFDA
  8002                           fsr2l	equ	0xFD9
  8003                           status	equ	0xFD8
  8004                           
  8005 ;; *************** function ___wmul *****************
  8006 ;; Defined at:
  8007 ;;		line 15 in file "/opt/microchip/xc8/v1.36/sources/common/Umul16.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  multiplier      2   14[COMRAM] unsigned int 
  8010 ;;  multiplicand    2   16[COMRAM] unsigned int 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  product         2   18[COMRAM] unsigned int 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  2   14[COMRAM] unsigned int 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0, prodl, prodh
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8022 ;;      Params:         4       0       0       0       0       0       0
  8023 ;;      Locals:         2       0       0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0
  8025 ;;      Totals:         6       0       0       0       0       0       0
  8026 ;;Total ram usage:        6 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    1
  8029 ;; This function calls:
  8030 ;;		Nothing
  8031 ;; This function is called by:
  8032 ;;		_display_the_event
  8033 ;;		_store_event
  8034 ;;		_display_menu
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text39
  8039  0020AE                     __ptext39:
  8040                           	opt stack 0
  8041  0020AE                     ___wmul:
  8042                           	opt stack 27
  8043                           
  8044                           ;incstack = 0
  8045  0020AE  500F               	movf	___wmul@multiplier,w,c
  8046  0020B0  0211               	mulwf	___wmul@multiplicand,c
  8047  0020B2  CFF3 F013          	movff	prodl,___wmul@product
  8048  0020B6  CFF4 F014          	movff	prodh,___wmul@product+1
  8049  0020BA  500F               	movf	___wmul@multiplier,w,c
  8050  0020BC  0212               	mulwf	___wmul@multiplicand+1,c
  8051  0020BE  50F3               	movf	prodl,w,c
  8052  0020C0  2614               	addwf	___wmul@product+1,f,c
  8053  0020C2  5010               	movf	___wmul@multiplier+1,w,c
  8054  0020C4  0211               	mulwf	___wmul@multiplicand,c
  8055  0020C6  50F3               	movf	prodl,w,c
  8056  0020C8  2614               	addwf	___wmul@product+1,f,c
  8057  0020CA  C013  F00F         	movff	___wmul@product,?___wmul
  8058  0020CE  C014  F010         	movff	___wmul@product+1,?___wmul+1
  8059  0020D2  0012               	return	
  8060  0020D4                     __end_of___wmul:
  8061                           	opt stack 0
  8062                           tblptru	equ	0xFF8
  8063                           tblptrh	equ	0xFF7
  8064                           tblptrl	equ	0xFF6
  8065                           tablat	equ	0xFF5
  8066                           prodh	equ	0xFF4
  8067                           prodl	equ	0xFF3
  8068                           intcon	equ	0xFF2
  8069                           intcon2	equ	0xFF1
  8070                           indf0	equ	0xFEF
  8071                           postinc0	equ	0xFEE
  8072                           fsr0h	equ	0xFEA
  8073                           fsr0l	equ	0xFE9
  8074                           wreg	equ	0xFE8
  8075                           indf1	equ	0xFE7
  8076                           postinc1	equ	0xFE6
  8077                           postdec1	equ	0xFE5
  8078                           fsr1h	equ	0xFE2
  8079                           fsr1l	equ	0xFE1
  8080                           indf2	equ	0xFDF
  8081                           postinc2	equ	0xFDE
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function ___lwmod *****************
  8087 ;; Defined at:
  8088 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwmod.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  dividend        2   21[COMRAM] unsigned int 
  8091 ;;  divisor         2   23[COMRAM] unsigned int 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  counter         1   25[COMRAM] unsigned char 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  2   21[COMRAM] unsigned int 
  8096 ;; Registers used:
  8097 ;;		wreg, status,2, status,0
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8103 ;;      Params:         4       0       0       0       0       0       0
  8104 ;;      Locals:         1       0       0       0       0       0       0
  8105 ;;      Temps:          0       0       0       0       0       0       0
  8106 ;;      Totals:         5       0       0       0       0       0       0
  8107 ;;Total ram usage:        5 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    1
  8110 ;; This function calls:
  8111 ;;		Nothing
  8112 ;; This function is called by:
  8113 ;;		_display_the_event
  8114 ;;		_give_password
  8115 ;;		_store_event
  8116 ;;		_display_menu
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text40
  8121  001EA2                     __ptext40:
  8122                           	opt stack 0
  8123  001EA2                     ___lwmod:
  8124                           	opt stack 28
  8125                           
  8126                           ;incstack = 0
  8127  001EA2  5018               	movf	___lwmod@divisor,w,c
  8128  001EA4  1019               	iorwf	___lwmod@divisor+1,w,c
  8129  001EA6  B4D8               	btfsc	status,2,c
  8130  001EA8  D018               	goto	l1084
  8131  001EAA  0E01               	movlw	1
  8132  001EAC  6E1A               	movwf	___lwmod@counter,c
  8133  001EAE  D004               	goto	l3927
  8134  001EB0                     l3925:
  8135  001EB0  90D8               	bcf	status,0,c
  8136  001EB2  3618               	rlcf	___lwmod@divisor,f,c
  8137  001EB4  3619               	rlcf	___lwmod@divisor+1,f,c
  8138  001EB6  2A1A               	incf	___lwmod@counter,f,c
  8139  001EB8                     l3927:
  8140  001EB8  AE19               	btfss	___lwmod@divisor+1,7,c
  8141  001EBA  D7FA               	goto	l3925
  8142  001EBC                     l3929:
  8143  001EBC  5018               	movf	___lwmod@divisor,w,c
  8144  001EBE  5C16               	subwf	___lwmod@dividend,w,c
  8145  001EC0  5019               	movf	___lwmod@divisor+1,w,c
  8146  001EC2  5817               	subwfb	___lwmod@dividend+1,w,c
  8147  001EC4  A0D8               	btfss	status,0,c
  8148  001EC6  D004               	goto	l3933
  8149  001EC8  5018               	movf	___lwmod@divisor,w,c
  8150  001ECA  5E16               	subwf	___lwmod@dividend,f,c
  8151  001ECC  5019               	movf	___lwmod@divisor+1,w,c
  8152  001ECE  5A17               	subwfb	___lwmod@dividend+1,f,c
  8153  001ED0                     l3933:
  8154  001ED0  90D8               	bcf	status,0,c
  8155  001ED2  3219               	rrcf	___lwmod@divisor+1,f,c
  8156  001ED4  3218               	rrcf	___lwmod@divisor,f,c
  8157  001ED6  2E1A               	decfsz	___lwmod@counter,f,c
  8158  001ED8  D7F1               	goto	l3929
  8159  001EDA                     l1084:
  8160  001EDA  C016  F016         	movff	___lwmod@dividend,?___lwmod
  8161  001EDE  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  8162  001EE2  0012               	return		;funcret
  8163  001EE4                     __end_of___lwmod:
  8164                           	opt stack 0
  8165                           tblptru	equ	0xFF8
  8166                           tblptrh	equ	0xFF7
  8167                           tblptrl	equ	0xFF6
  8168                           tablat	equ	0xFF5
  8169                           prodh	equ	0xFF4
  8170                           prodl	equ	0xFF3
  8171                           intcon	equ	0xFF2
  8172                           intcon2	equ	0xFF1
  8173                           indf0	equ	0xFEF
  8174                           postinc0	equ	0xFEE
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           indf1	equ	0xFE7
  8179                           postinc1	equ	0xFE6
  8180                           postdec1	equ	0xFE5
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           fsr2h	equ	0xFDA
  8186                           fsr2l	equ	0xFD9
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function ___lwdiv *****************
  8190 ;; Defined at:
  8191 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwdiv.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  dividend        2   14[COMRAM] unsigned int 
  8194 ;;  divisor         2   16[COMRAM] unsigned int 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  quotient        2   19[COMRAM] unsigned int 
  8197 ;;  counter         1   18[COMRAM] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  2   14[COMRAM] unsigned int 
  8200 ;; Registers used:
  8201 ;;		wreg, status,2, status,0
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8207 ;;      Params:         4       0       0       0       0       0       0
  8208 ;;      Locals:         3       0       0       0       0       0       0
  8209 ;;      Temps:          0       0       0       0       0       0       0
  8210 ;;      Totals:         7       0       0       0       0       0       0
  8211 ;;Total ram usage:        7 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    1
  8214 ;; This function calls:
  8215 ;;		Nothing
  8216 ;; This function is called by:
  8217 ;;		_display_the_event
  8218 ;;		_give_password
  8219 ;;		_store_event
  8220 ;;		_display_menu
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text41
  8225  001E08                     __ptext41:
  8226                           	opt stack 0
  8227  001E08                     ___lwdiv:
  8228                           	opt stack 28
  8229                           
  8230                           ;incstack = 0
  8231  001E08  0E00               	movlw	0
  8232  001E0A  6E15               	movwf	___lwdiv@quotient+1,c
  8233  001E0C  0E00               	movlw	0
  8234  001E0E  6E14               	movwf	___lwdiv@quotient,c
  8235  001E10  5011               	movf	___lwdiv@divisor,w,c
  8236  001E12  1012               	iorwf	___lwdiv@divisor+1,w,c
  8237  001E14  B4D8               	btfsc	status,2,c
  8238  001E16  D01C               	goto	l1074
  8239  001E18  0E01               	movlw	1
  8240  001E1A  6E13               	movwf	___lwdiv@counter,c
  8241  001E1C  D004               	goto	l3907
  8242  001E1E                     l3905:
  8243  001E1E  90D8               	bcf	status,0,c
  8244  001E20  3611               	rlcf	___lwdiv@divisor,f,c
  8245  001E22  3612               	rlcf	___lwdiv@divisor+1,f,c
  8246  001E24  2A13               	incf	___lwdiv@counter,f,c
  8247  001E26                     l3907:
  8248  001E26  AE12               	btfss	___lwdiv@divisor+1,7,c
  8249  001E28  D7FA               	goto	l3905
  8250  001E2A                     l3909:
  8251  001E2A  90D8               	bcf	status,0,c
  8252  001E2C  3614               	rlcf	___lwdiv@quotient,f,c
  8253  001E2E  3615               	rlcf	___lwdiv@quotient+1,f,c
  8254  001E30  5011               	movf	___lwdiv@divisor,w,c
  8255  001E32  5C0F               	subwf	___lwdiv@dividend,w,c
  8256  001E34  5012               	movf	___lwdiv@divisor+1,w,c
  8257  001E36  5810               	subwfb	___lwdiv@dividend+1,w,c
  8258  001E38  A0D8               	btfss	status,0,c
  8259  001E3A  D005               	goto	l3917
  8260  001E3C  5011               	movf	___lwdiv@divisor,w,c
  8261  001E3E  5E0F               	subwf	___lwdiv@dividend,f,c
  8262  001E40  5012               	movf	___lwdiv@divisor+1,w,c
  8263  001E42  5A10               	subwfb	___lwdiv@dividend+1,f,c
  8264  001E44  8014               	bsf	___lwdiv@quotient,0,c
  8265  001E46                     l3917:
  8266  001E46  90D8               	bcf	status,0,c
  8267  001E48  3212               	rrcf	___lwdiv@divisor+1,f,c
  8268  001E4A  3211               	rrcf	___lwdiv@divisor,f,c
  8269  001E4C  2E13               	decfsz	___lwdiv@counter,f,c
  8270  001E4E  D7ED               	goto	l3909
  8271  001E50                     l1074:
  8272  001E50  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  8273  001E54  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8274  001E58  0012               	return		;funcret
  8275  001E5A                     __end_of___lwdiv:
  8276                           	opt stack 0
  8277                           tblptru	equ	0xFF8
  8278                           tblptrh	equ	0xFF7
  8279                           tblptrl	equ	0xFF6
  8280                           tablat	equ	0xFF5
  8281                           prodh	equ	0xFF4
  8282                           prodl	equ	0xFF3
  8283                           intcon	equ	0xFF2
  8284                           intcon2	equ	0xFF1
  8285                           indf0	equ	0xFEF
  8286                           postinc0	equ	0xFEE
  8287                           fsr0h	equ	0xFEA
  8288                           fsr0l	equ	0xFE9
  8289                           wreg	equ	0xFE8
  8290                           indf1	equ	0xFE7
  8291                           postinc1	equ	0xFE6
  8292                           postdec1	equ	0xFE5
  8293                           fsr1h	equ	0xFE2
  8294                           fsr1l	equ	0xFE1
  8295                           indf2	equ	0xFDF
  8296                           postinc2	equ	0xFDE
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function _isr *****************
  8302 ;; Defined at:
  8303 ;;		line 7 in file "isr.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;		None
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;		None
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg, status,2, status,0
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8317 ;;      Params:         0       0       0       0       0       0       0
  8318 ;;      Locals:         0       0       0       0       0       0       0
  8319 ;;      Temps:         14       0       0       0       0       0       0
  8320 ;;      Totals:        14       0       0       0       0       0       0
  8321 ;;Total ram usage:       14 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; This function calls:
  8324 ;;		Nothing
  8325 ;; This function is called by:
  8326 ;;		Interrupt level 2
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           	psect	intcode
  8331  000008                     __pintcode:
  8332                           	opt stack 0
  8333  000008                     _isr:
  8334                           	opt stack 24
  8335                           
  8336                           ;incstack = 0
  8337  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8338  00000A  CFFA F001          	movff	pclath,??_isr
  8339  00000E  CFFB F002          	movff	pclatu,??_isr+1
  8340  000012  ED0C  F00D         	call	int_func,f	;refresh shadow registers
  8341                           pclatu	equ	0xFFB
  8342                           pclath	equ	0xFFA
  8343                           tblptru	equ	0xFF8
  8344                           tblptrh	equ	0xFF7
  8345                           tblptrl	equ	0xFF6
  8346                           tablat	equ	0xFF5
  8347                           prodh	equ	0xFF4
  8348                           prodl	equ	0xFF3
  8349                           intcon	equ	0xFF2
  8350                           intcon2	equ	0xFF1
  8351                           indf0	equ	0xFEF
  8352                           postinc0	equ	0xFEE
  8353                           fsr0h	equ	0xFEA
  8354                           fsr0l	equ	0xFE9
  8355                           wreg	equ	0xFE8
  8356                           indf1	equ	0xFE7
  8357                           postinc1	equ	0xFE6
  8358                           postdec1	equ	0xFE5
  8359                           fsr1h	equ	0xFE2
  8360                           fsr1l	equ	0xFE1
  8361                           indf2	equ	0xFDF
  8362                           postinc2	equ	0xFDE
  8363                           fsr2h	equ	0xFDA
  8364                           fsr2l	equ	0xFD9
  8365                           status	equ	0xFD8
  8366                           
  8367                           	psect	intcode_body
  8368  001A18                     __pintcode_body:
  8369                           	opt stack 24
  8370  001A18                     int_func:
  8371                           	opt stack 24
  8372  001A18  0006               	pop		; remove dummy address from shadow register refresh
  8373  001A1A  CFE9 F003          	movff	fsr0l,??_isr+2
  8374  001A1E  CFEA F004          	movff	fsr0h,??_isr+3
  8375  001A22  CFE1 F005          	movff	fsr1l,??_isr+4
  8376  001A26  CFE2 F006          	movff	fsr1h,??_isr+5
  8377  001A2A  CFD9 F007          	movff	fsr2l,??_isr+6
  8378  001A2E  CFDA F008          	movff	fsr2h,??_isr+7
  8379  001A32  CFF3 F009          	movff	prodl,??_isr+8
  8380  001A36  CFF4 F00A          	movff	prodh,??_isr+9
  8381  001A3A  CFF6 F00B          	movff	tblptrl,??_isr+10
  8382  001A3E  CFF7 F00C          	movff	tblptrh,??_isr+11
  8383  001A42  CFF8 F00D          	movff	tblptru,??_isr+12
  8384  001A46  CFF5 F00E          	movff	tablat,??_isr+13
  8385                           
  8386                           ;isr.c: 9: static unsigned short for_minute;
  8387                           ;isr.c: 10: static unsigned short count;
  8388                           ;isr.c: 11: if (TMR2IF)
  8389  001A4A  A29E               	btfss	3998,1,c	;volatile
  8390  001A4C  D01C               	goto	i2l3585
  8391                           
  8392                           ;isr.c: 12: {
  8393                           ;isr.c: 13: if (count++ == 20000)
  8394  001A4E  0100               	movlb	0	; () banked
  8395  001A50  4BA5               	infsnz	isr@count& (0+255),f,b
  8396  001A52  2BA6               	incf	(isr@count+1)& (0+255),f,b
  8397  001A54  0E21               	movlw	33
  8398  001A56  0100               	movlb	0	; () banked
  8399  001A58  19A5               	xorwf	isr@count& (0+255),w,b
  8400  001A5A  E115               	bnz	i2l3585
  8401  001A5C  0E4E               	movlw	78
  8402  001A5E  0100               	movlb	0	; () banked
  8403  001A60  19A6               	xorwf	(isr@count+1)& (0+255),w,b
  8404  001A62  A4D8               	btfss	status,2,c
  8405  001A64  D010               	goto	i2l3585
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;isr.c: 14: {
  8409                           ;isr.c: 15: blink++;
  8410  001A66  4A2F               	infsnz	_blink,f,c
  8411  001A68  2A30               	incf	_blink+1,f,c
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;isr.c: 16: if(wait_flag == 1)
  8415  001A6A  0100               	movlb	0	; () banked
  8416  001A6C  0591               	decf	_wait_flag& (0+255),w,b
  8417  001A6E  0100               	movlb	0	; () banked
  8418  001A70  1192               	iorwf	(_wait_flag+1)& (0+255),w,b
  8419  001A72  A4D8               	btfss	status,2,c
  8420  001A74  D003               	goto	i2l3583
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;isr.c: 17: wait--;
  8424  001A76  064B               	decf	_wait,f,c
  8425  001A78  A0D8               	btfss	status,0,c
  8426  001A7A  064C               	decf	_wait+1,f,c
  8427  001A7C                     i2l3583:
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;isr.c: 18: count = 0;
  8431  001A7C  0E00               	movlw	0
  8432  001A7E  0100               	movlb	0	; () banked
  8433  001A80  6FA6               	movwf	(isr@count+1)& (0+255),b
  8434  001A82  0E00               	movlw	0
  8435  001A84  6FA5               	movwf	isr@count& (0+255),b
  8436  001A86                     i2l3585:
  8437                           
  8438                           ;isr.c: 19: }
  8439                           ;isr.c: 20: }
  8440                           ;isr.c: 21: TMR2IF = 0;
  8441  001A86  929E               	bcf	3998,1,c	;volatile
  8442  001A88  C00E  FFF5         	movff	??_isr+13,tablat
  8443  001A8C  C00D  FFF8         	movff	??_isr+12,tblptru
  8444  001A90  C00C  FFF7         	movff	??_isr+11,tblptrh
  8445  001A94  C00B  FFF6         	movff	??_isr+10,tblptrl
  8446  001A98  C00A  FFF4         	movff	??_isr+9,prodh
  8447  001A9C  C009  FFF3         	movff	??_isr+8,prodl
  8448  001AA0  C008  FFDA         	movff	??_isr+7,fsr2h
  8449  001AA4  C007  FFD9         	movff	??_isr+6,fsr2l
  8450  001AA8  C006  FFE2         	movff	??_isr+5,fsr1h
  8451  001AAC  C005  FFE1         	movff	??_isr+4,fsr1l
  8452  001AB0  C004  FFEA         	movff	??_isr+3,fsr0h
  8453  001AB4  C003  FFE9         	movff	??_isr+2,fsr0l
  8454  001AB8  C002  FFFB         	movff	??_isr+1,pclatu
  8455  001ABC  C001  FFFA         	movff	??_isr,pclath
  8456  001AC0  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8457  001AC2  0011               	retfie		f
  8458  001AC4                     __end_of_isr:
  8459                           	opt stack 0
  8460                           pclatu	equ	0xFFB
  8461                           pclath	equ	0xFFA
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           intcon	equ	0xFF2
  8469                           intcon2	equ	0xFF1
  8470                           indf0	equ	0xFEF
  8471                           postinc0	equ	0xFEE
  8472                           fsr0h	equ	0xFEA
  8473                           fsr0l	equ	0xFE9
  8474                           wreg	equ	0xFE8
  8475                           indf1	equ	0xFE7
  8476                           postinc1	equ	0xFE6
  8477                           postdec1	equ	0xFE5
  8478                           fsr1h	equ	0xFE2
  8479                           fsr1l	equ	0xFE1
  8480                           indf2	equ	0xFDF
  8481                           postinc2	equ	0xFDE
  8482                           fsr2h	equ	0xFDA
  8483                           fsr2l	equ	0xFD9
  8484                           status	equ	0xFD8
  8485                           pclatu	equ	0xFFB
  8486                           pclath	equ	0xFFA
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon2	equ	0xFF1
  8495                           indf0	equ	0xFEF
  8496                           postinc0	equ	0xFEE
  8497                           fsr0h	equ	0xFEA
  8498                           fsr0l	equ	0xFE9
  8499                           wreg	equ	0xFE8
  8500                           indf1	equ	0xFE7
  8501                           postinc1	equ	0xFE6
  8502                           postdec1	equ	0xFE5
  8503                           fsr1h	equ	0xFE2
  8504                           fsr1l	equ	0xFE1
  8505                           indf2	equ	0xFDF
  8506                           postinc2	equ	0xFDE
  8507                           fsr2h	equ	0xFDA
  8508                           fsr2l	equ	0xFD9
  8509                           status	equ	0xFD8
  8510                           
  8511                           	psect	rparam
  8512  0000                     pclatu	equ	0xFFB
  8513                           pclath	equ	0xFFA
  8514                           tblptru	equ	0xFF8
  8515                           tblptrh	equ	0xFF7
  8516                           tblptrl	equ	0xFF6
  8517                           tablat	equ	0xFF5
  8518                           prodh	equ	0xFF4
  8519                           prodl	equ	0xFF3
  8520                           intcon	equ	0xFF2
  8521                           intcon2	equ	0xFF1
  8522                           indf0	equ	0xFEF
  8523                           postinc0	equ	0xFEE
  8524                           fsr0h	equ	0xFEA
  8525                           fsr0l	equ	0xFE9
  8526                           wreg	equ	0xFE8
  8527                           indf1	equ	0xFE7
  8528                           postinc1	equ	0xFE6
  8529                           postdec1	equ	0xFE5
  8530                           fsr1h	equ	0xFE2
  8531                           fsr1l	equ	0xFE1
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538                           	psect	temp
  8539  000051                     btemp:
  8540                           	opt stack 0
  8541  000051                     	ds	1
  8542  0000                     int$flags	set	btemp
  8543                           pclatu	equ	0xFFB
  8544                           pclath	equ	0xFFA
  8545                           tblptru	equ	0xFF8
  8546                           tblptrh	equ	0xFF7
  8547                           tblptrl	equ	0xFF6
  8548                           tablat	equ	0xFF5
  8549                           prodh	equ	0xFF4
  8550                           prodl	equ	0xFF3
  8551                           intcon	equ	0xFF2
  8552                           intcon2	equ	0xFF1
  8553                           indf0	equ	0xFEF
  8554                           postinc0	equ	0xFEE
  8555                           fsr0h	equ	0xFEA
  8556                           fsr0l	equ	0xFE9
  8557                           wreg	equ	0xFE8
  8558                           indf1	equ	0xFE7
  8559                           postinc1	equ	0xFE6
  8560                           postdec1	equ	0xFE5
  8561                           fsr1h	equ	0xFE2
  8562                           fsr1l	equ	0xFE1
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8


Data Sizes:
    Strings     172
    Constant    0
    Data        122
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      80
    BANK0           160     21     140
    BANK1           256      0      85
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    puts@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 85
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_11(CODE[16]), 
		 -> menu(BANK1[85]), STR_10(CODE[14]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[9]), STR_6(CODE[10]), STR_4(CODE[16]), gear(BANK0[24]), 
		 -> STR_3(CODE[3]), STR_2(CODE[16]), STR_1(CODE[16]), time(BANK0[9]), 


Critical Paths under _main in COMRAM

    _init_config->_clcd_print
    _init_ds1307->_read_ds1307
    _init_ds1307->_write_ds1307
    _write_ds1307->_i2c_write
    _init_clcd->_clcd_write
    _give_password->_clcd_putch
    _get_time->_read_ds1307
    _read_ds1307->_i2c_write
    _display_time->_clcd_print
    _display_the_event->___fttol
    _store_event->___lwmod
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _display_menu->_log_fun
    _log_fun->_clcd_putch
    _write_ext_eeprom->_i2c_write
    _read_ext_eeprom->_i2c_write
    _puts->_putch
    _clcd_putch->___lwmod
    _clcd_print->___wmul
    ___lwmod->___lwdiv

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _display_the_event->___fttol
    _display_menu->_log_fun

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   81464
                                             20 BANK0      1     1      0
                         _clcd_print
                       _display_menu
                  _display_the_event
                       _display_time
                           _get_time
                      _give_password
                        _init_config
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _init_config                                          3     3      0    7057
                                             23 COMRAM     3     3      0
                         _clcd_print
                           _init_adc
                          _init_clcd
                        _init_ds1307
                           _init_i2c
                 _init_matrix_keypad
                        _init_timer0
                    _read_ext_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1307                                          1     1      0     599
                                             17 COMRAM     1     1      0
                        _read_ds1307
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (3) _write_ds1307                                         2     1      1     401
                                             15 COMRAM     2     1      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0    1679
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _give_password                                        3     3      0   13856
                                             28 COMRAM     3     3      0
                            ___lwdiv
                            ___lwmod
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _get_time                                             0     0      0      96
                        _read_ds1307
 ---------------------------------------------------------------------------------
 (3) _read_ds1307                                          2     2      0      96
                                             15 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _display_time                                         0     0      0    4547
                         _clcd_print
 ---------------------------------------------------------------------------------
 (1) _display_the_event                                    1     1      0   25009
                                             11 BANK0      1     1      0
                            ___ftdiv
                            ___fttol
                            ___lwdiv
                            ___lwmod
                           ___lwtoft
                             ___wmul
                         _clcd_print
                         _clcd_putch
                           _read_adc
                        _store_event
 ---------------------------------------------------------------------------------
 (2) _store_event                                          7     5      2    5873
                                             26 COMRAM     7     5      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                   _write_ext_eeprom
 ---------------------------------------------------------------------------------
 (2) _read_adc                                             7     5      2      65
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2452
                                             22 COMRAM     3     0      3
                           ___ftpack
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     448
                                             40 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3032
                                             25 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2344
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _display_menu                                         1     1      0   26132
                                             32 COMRAM     1     1      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                            _log_fun
 ---------------------------------------------------------------------------------
 (2) _log_fun                                             24    20      4   11283
                                             28 COMRAM     4     0      4
                                              0 BANK0     20    20      0
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                          _init_uart
                              _putch
                               _puts
                    _read_ext_eeprom
                      _read_switches
                   _write_ext_eeprom
 ---------------------------------------------------------------------------------
 (3) _write_ext_eeprom                                     4     3      1     281
                                             15 COMRAM     4     3      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _read_switches                                        1     1      0      62
                                             14 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (2) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _read_ext_eeprom                                      2     2      0      96
                                             15 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _i2c_write                                            1     1      0      31
                                             14 COMRAM     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_rep_start                                        0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_read                                             0     0      0       0
                        _i2c_rx_mode
 ---------------------------------------------------------------------------------
 (4) _i2c_rx_mode                                          0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     173
                                             15 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clcd_putch                                           2     1      1    3512
                                             26 COMRAM     2     1      1
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                         _clcd_write
                    _read_ext_eeprom (ARG)
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           3     0      3    4547
                                             20 COMRAM     3     0      3
                             ___wmul (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1    1679
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1002
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    2234
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1627
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     ___wmul (ARG)
     _clcd_write (ARG)
   _display_menu
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _clcd_putch
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _clcd_write (ARG)
       _read_ext_eeprom (ARG)
         _i2c_read
           _i2c_rx_mode
             _i2c_idle
         _i2c_rep_start
           _i2c_idle
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
     _clcd_write
     _log_fun
       _clcd_print
         ___wmul (ARG)
         _clcd_write (ARG)
       _clcd_putch
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         _clcd_write (ARG)
         _read_ext_eeprom (ARG)
           _i2c_read
             _i2c_rx_mode
               _i2c_idle
           _i2c_rep_start
             _i2c_idle
           _i2c_start
             _i2c_idle
           _i2c_stop
             _i2c_idle
           _i2c_write
             _i2c_idle
       _clcd_write
       _init_uart
       _putch
       _puts
         _putch
       _read_ext_eeprom
         _i2c_read
           _i2c_rx_mode
             _i2c_idle
         _i2c_rep_start
           _i2c_idle
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
       _read_switches
         _scan_key
       _write_ext_eeprom
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
   _display_the_event
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _read_adc (ARG)
       _read_adc (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _read_adc (ARG)
         _read_adc (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _read_adc (ARG)
       _read_adc (ARG)
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___lwtoft
       ___ftpack
       _read_adc (ARG)
     ___wmul
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _clcd_putch
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _clcd_write (ARG)
       _read_ext_eeprom (ARG)
         _i2c_read
           _i2c_rx_mode
             _i2c_idle
         _i2c_rep_start
           _i2c_idle
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
     _read_adc
     _store_event
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _write_ext_eeprom
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
   _display_time
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
   _get_time
     _read_ds1307
       _i2c_read
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
   _give_password
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _clcd_putch
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _clcd_write (ARG)
       _read_ext_eeprom (ARG)
         _i2c_read
           _i2c_rx_mode
             _i2c_idle
         _i2c_rep_start
           _i2c_idle
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
     _clcd_write
     _read_switches
       _scan_key
   _init_config
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _init_adc
     _init_clcd
       _clcd_write
     _init_ds1307
       _read_ds1307
         _i2c_read
           _i2c_rx_mode
             _i2c_idle
         _i2c_rep_start
           _i2c_idle
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
       _write_ds1307
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
     _init_i2c
     _init_matrix_keypad
     _init_timer0
     _read_ext_eeprom
       _i2c_read
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
   _read_switches
     _scan_key

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      55       7       33.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      8C       5       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      50       1       85.1%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     131       3        0.0%
DATA                 0      0     131      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Jan 12 08:22:24 2023

             clcd_print@addr 0017               clcd_print@data 0015       __size_of_give_password 03BA  
                         _GO 007E11               log_fun@mem_add 004F          ___wmul@multiplicand 0011  
         _init_matrix_keypad 2186                          l200 1CD8                          l202 1CE0  
                        l302 1D50                          l149 21C4                          l191 1CA8  
                        l183 1C82                          l192 1CC0                          l408 0FEA  
                        l193 1CB0                          l185 1C9A                          l602 21F6  
                        l186 1C8A                          l195 1CB8                          l188 1C92  
                        l460 1360                          l380 0CB8                          l198 1CD0  
                        l526 0AE4                          l382 0CCC                          l528 0AF6  
                        l668 1F78                          _CKE 007E3E                          l954 1938  
                        l896 19F8                          _GIE 007F97                          _RC0 007C10  
                        _RC1 007C11                          _RC2 007C12                ?_display_menu 0001  
                        _RD7 007C1F                          _PR2 000FCB                          _PEN 007E2A  
                        _SEN 007E28                          _RX9 007D5E                          _SMP 007E3F  
                        _TX9 007D66                ?_display_time 0001                          _WUE 007DC1  
                        _isr 0008               clcd_putch@addr 001B               clcd_putch@data 001C  
                        wreg 000FE8          ?_init_matrix_keypad 0001                 ___ftdiv@cntr 0023  
               ___ftdiv@sign 0028                         l1074 1E50                         l1084 1EDA  
                       l4001 15DE                         l4003 15E2                         l4021 16FE  
                       l4031 1730                         l4201 0A22                         l4113 083A  
                       l4025 170E                         l4123 0870                         l4035 1742  
                       l4213 0AB6                         l4125 087E                         l4117 084E  
                       l4133 08AC                         l4231 0B26                         l4151 08FC  
                       l4119 085C                         l4063 06F4                         l4225 0B06  
                       l4217 0AD0                         l4209 0A56                         l4161 093C  
                       l4145 08D2                         l4129 089C                         l4057 06DC  
                       l4235 0B32                         l4227 0B16                         l4251 0B7C  
                       l4163 0944                         l4155 0918                         l4171 0966  
                       l4147 08E6                         l4083 0796                         l4075 0776  
                       l4307 1912                         l4261 0BC8                         l4157 0920  
                       l4069 0726                         l4413 1D24                         l4239 0B3E  
                       l4183 09B4                         l4167 095E                         l4175 0978  
                       l4095 07DA                         l4327 178C                         l4431 138C  
                       l4503 0C6C                         l4089 07C0                         l4281 18AC  
                       l4345 180E                         l4417 1D34                         l3803 2072  
                       l4363 1872                         l4355 183C                         l4443 13DE  
                       l3653 2092                         l4357 184C                         l4349 1822  
                       l4437 13B4                         l4533 0D1C                         l4509 0C94  
                       l3743 1CE8                         l3823 1F12                         l4287 18D4  
                       l4359 1856                         l4455 1428                         l4607 0F04  
                       l4519 0CDE                         l3905 1E1E                         l3665 20A0  
                       l4449 1408                         l4537 0D28                         l4529 0D10  
                       l3907 1E26                         l3819 1F06                         l4707 127C  
                       l4475 1482                         l4467 1454                         l4459 142E  
                       l4483 14C8                         l4379 1B8C                         l4619 0FA6  
                       l4547 0D5C                         l3917 1E46                         l3909 1E2A  
                       l3933 1ED0                         l3925 1EB0                         l3781 1D8A  
                       l3829 1F1E                         l4717 12BE                         l4709 12A0  
                       l4477 1492                         l4469 145E                         l4573 0E06  
                       l4557 0D90                         l4549 0D66                         l3927 1EB8  
                       l3759 1FF6                         l4727 12E4                         l4719 12C6  
                       l3871 1988                         l4583 0E54                         l4743 1AC8  
                       l3929 1EBC                         l3777 1D5E                         l4729 12EC  
                       l4665 111A                         l4657 10C8                         l4649 10A0  
                       l3881 19E4                         l3873 1992                         l4761 1B1E  
                       l4691 1212                         l4667 112E                         l3883 19EE  
                       l3875 19B0                         l3867 197A                         l4587 0E5A  
                       l4685 11EC                         l4749 1AE8                         l3799 205E  
                       l3879 19C6                         l4599 0EBE                         l4767 1B3E  
                       l4697 124E                         _ADFM 007E07                         l3995 15AA  
                       ?_isr 0001                         _ADON 007E10                         _CHS2 007E14  
                       STR_1 0666                         STR_2 0666                         STR_3 06AA  
                       STR_4 0676                         STR_5 0610                         STR_6 0694  
                       STR_7 069E                         STR_8 0601                         STR_9 0612  
                       _BRGH 007D62                         _CREN 007D5C                         _FERR 007D5A  
                       _CSRC 007D67                         u4300 08AA                         u5020 0D80  
                       u4240 0808                         u4250 0838                         u4520 0B8C  
                       u3650 2090                         u4610 17B2                         _PEIE 007F96  
                       u3820 1D82                         u4541 1894                         u3830 1DAA  
                       u4615 17A8                         u4800 144E                         u4561 18BC  
                       u3827 1D78                         _RCIE 007CED                         _RCIF 007CF5  
                       _RCEN 007E2B                         u3837 1DA0                         u4591 176A  
                       _OERR 007D59                         _SCKP 007DC4                         _RBPU 007F8F  
                       _RX9D 007D58                         _SPEN 007D5F                         _RSEN 007E29  
                       _TX9D 007D60                         _SREN 007D5D                         _TRMT 007D61  
                       _TXIE 007CEC                         _TXIF 007CF4                         _TXEN 007D65  
                       _SYNC 007D64                         _data 0060                         _date 006B  
                       _gear 00BF                         _main 1AC4                 ___ftpack@arg 000F  
                       _menu 0100                 ___ftpack@exp 0012                         _wait 004B  
                       _time 00AF                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr0l 000FE9                         fsr2h 000FDA  
                       indf1 000FE7                         fsr1l 000FE1                         indf2 000FDF  
                       fsr2l 000FD9                         btemp 0051                         _puts 205C  
                       pclat 000FFA                         prodh 000FF4                         prodl 000FF3  
                       start 0016             log_fun@event_num 0045         ??_init_matrix_keypad 000F  
               ___param_bank 000010               clcd_write@byte 0010                  _store_event 1598  
              _i2c_rep_start 21DE                ??_i2c_rx_mode 000F                 ___fttol@exp1 00E1  
               ___fttol@lval 00DD                        ??_isr 0001                 ?_init_ds1307 0001  
             ??_display_menu 0021                        _ABDEN 007DC0                        _ADCS0 007E00  
                      _ADCS1 007E01                        _ADCS2 007E02                        _ADDEN 007D5B  
                      ?_main 0001                 ?_read_ds1307 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D               ??_display_time 0018                        _BCLIF 007D0B  
                      _ACQT0 007E03                        _ACQT1 007E04                        _ACQT2 007E05  
                      STR_10 0686                        STR_11 0656                        STR_12 06A7  
                      STR_13 0623                        STR_14 0645                        STR_15 0634  
                      _BRG16 007DC3              __end_of___ftdiv 196A                        ?_puts 0010  
            __end_of___fttol 1884              __end_of___lwdiv 1E5A              __end_of___lwmod 1EE4  
               ?_init_config 0001                        _RCIDL 007DC6                        _VCFG0 007E0C  
                      _VCFG1 007E0D                        _RCREG 000FAE                        _SENDB 007D63  
                      _SPBRG 000FAF                        _PORTB 000F81                        _PORTD 000F83  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _SSPIF 007CF3                        _TXREG 000FAD                 ?_init_timer0 0001  
                      _blink 002F             log_fun@view_flag 00AB              __end_of_log_fun 0C32  
              ___ftpack@sign 0013                _give_password 0C32                        _putch 21C2  
                      tablat 000FF5                        puts@s 0010                        status 000FD8  
           init_ds1307@dummy 0012        __size_of_write_ds1307 001E              __initialization 1BEE  
             ?_i2c_rep_start 0001                 __end_of_main 1B5E                 __end_of_puts 2086  
           __end_of_i2c_idle 21FE             __end_of_i2c_read 21EE             __end_of_i2c_stop 21D6  
          ??_read_ext_eeprom 0010                       ??_main 002D                ___fttol@sign1 00DC  
                     ??_puts 0012                __activetblptr 000002          __end_of_i2c_rx_mode 21F6  
       write_ext_eeprom@data 0010         write_ext_eeprom@wait 0012                       _ADCON0 000FC2  
                     _ADCON1 000FC1                       _ABDOVF 007DC7               ?_give_password 0001  
           read_switches@key 004A                       _ADRESH 000FC4                       _ADRESL 000FC3  
           _write_ext_eeprom 1FD2                       ?_putch 0001             __end_of___ftpack 1A18  
                     _GODONE 007E11                       i2l3583 1A7C                       i2l3585 1A86  
           __end_of___lwtoft 20F8                 _write_ds1307 213A                       _TMR2IE 007CE9  
                     _TMR2IF 007CF1                       _TMR2ON 007E52                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _TRISC6 007CA6  
                     _TRISC7 007CA7                       _TRISD7 007CAF                       _SSPBUF 000FC9  
         __size_of_i2c_start 0008           __size_of_i2c_write 000C             __end_of_get_time 1BEE  
                     ___wmul 20AE                    ??___ftdiv 0020                    ??___fttol 00D7  
                  ??___lwdiv 0013                    ??___lwmod 001A             __end_of_init_i2c 2186  
           __end_of_init_adc 211A             __end_of_read_adc 1F9C                       clear_0 1BF4  
                     clear_1 1C00             __end_of_scan_key 1CEC                 __pdataCOMRAM 004B  
                  ??_log_fun 0021                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8             _count_event_flag 0081  
                log_fun@_378 0041                  log_fun@_379 0043                   __accesstop 0060  
    __end_of__initialization 1C66                  log_fun@wait 00AD         __end_of_display_menu 1362  
       __end_of_display_time 21AA                ___rparam_used 000001                   ___ftdiv@f1 001A  
                 ___ftdiv@f2 001D                   ___ftdiv@f3 0024              ??_i2c_rep_start 000F  
                 ___fttol@f1 0029               __pcstackCOMRAM 0001                 __pidataBANK0 211A  
               __pidataBANK1 1DB2                  _i2c_rx_mode 21EE       __size_of_read_switches 003E  
              __end_of_putch 21CE                   ___lwtoft@c 0017         __size_of_init_ds1307 0048  
          __end_of_i2c_start 21DE            __end_of_i2c_write 21C2         __size_of_read_ds1307 002A  
            ??_give_password 001D         __size_of_init_config 0066         __size_of_init_timer0 000C  
                    ??_putch 000F      write_ext_eeprom@address 0011                   __pbssBANK0 0060  
                  ?_i2c_idle 0001                    ?_i2c_read 0001                    ?_i2c_stop 0001  
         __size_of_init_clcd 0036           __size_of_init_uart 003E                   _key11_flag 0085  
                 _clcd_print 1D52                   _clcd_putch 2158                   _clcd_write 2086  
               ?_store_event 001B              read_ds1307@data 0011                      ?___wmul 000F  
          read_switches@once 0050                      _ACKSTAT 007E2E                    ?___ftpack 000F  
                  ?___lwtoft 0017                      _SSPCON1 000FC6                    ?_get_time 0001  
              _read_switches 1EE4    display_the_event@col_flag 0093                   ??_i2c_idle 000F  
                 ??_i2c_read 000F                   ??_i2c_stop 000F                    ?_init_i2c 0001  
                  ?_init_adc 0001                    ?_read_adc 000F                    ?_scan_key 0001  
            _read_ext_eeprom 2032                   _enter_flag 0083                      __Hparam 0000  
                    __Lparam 0000         display_the_event@key 00E2  __size_of_init_matrix_keypad 0012  
   display_the_event@on_flag 0095                      ___ftdiv 1884              __size_of___wmul 0026  
                    ___fttol 1756     __end_of_write_ext_eeprom 2008                      ___lwdiv 1E08  
               store_event@i 001E                 store_event@j 0020                      ___lwmod 1EA2  
               __psmallconst 0600                      __pcinit 1BEE                   ??___ftpack 0014  
                    __ramtop 0600                      __ptext0 1AC4                      __ptext1 1CEC  
                    __ptext2 21AA                      __ptext3 2186                      __ptext4 2170  
                    __ptext5 1E5A                      __ptext6 213A                      __ptext7 1F9C  
                    __ptext8 20F8                      __ptext9 0C32                   ??___lwtoft 001A  
          __end_of_init_clcd 1FD2                 __size_of_isr 1ABC                      _log_fun 06AE  
          __end_of_init_uart 1F60                      _op_flag 008F                 init_config@i 0019  
             ?_read_switches 0001                      main@key 00EB        __size_of_display_menu 0376  
                 ??_get_time 0012               __pintcode_body 1A18        __size_of_display_time 0012  
       end_of_initialization 1C66                   ??_init_i2c 000F                   ??_init_adc 000F  
              __Lmediumconst 0000                   ??_read_adc 0011                      int_func 1A18  
                 ??_scan_key 000F                  ?_clcd_print 0015                  ?_clcd_putch 001B  
                ?_clcd_write 000F                      postdec1 000FE5                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE         give_password@attempt 0076  
                  _PORTBbits 000F81              read_adc@channel 0013                 _display_menu 0FEC  
               _display_time 2198                 log_fun@i_381 00DF                 log_fun@i_374 00D7  
               log_fun@i_367 00E9                 log_fun@i_376 00DB                 log_fun@j_366 00E3  
               log_fun@j_368 00E5                i2c_write@data 000F              read_adc@reg_val 0014  
               log_fun@count 001D                 log_fun@limit 001F      __end_of_read_ext_eeprom 205C  
                ___ftdiv@exp 0027              _key11_wait_flag 0087                 ?_i2c_rx_mode 0001  
  give_password@failure_flag 009B         __size_of_store_event 01BE               __end_of___wmul 20D4  
              __pidataCOMRAM 21FE                  _adc_reg_val 002D             store_event@count 001B  
        start_initialization 1BEE              ??_read_switches 000F          __size_of_clcd_print 0060  
        __size_of_clcd_putch 0018          __size_of_clcd_write 0028                    _i2c_start 21D6  
                __end_of_isr 1AC4                    _i2c_write 21B6            __size_of_i2c_idle 0008  
          __size_of_i2c_read 0008            __size_of_i2c_stop 0008   give_password@password_flag 00A1  
     display_the_event@count 004D        __end_of_i2c_rep_start 21E6                     ??___wmul 0013  
              ??_init_ds1307 0012                  __pdataBANK0 00B8                  __pdataBANK1 0100  
         give_password@delay 007A                ??_read_ds1307 0010  read_switches@detection_type 000F  
              ??_init_config 0018            __size_of___ftpack 00AE                   log_fun@key 0049  
              ??_init_timer0 000F                  __pbssCOMRAM 002D            __size_of___lwtoft 0024  
              __pcstackBANK0 00D7                   ?_i2c_start 0001                   ?_i2c_write 0001  
      __end_of_give_password 0FEC             ?_read_ext_eeprom 0001            __size_of_get_time 0090  
          __size_of_init_i2c 0016            __size_of_init_adc 0022            __size_of_read_adc 003C  
           ___lwdiv@dividend 000F            __size_of_scan_key 0078     give_password@no_attempts 00BD  
                  __pintcode 0008                     ?___ftdiv 001A           read_ds1307@address 0010  
                   ?___fttol 0029                     ?___lwdiv 000F                    _clock_reg 007E  
                   ?___lwmod 0016            ?_write_ext_eeprom 0010           ??_write_ext_eeprom 0011  
                __smallconst 0600                     ?_log_fun 001D          __end_of_init_ds1307 1EA2  
        __end_of_read_ds1307 2032             ___lwdiv@quotient 0014                    _init_clcd 1F9C  
        __end_of_init_config 1D52                    _init_uart 1F22                    _menu_flag 0033  
             __size_of_putch 000C                ?_write_ds1307 0010          __end_of_init_timer0 21B6  
                  _node_flag 008B               ___wmul@product 0013                 ??_clcd_print 0018  
               ??_clcd_putch 001C   __end_of_init_matrix_keypad 2198                 ??_clcd_write 0010  
             init_config@add 0018                    _wait_flag 0091                isr@for_minute 00A7  
          _display_the_event 1362           ?_display_the_event 0001            display_menu@count 0035  
       __size_of_i2c_rx_mode 0008        clcd_write@control_bit 000F            ___wmul@multiplier 000F  
        ??_display_the_event 002D                  ??_i2c_start 000F           __end_of_clcd_print 1DB2  
                ??_i2c_write 000F           __end_of_clcd_putch 2170           __end_of_clcd_write 20AE  
                 ?_init_clcd 0001                   ?_init_uart 0001                    copy_data0 1C1A  
                  copy_data1 1C3A                    copy_data2 1C5A               ??_write_ds1307 0011  
    give_password@key_8_flag 009F                     _i2c_idle 21F6                     _i2c_read 21E6  
                   _i2c_stop 21CE                  _count_event 0031                     __Hrparam 0000  
  __end_of_display_the_event 1598        display_the_event@flag 003B                     __Lrparam 0000  
      display_the_event@wait 0097                  _init_ds1307 1E5A             __size_of___ftdiv 00E6  
           __size_of___fttol 012E       read_ext_eeprom@address 0010             __size_of___lwdiv 0052  
           __size_of___lwmod 0042                     ___ftpack 196A                  _read_ds1307 2008  
                   ___lwtoft 20D4                  _init_config 1CEC          write_ds1307@address 0011  
                _init_timer0 21AA             __size_of_log_fun 0584              ___lwdiv@divisor 0011  
            ___lwdiv@counter 0013                     __ptext10 1B5E                     __ptext11 2008  
                   __ptext20 0FEC                     __ptext12 2198                     __ptext21 06AE  
                   __ptext13 1362                     __ptext30 21E6                     __ptext22 1FD2  
                   __ptext14 1598                     __ptext31 21EE                     __ptext23 1EE4  
                   __ptext15 1F60                     __ptext40 1EA2                     __ptext32 21F6  
                   __ptext24 1C74                     __ptext16 20D4                     __ptext41 1E08  
                   __ptext33 205C                     __ptext25 2032                     __ptext17 1756  
                   __ptext34 21C2                     __ptext26 21B6                     __ptext18 1884  
                   __ptext35 1F22                     __ptext27 21CE                     __ptext19 196A  
                   __ptext36 2158                     __ptext28 21D6                     __ptext37 1D52  
                   __ptext29 21DE                     __ptext38 2086                     __ptext39 20AE  
                   _get_time 1B5E                     _init_i2c 2170          read_ext_eeprom@data 0011  
                   _init_adc 20F8                     _read_adc 1F60                __size_of_main 009A  
                   _log_flag 0089                __size_of_puts 002A                     _scan_key 1C74  
                   _one_flag 008D                     _password 00B8                ??_store_event 001D  
                   int$flags 0051       display_menu@key11_wait 0037      give_password@timer_flag 00A3  
                  putch@byte 000F                     isr@count 00A5       give_password@enter_pwd 0099  
           give_password@key 001F                  ??_init_clcd 0011        __end_of_read_switches 1F22  
                   log_fun@i 0047                     log_fun@j 00A9                     log_fun@k 00E7  
                ??_init_uart 000F                     intlevel2 0000             ___lwmod@dividend 0016  
 __size_of_display_the_event 0236              display_menu@key 0021         __end_of_write_ds1307 2158  
        __end_of_store_event 1756              ___lwmod@divisor 0018              ___lwmod@counter 001A  
     __size_of_i2c_rep_start 0008    __size_of_write_ext_eeprom 0036               give_password@i 009D  
             give_password@j 003D               give_password@k 003F             write_ds1307@data 0010  
      display_menu@menu_wait 0039     __size_of_read_ext_eeprom 002A  
